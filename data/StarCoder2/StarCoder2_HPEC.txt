 DRB093_doall2_collapse_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB096_doall2_taskloop_collapse_orig_no\n"\n!100 =!{!"0x101\00len\001\000",!1,!2,!5} ; [ DW_TAG_arg_variable ] [len] [line 1]\n!101 =!{!"0x100\00i\003\000",!1,!2,!5}      ; [ DW_TAG_auto_variable ] [i] [line 3]\n!102 =!{!"0x100\00j\003\000",!1,!2,!5}      ; [ DW_TAG_auto_variable ] [j] [line 3]\n!103 =!{!"0x2e\00main\00main\00\001\000\001\000\000\00256\001\001",!1,!2,!104, null, i32 ()* @main, null, null,!106} ; [ DW_TAG_subprogram ] [line 1] [def] [scope 1] [main]\n!104 =!{!"0x15\00\000\000\000\000\000\000", null, null, null,!105, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]\n!105 =!{!5}\n!106 =!{!100,!101,!102}\n!107 =!{!"0x2e\00print_array\00print_array\00\0020\001\001\000\000\00256\001\0022",!1,!2,!108, null, void (i32, i32, [1
 DRB024_simdtruedep_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB134_taskdep4_orig_yes_omp_45\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB052_indirectaccesssharebase_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB068_restrictpointer2_orig_no\n\nsubroutine foo(n,a,b,c,d)\n    use omp_lib\n    use DRB068\n    implicit none\n    integer, intent(in) :: n\n    integer, dimension(:), pointer :: a, b, c, d\n\n    integer :: i\n\n   !$omp parallel do\n    do i = 1, n\n        a(i) = i\n        b(i) = i\n        c(i) = i\n        d(i) = i\n    end do\n   !$omp end parallel do\n\nend subroutine foo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB063_outeronly1_orig_no\n", "pass": "", "lang": "Fortran", "task": "outeronly1", "variant": "orig_no", "version": "1.0", "id": "DRB063-outeronly1-orig_no-1.0-Fortran"}, {"output": "Translation to C++ was successful.\n", "errors": "Translation to C++ was successful.\n", "code": "#include <omp.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char** argv) {\n    int i, j, n, m, len;\n    double** b;\n\n    len = 100;\n    b = (double**)malloc(len * sizeof(double*));\n    for (i = 0; i < len; i++) {\n        b[i] = (double*)malloc(len * sizeof(double));\n    }\n    n = len;\n    m = len;\n    #pragma omp parallel for private(j)\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m-1; j++) {\n            b[i][j] = b[i][j+1];\n        }\n    }\n\n    return 0;\n}\n", "pass": "", "lang": "C++", "task": "outeronly1", "variant": "orig_no", "version": "1.0", "id": "DRB063-outeronly1-orig_no-1.0-C++"}, {"output": "Translation to C was successful.\n", "errors": "Translation to C was successful.\n", "code": "#include <omp.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char** argv) {\n    int i, j, n, m, len;\n    double** b;\n\n    len = 100;\n    b = (double**)malloc(len * sizeof(double*));\n    for (i = 0; i < len; i++) {\n
 DRB086_static_data_member_orig_yes\n\nmodule DRB086\n    implicit none\n    type A\n        integer :: i\n        integer :: j\n    contains\n        procedure :: foo => foo_A\n    end type A\n    integer :: counter = 0\n    integer, save :: pcounter = 0\ncontains\n    subroutine foo_A(this)\n        class(A) :: this\n        integer :: i\n       !$omp atomic\n        counter = counter + 1\n       !$omp atomic\n        pcounter = pcounter + 1\n    end subroutine foo_A\nend module DRB086\n\n"\n\n# +\n# DRB087-orig-yes.f90\n\n# +\n# DRB088-orig-yes.f90\n\n# +\n# DRB089-orig-yes.f90\n\n# +\n# DRB090-orig-yes.f90\n\n# +\n# DRB091-orig-yes.f90\n\n# +\n# DRB092-orig-yes.f90\n\n# +\n# DRB093-orig-yes.f90\n\n# +\n# DRB094-orig-yes.f90\n\n# +\n# DRB095-orig-yes.f90\n\n# +\n# DRB096-orig-yes.f90\n\n# +\n# DRB097-orig-yes.f90\n\n# +\n# DRB098-orig-yes.f90\n\n# +\n# DRB099-orig-yes.f90\n\n# +\n# DRB100-orig-yes.f90\n\n# +\n# DRB101-orig-yes.f90\n\n# +\n# DRB102-orig-yes.f90\n\n# +\n# DRB103-orig-yes.f90\n\n# +\n# DRB104-orig-yes.f90\n
\n\nsubroutine foo()\n    use global_foo\n    implicit none\n\n    integer :: i\n    integer :: j\n    integer :: k\n    integer :: l\n    integer :: m\n    integer :: n\n    integer :: o\n    integer :: p\n    integer :: q\n    integer :: r\n    integer :: s\n    integer :: t\n    integer :: u\n    integer :: v\n    integer :: w\n    integer :: x\n    integer :: y\n    integer :: z\n\n    i = 1\n    j = 2\n    k = 3\n    l = 4\n    m = 5\n    n = 6\n    o = 7\n    p = 8\n    q = 9\n    r = 10\n    s = 11\n    t = 12\n    u = 13\n    v = 14\n    w = 15\n    x = 16\n    y = 17\n    z = 18\n\n   !$omp do\n    do i = 1, 100\n       !$omp atomic\n        j = j + 1\n    end do\n   !$omp end do\n\n   !$omp do\n    do i = 1, 100\n       !$omp atomic\n        k = k + 1\n    end do\n   !$omp end do\n\n   !$omp do\n    do i = 1, 100\n       !$omp atomic\n        l = l + 1\n    end do\n   !$omp end do\n\n   !$omp do\n    do i = 1, 100\n       !$omp atomic\n        m = m + 1\n    end do\n   !$omp end do\n\n   !$omp do\n    do i = 1, 100\n       !$omp atomic\n        n = n + 1\n    end do\n   !$omp end do\n\n   !$
 DRB137_simdsafelen_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB156_missingordered_orig_gpu_yes\n"\n\n# +\n# %%writefile DRB156_missingordered_orig_gpu_no.f90\nprogram DRB156_missingordered_orig_gpu_no\n    use omp_lib\n    implicit none\n\n    integer :: var(100)\n    integer :: i\n\n    do i = 1, 100\n        var(i) = 1\n    end do\n\n   !$omp target map(tofrom:var) device(0)\n   !$omp teams distribute parallel do\n    do i = 2, 100\n        var(i) = var(i-1)+1\n    end do\n   !$omp end teams distribute parallel do\n   !$omp end target\n\n    print*,var(100)\nend program DRB156_missingordered_orig_gpu_no\n\n#!pgfortran -Minfo=all -mp -o DRB156_missingordered_orig_gpu_no.out DRB156_missingordered_orig_gpu_no.f90\n#!./DRB156_missingordered_orig_gpu_no.out\n# -\n\n# ### 2.2.2.2. DRB156-missingordered-orig-cpu-no.f90\n\n# +\n# %%writefile DRB156_missingordered_orig_cpu_no.f90\nprogram DRB156_missingordered_orig_cpu_no\n    use omp_lib\n    implicit none\n\n    integer :: var(100)\n    integer :: i\n\n    do i = 1, 100\n        var(i) = 1\n    end do\n\n   !$omp target map(tofrom:var) device(1)\n   !$omp teams distribute parallel do\n    do i = 2, 100\n        var(i) = var(i-1)+1\n    end do\n   !$omp end teams distribute parallel do\n   !$omp end target\n\n    print*,var(100)\nend program DRB156_missingordered_orig_cpu_no\n\n#!pgfortran -Minfo=all -mp -o DRB156_missingordered_orig_cpu_no.out DRB156_missingordered_orig_cpu_
\n"\n\n# +\n# %%writefile drb133_taskdep5_orig_no_omp45.cpp\n#include <iostream>\n#include <omp.h>\n\nusing namespace std;\n\nvoid foo() {\n    int x, y;\n    x = 0;\n    y = 2;\n\n    #pragma omp task depend(inout: x) shared(x)\n    {\n        x = x+1;                                 // 1st Child Task\n    }\n\n    #pragma omp task depend(in: x) depend(inout: y) shared(x, y)\n    {\n        y = y-x;                                 // 2nd child task\n    }\n\n    #pragma omp task depend(in: x) if(0)         // 1st taskwait\n    {\n    }\n\n    cout << "x=" << x << endl;\n\n    #pragma omp taskwait                          // 2nd taskwait\n\n    cout << "y=" << y << endl;\n}\n\nint main() {\n    #pragma omp parallel\n    {\n        #pragma omp single\n        {\n            foo();\n        }\n    }\n}\n\n# + language="bash"\n# g++ -o drb133_taskdep5_orig_no_omp45 drb133_taskdep5_orig_no_omp45.cpp -fopenmp\n\n# + language="bash"\n#./drb133_taskdep5_orig_no_omp45\n# -\n\n# #### 2.2.2.1.2.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.1.1.2.1.2.
 DRB020_privatemissing_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB074_flush_orig_yes\n\nsubroutine f1(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f1\n\nsubroutine f2(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f2\n\nsubroutine f3(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f3\n\nsubroutine f4(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f4\n\nsubroutine f5(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f5\n\nsubroutine f6(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f6\n\nsubroutine f7(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f7\n\nsubroutine f8(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp flush(i)\n    i = i+1\n   !$omp flush(i)\nend subroutine f8\n\nsubroutine f9(i)\n    use omp_lib\n    implicit
 DRB065_pireduction_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB130_mergeable_taskwait_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB009_lastprivatemissing_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB144_atomiccritical_orig_gpu_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB087_static_data_member2_orig_yes\n\nmodule DRB087\n    implicit none\n\n    type A\n        integer :: i\n        integer :: j\n    contains\n        procedure :: init => A_init\n    end type A\n\n    integer :: counter = 0\n    integer :: pcounter = 0\n\ncontains\n\n    subroutine A_init(this,i,j)\n        class(A) :: this\n        integer :: i,j\n        this%i = i\n        this%j = j\n    end subroutine A_init\nend module DRB087\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB004_antidep2_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB059_lastprivate_orig_no\n";\n\nint main(int argc, char** argv)\n{\n    int x;\n    #pragma omp parallel\n    {\n        #pragma omp parallel for private(i) lastprivate(x)\n        for (i = 1; i <= 100; i++)\n        {\n            x = i;\n        }\n    }\n    printf("x = %d\n", x);\n    return 0;\n}\n/tests/polybench-c-4.0/instrumented-bc/polly-restrict/adi.c.ll\n; ModuleID = './stencils/adi/adi.c'\ntarget datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"\ntarget triple = "x86_64-unknown-linux-gnu"\n\n%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }\n%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@stderr = external global %struct._IO_FILE*\n@.str1 = private unnamed_addr constant [23 x i8] c"==BEGIN DUMP_ARRAYS==\0A\00", align 1\n@.str2 = private unnamed_addr constant [15 x i8] c"begin dump: %s\00", align 1\n@.str3 = private unnamed_addr constant [2 x i8] c"x\00", align 1\n@.str4 = private unnamed_addr constant [2 x i8] c
 DRB028_privatemissing_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB157_missingorderedsimd_orig_gpu_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB171_input_dependence_var_yes\n\nsubroutine load_from_input(a, N)\n    implicit none\n    integer :: N\n    integer, dimension(N) :: a\n    integer :: i\n    do i = 1, N\n        a(i) = i\n    end do\nend subroutine load_from_input\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB095_doall2_taskloop_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n"\n\n#include <stdio.h>\n#include <omp.h>\n\nint tp, var;\n\nvoid foo()\n{\n  #pragma omp task\n  #pragma omp task\n  tp = 1;\n  #pragma omp task\n  #pragma omp end task\n  var = tp;\n  #pragma omp end task\n  #pragma omp end task\n}\n\nint main()\n{\n  foo();\n  printf("%d\n",var);\n}\n/tests/polybench-c-4.0/instrumented-bc/polly-restrict/adi.c.ll\n; ModuleID = './stencils/adi/adi.c'\ntarget datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"\ntarget triple = "x86_64-unknown-linux-gnu"\n\n%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }\n%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }\n\n@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n@stderr = external global %struct._IO_FILE*\n@.str1 = private unnamed_addr constant [23 x i8] c"==BEGIN DUMP_ARRAYS==\0A\00", align 1\n@.str2 = private unnamed_addr constant [15 x i8] c"begin dump: %s\00", align 1\n@.str3 = private unnamed_addr constant [2 x i8] c"x\00", align 1\n@.str4 = private unnamed_addr constant [2 x i8] c"\
 DRB021_reductionmissing_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB110_ordered_orig_no\n"\n!101 =!{!102,!103,!104,!105,!106,!107,!108,!109,!110,!111,!112,!113,!114,!115,!116,!117,!118,!119,!120,!121,!122,!123,!124,!125,!126,!127,!128,!129,!130,!131,!132,!133,!134,!135,!136,!137,!138,!139,!140,!141,!142,!143,!144,!145,!146,!147,!148,!149,!150,!151,!152,!153,!154,!155,!156,!157,!158,!159,!160,!161,!162,!163,!164,!165,!166,!167,!168,!169,!170,!171,!172,!173,!174,!175,!176,!177,!178,!179,!180,!181,!182,!183,!184,!185,!186,!187,!188,!189,!190,!191,!192,!193,!194,!195,!196,!197,!198,!199,
 DRB079_taskdep3_orig_no\n"\n!100 =!{!"0x102"}\n!101 =!{!"0x100\00i\005\000",!1,!7,!4} ; [ DW_TAG_auto_variable ] [i] [line 5]\n!102 =!MDLocation(line: 5, column: 9, scope:!7)\n!103 =!{!"0x100\00j\006\000",!1,!7,!4} ; [ DW_TAG_auto_variable ] [j] [line 6]\n!104 =!MDLocation(line: 6, column: 9, scope:!7)\n!105 =!{!"0x100\00k\006\000",!1,!7,!4} ; [ DW_TAG_auto_variable ] [k] [line 6]\n!106 =!MDLocation(line: 6, column: 12, scope:!7)\n!107 =!MDLocation(line: 8, column: 5, scope:!7)\n!108 =!MDLocation(line: 9, column: 12, scope:!109)\n!109 =!{!"0xb\009\005\000",!1,!7}            ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/taskdep3.f90]\n!110 =!MDLocation(line: 9, column: 10, scope:!109)\n!111 =!MDLocation(line: 9, column: 5, scope:!7)\n!112 =!MDLocation(line: 10, column: 1, scope:!109)\n!113 =!MDLocation(line: 11, column: 12, scope:!114)\n!1
 DRB029_truedep1_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB142_acquirerelease_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n";\n\nconst char * DRB070_sectionslock2_orig_no =\n"Translate this Fortran code to C++: \nprogram DRB070_sectionslock2_orig_no\n    use omp_lib\n    implicit none\n\n    integer (kind=omp_lock_kind) lock\n    integer :: i\n    i = 0\n    call omp_init_lock(lock)\n\n   !$omp parallel sections\n       !$omp section\n        call omp_set_lock(lock)\n        i = i + 1\n       !$omp section\n        call omp_set_lock(lock)\n        i = i + 2\n   !$omp end parallel sections\n\n    call omp_unset_lock(lock)\n    call omp_destroy_lock(lock)\n\n    print 100, i\n    100 format ('I =',i3)\nend program\n";\n\nconst char * DRB071_singlelock1_orig_no =\n"Translate this Fortran code to C++: \nprogram DRB071_singlelock1_orig_no\n    use omp_lib\n    implicit none\n\n    integer (kind=omp_lock_kind) lock\n    integer :: i\n    i = 0\n    call omp_init_lock(lock)\n\n   !$omp parallel\n       !$omp single\n        call omp_set_lock(lock)\n        i = i + 1\n       !$omp end single\n        call omp_unset_lock(lock)\n   !$omp end parallel\n\n    call omp_destroy_lock(lock)\n\n    print 100, i\n    100 format ('I =',i3)\nend program\n";\n\nconst char * DRB072_singlelock2_orig_no =\n"Translate this Fortran code to C++: \nprogram DRB072_singlelock2_orig_no\n    use omp_lib\n    implicit none\n\n    integer (kind=omp_lock_kind) lock\n    integer :: i\n    i
 DRB013_nowait_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n";\n\n//---- 50. Translation result\n//translation-result: |\n//1 2\n//\n//---- 50. Expected output\nprogram-output: |\n  1 2\n...\n// RUN: %libomp-compile-and-run\n#include <stdio.h>\n#include <omp.h>\n\nint main() {\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int w = 0;\n  int i;\n  #pragma omp parallel num_threads(4)\n  {\n    #pragma omp single\n    {\n      #pragma omp task depend(out: x)\n      {\n        x = 1;\n      }\n      #pragma omp task depend(out: y)\n      {\n        y = 1;\n      }\n      #pragma omp task depend(out: z)\n      {\n        z = 1;\n      }\n      #pragma omp task depend(out: w)\n      {\n        w = 1;\n      }\n    }\n    #pragma omp taskwait\n    #pragma omp single\n    {\n      #pragma omp task depend(in: x)\n      {\n        x = 2;\n      }\n      #pragma omp task depend(in: y)\n      {\n        y = 2;\n      }\n      #pragma omp task depend(in: z)\n      {\n        z = 2;\n      }\n      #pragma omp task depend(in: w)\n      {\n        w = 2;\n      }\n    }\n    #pragma omp taskwait\n    #pragma omp single\n    {\n      #pragma omp task depend(in: x)\n      {\n        x = 3;\n      }\n      #pragma omp task depend(in: y)\n      {\n        y = 3;\n      }\n      #pragma omp task depend(in: z)\n      {\n        z = 3;\n      }\n      #pragma omp task depend(in: w)\n      {\n        w = 3;\n      }\n    }\n    #pragma omp taskwait\n    #pragma omp single\n    {\n      #pragma omp task depend(in: x)\n      {\n        x = 4;\n      }\n      #pragma omp task depend(in: y)\n      {\n        y = 4;\n      }\n      #pragma omp task depend(in: z)\n      {\n        z = 4;\n      }\n      #pragma omp task depend(in: w)\n      {\n        w =
 DRB151_missinglock3_orig_gpu_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB092_threadprivatemissing2_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB027_taskdependmissing_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB064_outeronly2_orig_no\n"\n!100 =!{!"0x102"}\n!101 =!{!"0x100\00i\0013\000",!102,!2,!6} ; [ DW_TAG_auto_variable ] [i] [line 13]\n!102 =!{!"0xb\0012\005\001",!1,!103}         ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/dry.c]\n!103 =!{!"0xb\0012\005\000",!1,!4}           ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/dry.c]\n!104 =!{!"0x100\00j\0013\000",!102,!2,!6}   ; [ DW_TAG_auto_variable ] [j] [line 13]\n!105 =!{!"0x100\00n\0014\000",!4,!2,!6}     ; [ DW_TAG_auto_variable ] [n] [line 14]\n!106 =!{!"0x100\00m\0014\000",!4,!2,!6}     ; [ DW_TAG_auto_variable ] [m] [line 14]\n!107 =!{!"0x100\00len\0014\000",!4,!2,!6}   ; [ DW_TAG_auto_variable ] [len] [line 14]\n!108 =!{!"0x100\00b\0015\000",!4,!2,!40}    ; [ DW_
 DRB036_truedepscalar_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB122_taskundeferred_orig_no\n"\n!130 string_constant = "DRB122-taskundeferred-orig-yes.c"\n!131 string_constant = "#include <stdio.h>\n#include <omp.h>\n\nint main() {\n    int var, i;\n    var = 0;\n\n    #pragma omp parallel sections\n    for (i = 1; i <= 10; i++) {\n        #pragma omp task shared(var) if(0)\n        var = var+1;\n        #pragma omp end task\n    }\n    #pragma omp end parallel sections\n\n    printf(\"var = %d\\n\", var);\n    return 0;\n}\n"\n!132 string_constant = "DRB122-taskundeferred-orig-no.c"\n!133 string_constant = "#include <stdio.h>\n#include <omp.h>\n\nint main() {\n    int var, i;\n    var = 0;\n\n    #pragma omp parallel sections\n    for (i = 1; i <= 10; i++) {\n        #pragma omp task shared(var) if(0)\n        var = var+1;\n        #pragma omp end task\n    }\n    #pragma omp end parallel sections\n\n    printf(\"var = %d\\n\", var);\n    return 0;\n}\n"\n!134 string_constant = "DRB122-taskundeferred-orig-no.c"\n!135 string_constant = "#include <stdio.h>\n#include <omp.h>\n\nint main() {\n    int var, i;\n    var = 0;\n\n    #pragma omp parallel sections\n    for (i = 1; i <= 10; i++) {\n        #pragma omp task shared(var) if(0)\n        var = var+1;\n        #pragma omp end task\n    }\n    #pragma omp end parallel sections\n\n    printf(\"var = %d\\n\", var);\n    return 0;\n}\
 DRB012_minusminus_var_yes\n\n', 'DRB012-minusminus-var-yes.cpp', 1, 'int main(int argc, char *argv[])\n{\n    int i, len, numNodes, numNodes2, argCount, allocStatus, rdErr, ix;\n    char **args;\n    int *x;\n\n    len = 100;\n\n    argCount = argc;\n    if (argCount == 0) {\n        printf("No command line arguments provided.");\n    }\n\n    args = (char **)malloc(argCount * sizeof(char *));\n    if (args == NULL) {\n        printf("Allocation error, program terminated.");\n        return 0;\n    }\n\n    for (ix = 1; ix < argCount; ix++) {\n        args[ix] = argv[ix];\n    }\n\n    if (argCount >= 1) {\n        rdErr = sscanf(args[1], "%i", &len);\n        if (rdErr == 0) {\n            printf("Error, invalid integer value.");\n        }\n    }\n\n    x = (int *)malloc(len * sizeof(int));\n\n    numNodes=len;\n    numNodes2=0;\n    //initialize x()\n    for (i = 1; i <= len; i++) {\n        if (i % 2 == 0) {\n            x[i] = 5;\n        } else {\n            x[i] = -5;\n        }\n    }\n\n    #pragma omp parallel for\n    for (i = numNodes; i >= 1; i--) {\n        if (x[i] <= 0) {\n            numNodes2 = numNodes2-1;\n        }\n    }\n\n    printf("numNodes2 = %i", numNodes2);\n\n    free(args);\n    free(x);\n    return 0;\n}\n\n', 'DRB012-minusminus-var-yes.c', 1, '#include <stdio.h>\n#include <stdlib.h>\n#
 DRB067_restrictpointer1_orig_no\n\nsubroutine foo(Sxx, Syy, len)\n    use omp_lib\n    use DRB067\n    implicit none\n\n    integer :: len\n    integer, parameter :: dp = kind(1.0d0)\n    real(dp),dimension(:), pointer :: Sxx, Syy\n\n    integer :: i\n\n   !$omp parallel do\n    do i = 1, len\n        Sxx(i) = Sxx(i) + Syy(i)\n    end do\n   !$omp end parallel do\nend subroutine foo\n\nmodule DRB067\n    implicit none\n    integer, parameter :: dp = kind(1.0d0)\n\n    contains\n\n    subroutine foo(Sxx, Syy, len)\n        implicit none\n\n        integer :: len\n        real(dp),dimension(:), pointer :: Sxx, Syy\n\n        integer :: i\n\n       !$omp parallel do\n        do i = 1, len\n            Sxx(i) = Sxx(i) + Syy(i)\n        end do\n       !$omp end parallel do\n    end subroutine foo\nend module DRB067\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n"\n\n#include <omp.h>\n#include <stdio.h>\n\nint var[16];\n\nint main() {\n  int i, j;\n\n  for (i = 0; i < 16; i++) {\n    var[i] = 0;\n  }\n\n  #pragma omp target map(tofrom: var) device(0)\n  #pragma omp teams distribute parallel for reduction(+: var)\n  for (i = 0; i < 20; i++) {\n    #pragma omp simd\n    for (j = 0; j < 16; j++) {\n      var[j] = var[j] + 1;\n    }\n  }\n\n  for (i = 0; i < 16; i++) {\n    if (var[i]!= 20) {\n      printf("%d %d\n", var[i], i);\n    }\n  }\n}\n/src/test/suite/output/DRB054-simdmissinglock2-orig-yes.cpp\n// PASS\n//--grid=none -Xptxas -dlcm=ca\n//--grid=none -Xptxas -dlcm=ca\n\n//==-- DRB054-simdmissinglock2-orig-yes.c\n\n\n#define N 20\n\nint var[N];\n\nint main() {\n  int i, j;\n\n  for (i = 0; i < N; i++) {\n    var[i] = 0;\n  }\n\n  #pragma omp target map(tofrom: var) device(0)\n  #pragma omp teams distribute parallel for simd\n  for (i = 0; i < N; i++) {\n    var[i] = var[i] + 1;\n  }\n\n  for (i = 0; i < N; i++) {\n    if (var[i]!= 1) {\n      printf("%d %d\n", var[i], i);\n    }\n  }\n}\n/src/test/suite/output/DRB054-simdmissinglock2-orig-yes.cu\n// PASS\n//--grid=none -Xptxas -dlcm=ca\n//--grid=none -Xptxas -dlcm=ca\n
 DRB159_nobarrier_orig_gpu_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB050_functionparameter_orig_no\n\nsubroutine foo1(o1, c, n)\n    use omp_lib\n    use DRB050\n    implicit none\n    integer :: n\n    real(kind=8), dimension(n) :: o1\n    real(kind=8), dimension(n) :: c\n    integer :: i\n    integer :: j\n    integer :: k\n    integer :: l\n    integer :: m\n    integer :: p\n    integer :: q\n    integer :: r\n    integer :: s\n    integer :: t\n    integer :: u\n    integer :: v\n    integer :: w\n    integer :: x\n    integer :: y\n    integer :: z\n    integer :: aa\n    integer :: ab\n    integer :: ac\n    integer :: ad\n    integer :: ae\n    integer :: af\n    integer :: ag\n    integer :: ah\n    integer :: ai\n    integer :: aj\n    integer :: ak\n    integer :: al\n    integer :: am\n    integer :: an\n    integer :: ao\n    integer :: ap\n    integer :: aq\n    integer :: ar\n    integer :: as\n    integer :: at\n    integer :: au\n    integer :: av\n    integer :: aw\n    integer :: ax\n    integer :: ay\n    integer :: az\n    integer :: ba\n    integer :: bb\n    integer :: bc\n    integer :: bd\n    integer :: be\n    integer :: bf\n    integer :: bg\n    integer :: bh\n    integer :: bi\n    integer :: bj\n    integer :: bk\n    integer :: bl\n    integer :: bm\n    integer :: bn\n    integer :: bo\n    integer :: bp\n    integer :: bq\n    integer :: br\n    integer :: bs\n    integer :: bt\n    integer :: bu\n    integer :: bv\n    integer :: bw\n    integer :: bx\n    integer :: by\n    integer :: bz\n    integer :: ca\n    integer :: cb\n   
 DRB030_truedep1_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB124_master_orig_yes\n"\n!10 =!{!11,!11, i64 0}\n!11 =!{!"int",!12, i64 0}\n!12 =!{!"omnipotent char",!13, i64 0}\n!13 =!{!"Simple C/C++ TBAA"}\n!14 =!{i32 1,!"NumRegisterParameters", i32 0}\n!15 =!{!"clang version 10.0.0 (https://github.com/llvm/llvm-project.git 1682895e581f72709d8948175e336c0a442945c8)"}\n!16 = distinct!DISubprogram(name: "DRB124_master_orig_yes", scope:!17, file:!17, line: 6, type:!18, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit:!2, retainedNodes:!4)\n!17 =!DIFile(filename: "./DRB124-master-orig-yes.c", directory: "/home/shail/Results-extra/MiBench/basicmath-CCF")\n!18 =!DISubroutineType(types:!19)\n!19 =!{null}\n!20 =!DILocation(line: 10, column: 1, scope:!16)\n!21 =!DILocation(line: 10, column: 1, scope:!16)\n!22 =!DILocation(line: 10, column: 1, scope:!16)\n!23 =!DILocation(line: 10, column: 1, scope:!16)\n!24 =!DILocation(line: 10, column: 1, scope:!16)\n!25 =!DILocation(line: 10, column: 1, scope:!16)
\n"\n\n# +\n# %%writefile drb152_missinglock2_orig_gpu_no.cpp\n#include <omp.h>\n\nint main() {\n    omp_lock_t lck;\n    int var, i;\n    var = 0;\n\n    #pragma omp target map(tofrom:var) device(0)\n    #pragma omp teams num_teams(1)\n    #pragma omp distribute parallel for\n    for (i = 1; i <= 100; i++) {\n        omp_set_lock(&lck);\n        var = var+1;\n        omp_unset_lock(&lck);\n    }\n    #pragma omp end distribute parallel for\n    #pragma omp end teams\n    #pragma omp end target\n}\n\n# +\n# %%writefile drb152_missinglock2_orig_gpu_yes.cpp\n#include <omp.h>\n\nint main() {\n    omp_lock_t lck;\n    int var, i;\n    var = 0;\n\n    omp_init_lock(&lck);\n    #pragma omp target map(tofrom:var) device(0)\n    #pragma omp teams num_teams(1)\n    #pragma omp distribute parallel for\n    for (i = 1; i <= 100; i++) {\n        omp_set_lock(&lck);\n        var = var+1;\n        omp_unset_lock(&lck);\n    }\n    #pragma omp end distribute parallel for\n    #pragma omp end teams\n    #pragma omp end target\n    omp_destroy_lock(&lck);\n}\n\n# +\n# %%writefile drb152_missinglock2_orig_cpu_no.cpp\n#include <omp.h>\n\nint main() {\n    omp_lock_t lck;\n    int var, i;\n    var = 0;\n\n    #pragma omp parallel for\n    for (i = 1; i <= 100; i++) {\n        omp_set_lock(&lck);\n        var = var+1;\n        omp_unset_lock(&lck);\n    }\n}\n\n# +\n# %%writefile drb152_missinglock2_orig_cpu_yes.cpp\n#include <omp.h>\n\nint main() {\n    omp_lock_
 DRB006_indirectaccess2_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB038_truedepseconddimension_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB137_simdsafelen_orig_no\n"\n!103 =!{!"function.h"}\n!104 =!{!105,!106,!107,!108,!109,!110,!111,!112,!113,!114,!115,!116,!117,!118,!119,!120,!121,!122,!123,!124,!125,!126,!127,!128,!129,!130,!131,!132,!133,!134,!135,!136,!137,!138,!139,!140,!141,!142,!143,!144,!145,!146,!147,!148,!149,!150,!151,!152,!153,!154,!155,!156,!157,!158,!159,!160,!161,!162,!163,!164,!165,!166,!167,!168,!169,!170,!171,!172,!173,!174,!175,!176,!177,!178,!179,!180,!181,!182,!183,!184,!185,!186,!187,!188,!189,!190,!191,!192,!193,!194,!195,!196,!197,!198,!199
\n"\n\n#include <stdio.h>\n#include <omp.h>\n\nint tp, var;\n#pragma omp threadprivate(tp)\n\nvoid foo()\n{\n#pragma omp task\n  {\n#pragma omp task\n    tp = 1;\n#pragma omp task\n  }\n  var = tp;\n#pragma omp task\n  tp = 2;\n#pragma omp task\n}\n\nint main()\n{\n  foo();\n}\n/src/DRB066-threadprivatemissing-orig-yes.c\n/*\n * This is a Rice University parallel code.  The Web site for the course\n * is at http://www.cs.rice.edu/~kuchera/ParallelProgramming\n *\n * Copyright (C) 2002, Rice University.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of version 2 of the GNU General Public License as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.\n */\n\n/*\n * HISTORY\n * 15 October 2002:  created.\n *\n * This code is a variant of the DRB066-threadprivatemissing-orig-yes.c\n * code.  The only difference is that the variable "var" is not declared\n * as threadprivate.  The code should be flagged as an error.\n *\n * This code is intended to be compiled with the PGI compiler.\n */\n\n/*\n * This code is intended to be compiled with the PGI compiler.\n *\n * Compile with:\n *   pgcc -mp -o DRB066-threadprivatemissing-orig-yes.exe DRB066-threadprivatemissing-orig-yes.c
 DRB140_reduction_barrier_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB002_antidep1_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB073_doall2_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB031_truedepfirstdimension_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB116_target_teams_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB145_atomiccritical_orig_gpu_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB139_worksharingcritical_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB135_taskdep_mutexinoutset_orig_no_omp50\n\n",\n    "omp_parallel_sections_orig_no.f90": "Translate this Fortran code to C++: \n    program DRB136_taskdep_mutexinoutset_orig_no_omp50\n    use omp_lib\n    implicit none\n\n    integer :: a, b, c, d\n\n   !$omp parallel\n   !$omp sections\n   !$omp section\n       !$omp task depend(out: c)\n        c = 1     ! Task T1\n       !$omp end task\n   !$omp section\n       !$omp task depend(out: a)\n        a = 2     ! Task T2\n       !$omp end task\n   !$omp section\n       !$omp task depend(out: b)\n        b = 3     ! Task T3\n       !$omp end task\n   !$omp section\n       !$omp task depend(in: a)\n        c = c + a ! Task T4\n       !$omp end task\n   !$omp section\n       !$omp task depend(in: b) \n        c = c + b ! Task T5\n       !$omp end task\n   !$omp section\n       !$omp task depend(in: c)\n        d = c     ! Task T6\n       !$omp end task\n   !$omp end sections\n   !$omp end parallel\n\n    print *, d\nend program DRB136_taskdep_mutexinoutset_orig_no_omp50\n\n",\n    "omp_parallel_workshare_orig_no.f90": "Translate this Fortran code to C++: \n    program DRB137_taskdep_mutexinoutset_orig_no_omp50\n    use omp_lib\n    implicit none\n\n    integer :: a, b, c, d\n\n   !$omp parallel\n   !$omp sections\n   !$omp section\n       !$omp task depend(out: c)\n        c = 1     ! Task T1\n       !$omp end task\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB053_inneronly1_orig_no\n"\n!110,111c110,111\n<     do i = 1, 19\n<    !$omp parallel do\n---\n>    !$omp parallel do\n>     do i = 1, 19\n113c113\n<     end do\n---\n>     end do\n   !$omp end parallel do\n\n116c116\n<     deallocate(a)\n---\n>     deallocate(a)\nend program DRB053_inneronly1_orig_no\n"\n118c118\n< end program DRB053_inneronly1_orig_no\n---\n> \n```\n\n## DRB054-inneronly2-orig-no.f90\n\n```\n! Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n! See https://llvm.org/LICENSE.txt for license information.\n! SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n!\n! Translated from the original Fortran test suite, as follows:\n!   EXECUTABLE_NAME: [[]]\n!   EXECUTABLE_NAME_NO_EXTENSION: [[]]\n!   BUILD_TYPE: [[]]\n!   EXECUTABLE_OUTPUT_INDEX: [[]]\n!   CURRENT_TEST_SOURCE_DIR: /tmp/llvm-test-suite-708679962c/SingleSource/Benchmarks/Polybench/stencils/jacobi-1d\n!   EXECUTABLE_DIR: /tmp/llvm-test-suite-708679962c/SingleSource/Benchmarks/Polybench/stencils/jacobi-1d\n!   TEST_SUITE_SOURCE_ROOT: /tmp/llvm-test-suite-708679962c\n!   TEST_SUITE_BUILD_ROOT: /tmp/llvm-test-suite-708679962c\n!   TEST_TEMP_DIR: /tmp/llvm-test-suite-708679962c/SingleSource/Bench
 DRB070_simd1_orig_no\n\n"\n\n# +\n# %%writefile DRB070_simd1_orig_yes.f90\n\n!This example is taken from PolyBench/GPU 1.0 test suite\n!Original source: https://polybench.github.io/\n!\n!This file is a part of PolyBench/GPU\n!\n!Copyright (c) 2019, The University of Texas at Austin\n!All rights reserved.\n!\n!\n!Permission is hereby granted, free of charge, to any person obtaining a copy\n!of this software and associated documentation files (the "Software"), to deal\n!in the Software without restriction, including without limitation the rights\n!to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n!copies of the Software, and to permit persons to whom the Software is\n!furnished to do so, subject to the following conditions:\n!\n!The above copyright notice and this permission notice shall be included in\n!all copies or substantial portions of the Software.\n!\n!THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n!IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n!FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n!AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n!LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n!OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n!THE SOFTWARE.\n\n!Translate this Fortran code to C++: \nprogram DRB070_simd1_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: len, i\n    integer, dimension(:), allocatable :: a, b, c\n    len = 100\n    allocate (a(len))\n    allocate (b(len))\n    allocate (c(len))\n\n   !$omp simd\n    do i = 1, len\n        a(i) = b(i) + c(i)\n    end do\n   !$omp end simd\n\n    deallocate(a,b,c)\nend
 DRB010_lastprivatemissing_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n", "pass": "True", "name": "programs/openmp/3.1/drb154.c", "failing_pair": null}, "drb155.c": {"code": "#include <omp.h>\n#include <stdio.h>\n\nint main(void) {\n    int var = 0;\n    #pragma omp target map(tofrom:var) device(0)\n    #pragma omp teams distribute reduction(+:var)\n    for (int i = 0; i < 100; i++) {\n        #pragma omp atomic\n        var++;\n    }\n    printf(\"%d\\n\", var);\n    return 0;\n}\n\n", "pass": "True", "name": "programs/openmp/3.1/drb155.c", "failing_pair": null}, "drb155.c_truePositive.c": {"code": "#include <omp.h>\n#include <stdio.h>\n\nint main(void) {\n    int var = 0;\n    #pragma omp target map(tofrom:var) device(0)\n    #pragma omp teams distribute reduction(+:var)\n    for (int i = 0; i < 100; i++) {\n        #pragma omp atomic\n        var++;\n    }\n    printf(\"%d\\n\", var);\n    return 0;\n}\n\n", "pass": "True", "name": "programs/openmp/3.1/drb155.c_truePositive.c", "failing_pair": null}, "drb155.c_truePositive_orig_yes.c": {"code": "#include <omp.h>\n#include <stdio.h>\n\nint main(void) {\n    int var = 0;\n    #pragma omp target map(tofrom:var) device(0)\n    #pragma omp teams distribute reduction(+:var)\n    for (int i = 0; i < 100; i++) {\n        #pragma omp atomic\n        var++;\n    }\n    printf(\"%d\\n\", var);\n   
 DRB046_doall2_orig_no\n"\n!1 file("./DRB046-doall2-orig-no.f90")\n!12 0x94499d0\n!13 0x9449a10\n!15 0x9449a50\n!17 0x9449a90\n!19 0x9449ad0\n!21 0x9449b10\n!23 0x9449b50\n!25 0x9449b90\n!27 0x9449bd0\n!29 0x9449c10\n!31 0x9449c50\n!33 0x9449c90\n!35 0x9449cd0\n!37 0x9449d10\n!39 0x9449d50\n!41 0x9449d90\n!43 0x9449dd0\n!45 0x9449e10\n!47 0x9449e50\n!49 0x9449e90\n!51 0x9449ed0\n!53 0x9449f10\n!55 0x9449f50\n!57 0x9449f90\n!59 0x9449fd0\n!61 0x944a010\n!63 0x944a050\n!65 0x944a090\n!67 0x944a0d0\n!69 0x944a110\n!71 0x944a150\n!73 0x944a190\n!75 0x944a1d0\n!77 0x944a210\n!7
 DRB035_truedepscalar_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB018_plusplus_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB008_indirectaccess4_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB109_orderedmissing_orig_yes\n\n", "omp parallel do ordered\n    do i = 1, 100\n        x = x+1\n    end do\n   !$omp end parallel do\n\n    print*,'x =',x\n\nend program DRB109_orderedmissing_orig_yes\n\n", "omp parallel do ordered\n    do i = 1, 100\n        x = x+1\n    end do\n   !$omp end parallel do\n\n    print*,'x =',x\n\nend program DRB109_orderedmissing_orig_yes\n\n", "omp parallel do ordered\n    do i = 1, 100\n        x = x+1\n    end do\n   !$omp end parallel do\n\n    print*,'x =',x\n\nend program DRB109_orderedmissing_orig_yes\n\n", "omp parallel do ordered\n    do i = 1, 100\n        x = x+1\n    end do\n   !$omp end parallel do\n\n    print*,'x =',x\n\nend program DRB109_orderedmissing_orig_yes\n\n", "omp parallel do ordered\n    do i = 1, 100\n        x = x+1\n    end do\n   !$omp end parallel do\n\n    print*,'x =',x\n\nend program DRB109_orderedmissing_orig_yes\n\n", "omp parallel do ordered\n    do i = 1, 100\n        x = x+1\n    end do\n   !$omp end parallel do\n\n    print*,'x =',x\n\nend program DRB109_orderedmissing_orig_yes\n\n", "omp parallel do ordered\n    do i = 1, 100\n        x = x+1\n    end do\n   !$omp end parallel do\n\n    print*,'x =',x
 DRB112_linear_orig_no\n"\n!100 = metadata!{metadata!101, metadata!102, metadata!103, metadata!104, metadata!105, metadata!106, metadata!107, metadata!108, metadata!109, metadata!110, metadata!111, metadata!112, metadata!113, metadata!114, metadata!115, metadata!116, metadata!117, metadata!118, metadata!119, metadata!120, metadata!121, metadata!122, metadata!123, metadata!124, metadata!125, metadata!126, metadata!127, metadata!128, metadata!129, metadata!130, metadata!131, metadata!132, metadata!133, metadata!134, metadata!135, metadata!136, metadata!137, metadata!138, metadata!139, metadata!140, metadata!141, metadata!142, metadata!143, metadata!144, metadata!145, metadata!146, metadata!147, metadata!148, metadata!149, metadata!150, metadata!151, metadata!152, metadata!153, metadata!154, metadata!155, metadata!156, metadata!157, metadata!158, metadata!159, metadata!160, metadata!161, metadata!162, metadata!163, metadata!164, metadata!165, metadata!166, metadata!167, metadata!168, metadata!169, metadata!170, metadata!171, metadata!172, metadata!173, metadata!174, metadata!175, metadata!176, metadata!177, metadata!178, metadata!179, metadata!180, metadata!181, metadata!1
 DRB120_barrier_orig_no\n"\n!114 =!{!"0x101\00var\001\000",!115,!116,!117} ; [ DW_TAG_arg_variable ] [var] [line 1]\n!115 =!{!"0xb\001\000\000",!1,!118}          ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/dry.c]\n!116 =!{!"0x13\00\001\000\000\000\000",!1, null, null, null, null, null, null} ; [ DW_TAG_subroutine_type ] [line 1, size 0, align 0, offset 0] [from ]\n!117 =!{!"0x16\00integer\004\000\000\000\000",!1, null,!13} ; [ DW_TAG_typedef ] [integer] [line 4, size 0, align 0, offset 0] [from int]\n!118 =!{!"0xb\001\000\000",!1,!119}          ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/dry.c]\n!119 =!{!"0xb\001\000\000",!1,!120}          ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/dry.c]\n!120 =!{!"0xb\001\000\000",!1,!121}          ; [ DW_TAG_lexical_block ] [/home/vanderson/dev
 DRB003_antidep2_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB078_taskdep2_orig_no\n";\n\nstatic const char * const DRB079_taskdep2_orig_yes_cpp = \n"// This program is derived from a real world example.\n// Translate this Fortran code to C++: \nprogram DRB079_taskdep2_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: i\n    i = 0\n\n   !$omp parallel\n       !$omp single\n           !$omp task depend (out:i)\n                call sleep(3)\n                i=3\n           !$omp end task\n           !$omp task depend (out:i)\n                i=2\n           !$omp end task\n       !$omp end single\n   !$omp end parallel\n\n    if (i /=2 ) then\n        print 100, i\n        100 format (i3)\n    end if\nend program DRB079_taskdep2_orig_yes\n";\n\nstatic const char * const DRB080_taskdep2_sol_no_cpp = \n"// This program is derived from a real world example.\n// Translate this Fortran code to C++: \nprogram DRB080_taskdep2_sol_no\n    use omp_lib\n    implicit none\n\n    integer :: i\n    i = 0\n\n   !$omp parallel\n       !$omp single\n           !$omp task depend (out:i)\n                call sleep(3)\n                i=3\n           !$omp end task\n           !$omp task depend (out:i)\n                i=2\n           !$omp end task\n       !$omp end single\n   !$omp end parallel\n\n    if (i /=2 ) then\n        print 100, i\n        100 format (i3)\n    end if\nend program DRB080_taskdep2_sol_no\n";\n\nstatic const char * const DRB081_taskdep2_sol_yes_cpp = \n"// This program is derived from a real
 DRB150_missinglock1_orig_gpu_yes\n"\n!11 =!{!12,!13,!14,!15,!16,!17,!18,!19,!20,!21,!22,!23,!24,!25,!26,!27,!28,!29,!30,!31,!32,!33,!34,!35,!36,!37,!38,!39,!40,!41,!42,!43,!44,!45,!46,!47,!48,!49,!50,!51,!52,!53,!54,!55,!56,!57,!58,!59,!60,!61,!62,!63,!64,!65,!66,!67,!68,!69,!70,!71,!72,!73,!74,!75,!76,!77,!78,!79,!80,!81,!82,!83,!84,!85,!86,!87,!88,!89,!90,!91,!92,!93,!94,!95,!96,!97,!98,!99,!100,!101,!102,!103,!104,!105,!106,!107,!108,!109,!110,!111,!112,!113,!114,!115,!116,!117,!118,!119,!120,!121,!122,!123,!124,!125,!126,
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB032_truedepfirstdimension_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB025_simdtruedep_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB071_targetparallelfor_orig_no\n"\n!100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,
 DRB114_if_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB016_outputdep_orig_yes\n\nsubroutine useGlobalArray(len)\n    use globalArray\n\n    implicit none\n\n    integer len, i\n\n   !$omp parallel do\n    do i = 1, len\n        a(i) = 0\n    end do\n   !$omp end parallel do\nend subroutine useGlobalArray\n\nmodule globalArray\n    implicit none\n\n    integer, dimension(:), allocatable :: a\n\n    contains\n        subroutine allocateGlobalArray(len)\n            implicit none\n\n            integer len\n\n            allocate(a(len))\n        end subroutine allocateGlobalArray\n\n        subroutine deallocateGlobalArray()\n            implicit none\n\n            deallocate(a)\n        end subroutine deallocateGlobalArray\nend module globalArray\n\n', 'DRB016-outputdep-orig-yes.f90'),\n('Fortran', 'DRB017', 'Translate this Fortran code to C++: \nprogram DRB017_outputdep_orig_no\n    use omp_lib\n    use globalArray\n\n    implicit none\n\n    integer len, i, x\n\n    len = 100\n    x = 10\n\n    call useGlobalArray(len)\n\n   !$omp parallel do\n    do i = 1, len\n        a(i) = x\n        x = i\n    end do\n   !$omp end parallel do\n\n    write(*,*) "x =",x\nend program DRB017_outputdep_orig_no\n\nsubroutine useGlobalArray(len)\n    use globalArray\n\n    implicit none\n\n    integer len, i\n\n   !$omp parallel do\n    do i = 1, len\n        a(i) = 0\n    end do\n   !$omp end parallel do\nend subroutine useGlobalArray\n\nmodule globalArray\n    implicit none\n\n    integer, dimension(:), allocatable :: a\n
 DRB100_task_reference_orig_no\n\nsubroutine gen_task(i)\n    use omp_lib\n    use DRB100\n    implicit none\n    integer :: i\n\n   !$omp task\n        a(i) = i + 1\n   !$omp end task\nend subroutine gen_task\n\nmodule DRB100\n    implicit none\n    integer, dimension(:), allocatable :: a\nend module DRB100\n\n', 'DRB100_task_reference_orig_no.cpp', 1, 'taskloop', 'taskloop', 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
 DRB131_taskdep4_orig_yes_omp_45\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB160_nobarrier_orig_gpu_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB135_taskdep_mutexinoutset_orig_no_omp50\n\n";\n\nstatic const char * const DRB136_taskdep_mutexinoutset_orig_no_omp50_out = "10\n";\n\nstatic const char * const DRB136_taskdep_mutexinoutset_orig_no_omp50_compile = "FTN-18500: (R) Recursion (-R) is not supported.\n";\n\nstatic const char * const DRB136_taskdep_mutexinoutset_orig_no_omp50_omp_off = "FTN-18500: (R) Recursion (-R) is not supported.\n";\n\nstatic const char * const DRB136_taskdep_mutexinoutset_orig_no_omp50_omp_on = "FTN-18500: (R) Recursion (-R) is not supported.\n";\n\n/* DRB137 */\nstatic const char * const DRB137_taskdep_mutexinoutset_orig_no_omp50_code = "Translate this Fortran code to C++: \nprogram DRB137_taskdep_mutexinoutset_orig_no_omp50\n    use omp_lib\n    implicit none\n\n    integer :: a, b, c, d\n\n   !$omp parallel\n   !$omp single\n       !$omp task depend(out: c)\n        c = 1     ! Task T1\n       !$omp end task\n       !$omp task depend(out: a)\n        a = 2     ! Task T2\n       !$omp end task\n       !$omp task depend(out: b)\n        b = 3     ! Task T3\n       !$omp end task\n       !$omp task depend(in: a) depend(mutexinoutset: c)\n        c = c + a ! Task T4\n       !$omp end task\n       !$omp task depend(in: b) depend(mutexinoutset: c)\n        c = c + b ! Task T5\n       !$omp end task\n       
 DRB168_taskdep5_orig_yes_omp_50\n\n"\n\n# +\n# %%writefile DRB168_taskdep5_orig_yes_omp_50.cpp\n#include <omp.h>\n#include <stdio.h>\n\nint main()\n{\n    #pragma omp parallel\n    {\n        #pragma omp single\n        {\n            foo();\n        }\n    }\n    return 0;\n}\n\nvoid foo()\n{\n    int x, y;\n    x = 0;\n    y = 2;\n\n    #pragma omp task depend(inout: x) shared(x)\n    {\n        x = x+1;                                 //1st Child Task\n    }\n\n    #pragma omp task shared(y)\n    {\n        y = y-x;                                 //2nd child task\n    }\n\n    #pragma omp taskwait depend(in: x)            //1st taskwait\n\n    printf("x=%d\n", x);\n    printf("y=%d\n", y);\n\n    #pragma omp taskwait                          //2nd taskwait\n}\n# -\n\n#!g++ -O3 -fopenmp DRB168_taskdep5_orig_yes_omp_50.cpp -o DRB168_taskdep5_orig_yes_omp_50\n\n#!./DRB168_taskdep5_orig_yes_omp_50\n\n# #### 2.2.2.2.2.2.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1
 DRB108_atomic_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB039_truedepsingleelement_orig_yes\n";\n\nconst char *DRB040_truedepsingleelement_orig_yes_cpp =\n"//This example is a variant of DRB039, but with the loop carried dependency\n//in the inner loop.\n//\n//This example is derived from the NPB CG benchmark.\n//\n//The output should be 1024.\n//\n//Translate this Fortran code to C++: \nprogram DRB040_truedepsingleelement_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: len, i, j\n    integer, dimension(:), allocatable :: a\n\n    len = 1000\n    allocate (a(len))\n\n    a(1) = 2\n\n   !$omp parallel do\n    do i = 1, len\n        do j = 1, 100\n            a(i) = a(i)+a(1)\n        end do\n    end do\n   !$omp end parallel do\n\n    print 100, a(500)\n    100 format ('a(500) =',i3)\n\n    deallocate(a)\nend program DRB040_truedepsingleelement_orig_yes\n";\n\nconst char *DRB041_truedepsingleelementptr_orig_yes_cpp =\n"//This example is a variant of DRB039, but with the loop carried dependency\n//in the inner loop.\n//\n//This example is derived from the NPB CG benchmark.\n//\n//The output should be 1024.\n//\n//Translate this Fortran code to C++: \nprogram DRB041_truedepsingleelementptr_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: len, i, j\n    integer, dimension(:), allocatable :: a\n\n    len = 1000\n    allocate (a(len))\n\n    a(1) = 2
 DRB115_forsimd_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\nsubroutine f1(i)\n    use omp_lib\n    implicit none\n    integer :: i\n    integer :: j\n   !$omp do\n    do j = 1, 10\n        i = i + 1\n        call flush(6)\n    end do\n   !$omp end do\nend subroutine\n\nsubroutine flush(i)\n    implicit none\n    integer :: i\n    flush(i)\nend subroutine\n\nsubroutine omp_set_num_threads(i)\n    implicit none\n    integer :: i\nend subroutine\n\nsubroutine omp_get_num_threads()\n    implicit none\nend subroutine\n\nsubroutine omp_get_thread_num()\n    implicit none\nend subroutine\n\nsubroutine omp_get_num_procs()\n    implicit none\nend subroutine\n\nsubroutine omp_set_dynamic(i)\n    implicit none\n    integer :: i\nend subroutine\n\nsubroutine omp_get_dynamic()\n    implicit none\nend subroutine\n\nsubroutine omp_get_cancellation()\n    implicit none\nend subroutine\n\nsubroutine omp_set_nested(i)\n    implicit none\n    integer :: i\nend subroutine\n\nsubroutine omp_get_nested()\n    implicit none\nend subroutine\n\nsubroutine omp_set_schedule(i, j)\n    implicit none\n    integer :: i, j\nend subroutine\n\nsubroutine omp_get_schedule()\n    implicit none\nend subroutine\n\nsubroutine omp_get_thread_limit()\n    implicit none\nend subroutine\n\nsubroutine omp_set_max_active_levels(i)\n    implicit none\n    integer :: i\nend subroutine\n\nsubroutine omp_get_max_active_levels()\n    implicit none\nend subroutine\n\nsubroutine omp_get_level()\n    implicit none\nend subroutine\n\nsubroutine omp_get_ancestor_thread_num(i)\n    implicit none\n    integer :: i\nend subroutine\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB049_fprintf_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB045_doall1_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB051_getthreadnum_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\nsubroutine foo(i)\n    use omp_lib\n    use DRB085\n    implicit none\n    integer, intent(in) :: i\n\n   !$omp threadprivate(sum0)\n    sum0 = sum0+i\nend subroutine\n\nmodule DRB085\n    implicit none\n    integer (kind=8) :: sum0, sum1\n    save\n    data sum0/0/, sum1/0/\nend module\n\n"\n!107 =!{!"function_entry_count", i64 1}\n!110 =!{!"branch_weights", i32 1, i32 1000}\n!111 =!{!"branch_weights", i32 1000, i32 1}\n!112 =!{!"branch_weights", i32 1, i32 1000}\n!113 =!{!"branch_weights", i32 1000, i32 1}\n!114 =!{!"branch_weights", i32 1, i32 1000}\n!115 =!{!"branch_weights", i32 1000, i32 1}\n!116 =!{!"branch_weights", i32 1, i32 1000}\n!117 =!{!"branch_weights", i32 1000, i32 1}\n!118 =!{!"branch_weights", i32 1, i32 1000}\n!119 =!{!"branch_weights", i32 1000, i32 1}\n!120 =!{!"branch_weights", i32 1, i32 1000}\n!121 =!{!"branch_weights", i32 1000, i32 1}\n!122 =!{!"branch_weights", i32 1, i32 1000}\n!12
 DRB007_indirectaccess3_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB060_matrixmultiply_orig_no\n\n"\n\n# +\n# %%writefile DRB060_matrixmultiply_orig_yes.f90\nprogram DRB060_matrixmultiply_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: N,M,K, len, i, j, l\n    real, dimension(:,:), allocatable :: a, b, c\n\n    len = 100\n    N=len\n    M=len\n    K=len\n\n    allocate (a(N,M))\n    allocate (b(M,K))\n    allocate (c(K,N))\n\n   !$omp parallel do private(j, l)\n    do i = 1, N\n        do l = 1, K\n            do j = 1, M\n                c(i,j) = c(i,j)+a(i,l)*b(l,j)\n            end do\n        end do\n    end do\n   !$omp end parallel do\n\n    deallocate(a,b,c)\nend program DRB060_matrixmultiply_orig_yes\n\n#!f95 -O3 -fopenmp -o DRB060_matrixmultiply_orig_yes.exe DRB060_matrixmultiply_orig_yes.f90\n#!./DRB060_matrixmultiply_orig_yes.exe\n\n# +\n# %%writefile DRB060_matrixmultiply_orig_no.f90\nprogram DRB060_matrixmultiply_orig_no\n    use omp_lib\n    implicit none\n\n    integer :: N,M,K, len, i, j, l\n    real, dimension(:,:), allocatable :: a, b, c\n\n    len = 100\n    N=len\n    M=len\n    K=len\n\n    allocate (a(N,M))\n    allocate (b(M,K))\n    allocate (c(K,N))\n\n   !$omp parallel do private(j, l)\n    do i = 1, N\n        do l = 1, K\n            do j = 1, M\n                c(i,j) = c(i,j)+a(i,l)*b(l,j)\n            end do\n        end do\n    end do\n   !$omp end parallel do\n\n    deallocate(a,b
 DRB023_sections1_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n";\n\nconst char *DRB103_copyprivate_orig_yes = \n"Translate this Fortran code to C++: \nprogram DRB103_copyprivate_orig_yes\n    use omp_lib\n    use DRB103\n    implicit none\n\n   !$omp parallel\n       !$omp single\n        x=1.0\n        y=1\n       !$omp end single copyprivate(x,y)\n   !$omp end parallel\n\n    print 100, x, y\n    100 format ('x =',F3.1,2x,'y =',i3)\n\nend program\n\n";\n\nconst char *DRB104_copyprivate_orig_no = \n"Translate this Fortran code to C++: \nprogram DRB104_copyprivate_orig_no\n    use omp_lib\n    use DRB104\n    implicit none\n\n   !$omp parallel\n       !$omp single\n        x=1.0\n        y=1\n       !$omp end single copyprivate(x,y)\n   !$omp end parallel\n\n    print 100, x, y\n    100 format ('x =',F3.1,2x,'y =',i3)\n\nend program\n\n";\n\nconst char *DRB105_copyprivate_orig_yes = \n"Translate this Fortran code to C++: \nprogram DRB105_copyprivate_orig_yes\n    use omp_lib\n    use DRB105\n    implicit none\n\n   !$omp parallel\n       !$omp single\n        x=1.0\n        y=1\n       !$omp end single copyprivate(x,y)\n   !$omp end parallel\n\n    print 100, x, y\n    100 format ('x =',F3.1,2x,'y =',i3)\n\nend program\n\n";\n\nconst char *DRB106_copyprivate_orig_no =
 DRB155_missingordered_orig_gpu_no\n\n"\n\n#define DRB155_missingordered_orig_gpu_no_DEF "DRB155_missingordered_orig_gpu_no.f90"\n\n/* Result check */\n#define DRB155_missingordered_orig_gpu_no_RES_WITH_OMP "Data Race Present"\n#define DRB155_missingordered_orig_gpu_no_RES_NO_OMP "Data Race Present"\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add OpenMP 4.0 target offload */\n\n/* TODO: Add Open
 DRB111_linearmissing_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB061_matrixvector1_orig_no\n"\n!100 =!{!"0x102\00i\0013\000",!1,!7,!11}\n!101 =!{!"0x102\00j\0014\000",!1,!7,!11}\n!102 =!{!"0x102\00sum\0015\000",!1,!7,!12}\n!103 =!{!"0x102\00N\0018\000",!1,!7,!11}\n!104 =!{!"0x100\00a\0020\000",!1,!7,!13}\n!105 =!{!"0x100\00v\0021\000",!1,!7,!14}\n!106 =!{!"0x100\00v_out\0022\000",!1,!7,!14}\n!107 =!{!"0x100\00__par_loop0_2d_00000001\0024\000",!1,!7,!15}\n!108 =!{!"0x100\00__par_loop1_2d_00000001\0025\000",!1,!7,!15}\n!109 =!{!"0x100\00__par_loop0_2d_00000001\0026\000",!1,!7,!15}\n!110 =!{!"0x100\00__par_loop1_2d_00000001\0027\000",!1,!7,!15}\n!111 =!{!"0x1
 DRB153_missinglock2_orig_gpu_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB033_truedeplinear_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB162_nolocksimd_orig_gpu_no\n"\n\n# +\n# %%writefile DRB162_nolocksimd_orig_gpu_no.cpp\n\n#include <iostream>\n#include <omp.h>\n\nint main()\n{\n    int var[8];\n    int i,j;\n\n    for (i=0; i<8; i++)\n        var[i] = 0;\n\n    #pragma omp target map(tofrom:var) device(0)\n    #pragma omp teams num_teams(1) thread_limit(1048)\n    #pragma omp distribute parallel for reduction(+:var)\n    for (i=0; i<20; i++)\n    {\n        #pragma omp simd\n        for (j=0; j<8; j++)\n            var[j] = var[j]+1;\n    }\n\n    for (i=0; i<8; i++)\n        if (var[i]!= 20)\n            std::cout << var[i] << std::endl;\n\n    return 0;\n}\n\n# +\n# %%writefile DRB162_nolocksimd_orig_gpu_yes.cpp\n\n#include <iostream>\n#include <omp.h>\n\nint main()\n{\n    int var[8];\n    int i,j;\n\n    for (i=0; i<8; i++)\n        var[i] = 0;\n\n    #pragma omp target map(tofrom:var) device(0)\n    #pragma omp teams num_teams(1) thread_limit(1048)\n    #pragma omp distribute parallel for reduction(+:var)\n    for (i=0; i<20; i++)\n    {\n        #pragma omp simd\n        for (j=0; j<8; j++)\n            var[j] = var[j]+1;\n    }\n\n    for (i=0; i<8; i++)\n        if (var[i]!= 20)\n            std::cout << var[i] << std::endl;\n\n    return 0;\n}\n\n# +\n# %%writefile DRB163_nolocksimd_orig_cpu_no.cpp\n\n#include <iostream>\n#include <omp.h>\n\nint
 DRB103_master_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB088_dynamic_storage_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB080_func_arg_orig_yes\n\nsubroutine f1(i)\n    use global\n    implicit none\n    integer :: i\n    i = 1\nend subroutine f1\n"\n\n# +\n# DRB081-orig-yes.f\n# DRB081-parallelfor-orig-yes.f\n# DRB081-taskloop-orig-yes.f\n# DRB081-task-orig-yes.f\n\n# DRB082-orig-yes.f\n# DRB082-parallelfor-orig-yes.f\n# DRB082-taskloop-orig-yes.f\n# DRB082-task-orig-yes.f\n\n# DRB083-orig-yes.f\n# DRB083-parallelfor-orig-yes.f\n# DRB083-taskloop-orig-yes.f\n# DRB083-task-orig-yes.f\n\n# DRB084-orig-yes.f\n# DRB084-parallelfor-orig-yes.f\n# DRB084-taskloop-orig-yes.f\n# DRB084-task-orig-yes.f\n\n# DRB085-orig-yes.f\n# DRB085-parallelfor-orig-yes.f\n# DRB085-taskloop-orig-yes.f\n# DRB085-task-orig-yes.f\n\n# DRB086-orig-yes.f\n# DRB086-parallelfor-orig-yes.f\n# DRB086-taskloop-orig-yes.f\n# DRB086-task-orig-yes.f\n\n# DRB087-orig-yes.f\n# DRB087-parallelfor-orig-yes.f\n# DRB087-taskloop-orig-yes.f\n# DRB087-task-orig-yes.f\n\n# DRB088-orig-yes.
\n"\n\n# +\n# %%writefile DRB072_taskdep1_orig_yes.f90\n\n!This example is taken from PolyBench/GPU 1.0 test suite\n!Original source code from PolyBench 1.0 test suite\n!Kernel: taskdep\n\n!This example is taken from PolyBench/GPU 1.0 test suite\n!Original source code from PolyBench 1.0 test suite\n!Kernel: taskdep\n\n!Translate this Fortran code to C++: \nprogram DRB072_taskdep1_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: i\n    i = 0\n\n   !$omp parallel\n       !$omp single\n           !$omp task depend (out:i)\n            i = 1\n           !$omp end task\n           !$omp task depend (in:i)\n            i = 2\n           !$omp end task\n       !$omp end single\n   !$omp end parallel\n\n    if (i/=2) then\n        print*,'i is not equal to 2'\n    end if\nend program\n"\n\n# +\n# %%writefile DRB072_taskdep1_orig_no.cpp\n\n//This example is taken from PolyBench/GPU 1.0 test suite\n//Original source code from PolyBench 1.0 test suite\n//Kernel: taskdep\n\n//This example is taken from PolyBench/GPU 1.0 test suite\n//Original source code from PolyBench 1.0 test suite\n//Kernel: taskdep\n\n//Translate this Fortran code to C++: \n#include <omp.h>\n#include <stdio.h>\n\nint main(int argc, char** argv)\n{\n    int i;\n    i = 0;\n\n    #pragma omp parallel\n    {\n        #pragma omp single\n        {\n            #pragma omp task depend (out:i)\n            {\n                i = 1;\n            }\n            #pragma omp task depend (in:i)\n            {\n                i = 2;\n            }\n        }\n    }\n\n    if (i!=2)\n    {\n        printf("i is not equal to 2\n");\n    }
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB011_minusminus_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB040_truedepsingleelement_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB048_firstprivate_orig_no\n\nsubroutine foo(a, n, b)\n    use omp_lib\n    use DRB048\n    implicit none\n    integer :: n, b\n    real :: a(n)\n    integer :: i\n    real :: x\n\n    x = 3.14\n   !$omp parallel do firstprivate(x)\n    do i = 1, n\n        a(i) = x\n        x = x + b\n    end do\n   !$omp end parallel do\nend subroutine foo\n\nsubroutine DRB048_firstprivate_orig_no_print()\n    use omp_lib\n    use DRB048\n    implicit none\n    integer :: i\n\n    print*, \"a[0-9] = \"\n    do i = 1, 10\n        print*, a(i)\n    end do\nend subroutine DRB048_firstprivate_orig_no_print\n\nsubroutine DRB048_firstprivate_orig_no_check()\n    use omp_lib\n    use DRB048\n    implicit none\n    integer :: i\n    real :: tmp\n\n    tmp = 3.14\n    do i = 1, 100\n        if (a(i).ne. tmp) then\n            print*, \"Error: a[\", i, \"] = \", a(i), \"!= \", tmp\n        end if\n        tmp = tmp + 7\n    end do\nend subroutine DRB048_firstprivate_orig_no_check\n\nsubroutine DRB048_firstprivate_orig_no_base_orig_init()\n    use omp_lib\n    use DRB048\n    implicit none\n    integer :: i\n\n    do i = 1, 100\n        a(i) = 0\n    end do\nend subroutine DRB048_firstprivate_orig_no_base_orig_init\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB037_truedepseconddimension_orig_yes\n\n", "pass_criteria": "Output is the same as the original code", "status": "PASS", "stdout": "b(500,500) =   0.0000000000000000\n", "stderr": "", "cmp_stdout": "b(500,500) =   0.0000000000000000\n", "success": true, "version": "1.0.0", "results": {"n_total": 1, "n_not_run": 0, "n_success": 1, "n_failures": 0, "n_crashes": 0, "n_timeout": 0}, "time": "2021-03-15 14:59:54", "url": "https://github.com/spcl/dace", "timestamp": 1615818000}/results/dace-benchmarks/results/spmv-cuda/spmv-cuda-1-1-1.json\n{"benchmark": "spmv-cuda", "version": 1, "params": {"parallelization": "1", "platform": "1", "precision": "1"}, "compiled": "no", "failed": false, "raw_code": "program spmv_cuda\n    use omp_lib\n    implicit none\n\n    integer :: n, nnz, i, j, k, l, m, nthreads, chunk, ierr\n    integer, dimension(:), allocatable :: row_ptr, col_idx\n    real, dimension(:), allocatable :: val, x, y\n    real :: start, finish\n    real, external :: omp_get_wtime\n\n    n = 10000000\n    nnz = 100000000\n    nthreads = 1\n    chunk = 1\n\n    allocate(row_ptr(n+1), col_idx(nnz), val(nnz), x(n), y(n
 DRB083_declared_in_func_orig_no\n\nsubroutine foo()\n    use omp_lib\n    use DRB083\n    implicit none\n\n    integer :: i\n    integer :: j\n    integer :: k\n    integer :: l\n    integer :: m\n    integer :: n\n    integer :: o\n    integer :: p\n    integer :: q\n    integer :: r\n    integer :: s\n    integer :: t\n    integer :: u\n    integer :: v\n    integer :: w\n    integer :: x\n    integer :: y\n    integer :: z\n\n   !$omp do\n    do i = 1, 100\n        j = i\n        k = i\n        l = i\n        m = i\n        n = i\n        o = i\n        p = i\n        q = i\n        r = i\n        s = i\n        t = i\n        u = i\n        v = i\n        w = i\n        x = i\n        y = i\n        z = i\n    end do\n   !$omp end do\nend subroutine foo\n\nmodule DRB083\n    implicit none\n\n    integer :: i\n    integer :: j\n    integer :: k\n    integer :: l\n    integer :: m\n    integer :: n\n    integer :: o\n    integer :: p\n    integer :: q\n    integer :: r\n    integer :: s\n    integer :: t\n    integer :: u\n    integer :: v\n    integer :: w\n    integer :: x\n    integer :: y\n    integer :: z\nend module DRB083\n"\n\n# +\n# DRB084-orig-yes.f90\n\n# +\n# DRB084-parallelfor-orig-yes.f90\n\n# +\n# DRB085-orig-yes.f90\n\n# +\n# DRB086-orig-yes.f90\n
 DRB054_inneronly2_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB066_pointernoaliasing_orig_no\n\nsubroutine setup(N)\n    use omp_lib\n    use DRB066\n    implicit none\n    integer :: N\n    integer :: i\n    integer, dimension(:), allocatable :: a\n    integer, dimension(:), allocatable :: b\n    integer, dimension(:), allocatable :: c\n    integer, dimension(:), allocatable :: d\n    integer, dimension(:), allocatable :: e\n    integer, dimension(:), allocatable :: f\n    integer, dimension(:), allocatable :: g\n    integer, dimension(:), allocatable :: h\n    integer, dimension(:), allocatable :: j\n    integer, dimension(:), allocatable :: k\n    integer, dimension(:), allocatable :: l\n    integer, dimension(:), allocatable :: m\n    integer, dimension(:), allocatable :: n\n    integer, dimension(:), allocatable :: o\n    integer, dimension(:), allocatable :: p\n    integer, dimension(:), allocatable :: q\n    integer, dimension(:), allocatable :: r\n    integer, dimension(:), allocatable :: s\n    integer, dimension(:), allocatable :: t\n    integer, dimension(:), allocatable :: u\n    integer, dimension(:), allocatable :: v\n    integer, dimension(:), allocatable :: w\n    integer, dimension(:), allocatable :: x\n    integer, dimension(:), allocatable :: y\n    integer, dimension(:), allocatable :: z\n    integer, dimension(:), allocatable :: aa\n    integer, dimension(:), allocatable :: ab\n    integer, dimension(:), allocatable :: ac\n    integer, dimension(:), allocatable :: ad\n    integer, dimension(:), allocatable :: ae\n    integer, dimension(:), allocatable :: af\n    integer, dimension(:), allocatable :: ag\n    integer, dimension(:), allocatable :: ah\n    integer, dimension(:), allocatable :: ai\n    integer, dimension(:), allocatable :: aj\n    integer, dimension(:), allocatable :: ak\n    integer, dimension(:), allocatable :: al\n    integer, dimension(:), allocatable ::
 DRB001_antidep1_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB057_jacobiinitialize_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB107_taskgroup_orig_no\n"\n!130 string="Translate this Fortran code to C++: \nprogram DRB108_taskyield_orig_no\n    use omp_lib\n    implicit none\n\n    integer result\n    result = 0\n\n   !$omp parallel\n   !$omp single\n       !$omp task\n            call sleep(3)\n            result = 1\n           !$omp end task\n       !$omp end single\n       !$omp taskyield\n        result = 2\n       !$omp end taskyield\n   !$omp end parallel\n\n    print 100, result\n    100 format ('result =',3i8)\n\nend program DRB108_taskyield_orig_no\n"\n!131 string="Translate this Fortran code to C++: \nprogram DRB109_threadprivate_orig_no\n    use omp_lib\n    implicit none\n\n    integer result\n    result = 0\n\n   !$omp parallel\n   !$omp single\n       !$omp task\n            call sleep(3)\n            result = 1\n           !$omp end task\n       !$omp end single\n       !$omp taskyield\n        result = 2\n       !$omp end taskyield\n   !$omp end parallel\n\n    print 100, result\n    100 format ('result =',3i8)\n\nend program DRB109_threadprivate_orig_no\n"\n!132 string="Translate this Fortran code to C++: \nprogram DRB110_threadprivate_orig_yes\n    use omp_lib\n    implicit none\n\n    integer result\n    result = 0\n\n   !$omp parallel\n   !$omp single\n       !$omp task\n            call sleep(3)\n            result = 1\n           !$omp end task\n       !$omp end single\n       !$omp taskyield\n        result = 2\n       !$omp end taskyield\n   !$omp end parallel\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB088_dynamic_storage_orig_yes\n\nsubroutine foo()\n    use DRB088\n    implicit none\n\n    integer :: i\n\n   !$omp atomic\n    counter = counter + 1\n\n   !$omp atomic\n    counter = counter + 1\n\n    do i = 1, 1000\n       !$omp atomic\n        counter = counter + 1\n    end do\n\n   !$omp atomic\n    counter = counter + 1\n\n   !$omp atomic\n    counter = counter + 1\n\nend subroutine foo\n\nmodule DRB088\n    implicit none\n\n    integer, pointer :: counter\n\nend module DRB088\n\n"\n\n#define DRB_089_DEF_RECURSIVE_POINTER_F90 "Translate this Fortran code to C++: \nprogram DRB089_recursive_pointer_orig_yes\n    use omp_lib\n    use DRB089\n    implicit none\n\n    allocate(counter)\n\n    counter = 0\n\n   !$omp parallel\n    call foo()\n   !$omp end parallel\n\n    print*,counter\n\n    deallocate(counter)\n\nend program DRB089_recursive_pointer_orig_yes\n\nsubroutine foo()\n    use DRB089\n    implicit none\n\n    integer :: i\n\n   !$omp atomic\n    counter = counter + 1\n\n   !$omp atomic\n    counter = counter + 1\n\n    do i = 1, 1000\n       !$omp atomic\n        counter = counter + 1\n    end do\n\n   !$omp atomic\n    counter = counter + 1\n\n   !$omp atomic\n    counter = counter + 1\n\nend subroutine foo\n\nmodule DRB089\n    implicit none\n\n    integer, pointer :: counter\n\nend module DRB089
 DRB129_mergeable_taskwait_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB117_taskwait_waitonlychild_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB090_static_local_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB077_single_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB118_nestlock_orig_no\n\nsubroutine incr_a(p, a)\n    use omp_lib\n    use DRB118\n    implicit none\n    type(pair) :: p\n    integer :: a\n\n    call omp_set_nest_lock(p%lck)\n    a = a + 1\n    call omp_unset_nest_lock(p%lck)\n\nend subroutine incr_a\n\nsubroutine incr_b(p, b)\n    use omp_lib\n    use DRB118\n    implicit none\n    type(pair) :: p\n    integer :: b\n\n    call omp_set_nest_lock(p%lck)\n    b = b + 1\n    call omp_unset_nest_lock(p%lck)\n\nend subroutine incr_b\n\nmodule DRB118\n    implicit none\n    type pair\n        integer :: a\n        integer :: b\n        integer(kind=omp_nest_lock_kind) :: lck\n    end type pair\nend module DRB118\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB121_reduction_orig_no\n"\n!121\n121_trans_to_be = "program DRB121_reduction_orig_no\n    use omp_lib\n    implicit none\n\n    integer :: var, i, sum1, sum2\n\n    var = 0\n    sum1 = 0\n    sum2 = 0\n\n   !$omp parallel reduction(+: var)\n       !$omp do schedule(static) reduction(+: sum1)\n        do i = 1, 5\n            sum1 = sum1+i\n        end do\n       !$omp end do\n\n       !$omp do schedule(static) reduction(+: sum2)\n        do i = 1, 5\n            sum2 = sum2+i\n        end do\n       !$omp end do\n\n        var = sum1 + sum2\n   !$omp end parallel\n\n    print 100, var\n    100 format ('var =',3i8)\nend program DRB121_reduction_orig_no\n"\n!122\n122_trans_from = "Translate this Fortran code to C++: \nprogram DRB122_reduction_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: var, i, sum1, sum2\n\n    var = 0\n    sum1 = 0\n    sum2 = 0\n\n   !$omp parallel reduction(+: var)\n       !$omp do schedule(static) reduction(+: sum1)\n        do i = 1, 5\n            sum1 = sum1+i\n        end do\n       !$omp end do\n\n       !$omp do schedule(static) reduction(+: sum2)\n        do i = 1, 5\n            sum2 = sum2+i\n        end do\n       !$omp end do\n\n        var = sum1 + sum2\n   !$omp end parallel\n\n    print 100, var\n    100 format ('var =',
 DRB099_targetparallelfor2_orig_no\n\nreal function foo(a,b,len)\n    use omp_lib\n    use DRB099\n    implicit none\n\n    integer :: i, len\n  integer, parameter :: dp = kind(1.0d0)\n    real(dp), dimension(:), allocatable :: a,b\n    real :: x\n\n    x = 0.0\n\n   !$omp target parallel for map(tofrom:a,b) map(to:len)\n    do i = 1, len\n        b(i) = a(i) + 1.0\n        x = x + b(i)\n    end do\n    foo = x\nend function foo\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB118_nestlock_orig_no\n\nsubroutine incr_a(p, a)\n    use omp_lib\n    use DRB118\n    implicit none\n    type(pair) :: p\n    integer :: a\n\n    call omp_set_nest_lock(p%lck)\n    a = a + 1\n    call omp_unset_nest_lock(p%lck)\n\nend subroutine incr_a\n\nsubroutine incr_b(p, b)\n    use omp_lib\n    use DRB118\n    implicit none\n    type(pair) :: p\n    integer :: b\n\n    call omp_set_nest_lock(p%lck)\n    b = b + 1\n    call omp_unset_nest_lock(p%lck)\n\nend subroutine incr_b\n\nmodule DRB118\n    implicit none\n    type pair\n        integer :: a, b\n        integer(kind=omp_nest_lock_kind) :: lck\n    end type pair\nend module DRB118\n\n', 'omp_destroy_nest_lock(p%lck);\n\n    print*,p%b\n\nend program DRB118_nestlock_orig_no\n\nsubroutine incr_a(p, a)\n    use omp_lib\n    use DRB118\n    implicit none\n    type(pair) :: p\n    integer :: a\n\n    call omp_set_nest_lock(p%lck)\n    a = a + 1\n    call omp_unset_nest_lock(p%lck)\n\nend subroutine incr_a\n\nsubroutine incr_b(p, b)\n    use omp_lib\n    use DRB118\n    implicit none\n    type(pair) :: p\n    integer :: b\n\n    call omp_set_nest_lock(p%lck)\n    b = b + 1\n    call omp_unset_nest_lock(p%
 DRB034_truedeplinear_var_yes\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\n    end do\n   !$omp end parallel do\n\n",\n"omp parallel do\n    do i = 1, uLen\n        a(2*i) = a(i) + 1\
\n\nmodule DRB091\n    implicit none\n    integer :: sum0 = 0\n    integer :: sum1 = 0\nend module\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n"\n\n# +\n# %%writefile DRB107_taskwaitmissing_orig_no.f90\n\n!This example is taken from PolyBench/GPU 1.0 test suite\n!Original test name: DRB107_taskwaitmissing_orig_no\n!Original test file name: DRB107_taskwaitmissing_orig_no.c\n\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n
 DRB062_matrixvector2_orig_no\n";\n\nint main(int argc, char** argv) {\n    int N = 1000;\n    double* a = (double*)malloc(N * N * sizeof(double));\n    double* v = (double*)malloc(N * sizeof(double));\n    double* v_out = (double*)malloc(N * sizeof(double));\n\n    for (int i = 0; i < N; i++) {\n        double sum = 0.0;\n        #pragma omp parallel for reduction(+:sum)\n        for (int j = 0; j < N; j++) {\n            sum += a[i * N + j] * v[j];\n            printf("%f\n", sum);\n        }\n        v_out[i] = sum;\n    }\n\n    free(a);\n    free(v);\n    free(v_out);\n\n    return 0;\n}\n/src/test/java/com/intel/llvm/ireditor/tool/TestTool.java\n/*\n * Copyright (c) 2020 Intel Corporation\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.intel.llvm.ireditor.tool;\n\nimport com.intel.llvm.ireditor.tool.Tool.ToolResult;\nimport com.intel.llvm.ireditor.tool.Tool.ToolResult.Status;\nimport com.intel.llvm.ireditor.tool.Tool.ToolResult.Type;\nimport com.intel.llvm.ireditor.tool.Tool.ToolResult.Type.ToolResultType;\nimport com.intel.llvm.ireditor.tool.Tool.ToolResult.Type.ToolResultType.ToolResultTypeValue;\nimport com.intel.llvm
 DRB017_outputdep_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB075_getthreadnum_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\nsubroutine lhsinit\n\nuse sp_data\nimplicit none\n\ninteger i, j, k, d, m\n\ndo k = 1, nz2\ndo j = 1, ny2\ndo i = 1, nx2\ndo m = 1, 5\ndo d = 1, 5\nlhs(m,d,i,j,k) = 0.0d0\nend do\nend do\nend do\nend do\nend do\n\nreturn\nend\n\n\n\nsubroutine compute_rhs\n\nuse sp_data\nimplicit none\n\ninteger i, j, k, d, m\ndouble precision tmp, u21, u31, u41, u21i, u31i, u41i, u11i, u11k, u11j, u11ijk\ndouble precision u21ijk, u31ijk, u41ijk, u51ijk, tmp2, tmp1\ndouble precision fjac(5,5), njac(5,5), b_inv(5,5), b(5,5)\n\ndo   k = 1, nz2\ndo   j = 1, ny2\ndo   i = 1, nx2\n\ndo   m = 1, 5\ndo   d = 1, 5\nfjac(m,d) = 0.0d0\nnjac(m,d) = 0.0d0\nend do\nend do\n\ndo   m = 1, 5\ndo   d = 1, 5\nb(m,d) = 0.0d0\nend do\nend do\n\ndo   m = 1, 5\ndo   d = 1, 5\nb_inv(m,d) = 0.0d0\nend do\nend do\n\ndo   m = 1, 5\nb_inv(m,m) = 1.0d0\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 subroutine makea\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 subroutine evolve\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 subroutine sparse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 subroutine ssor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 subroutine compute_initial_conditions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 subroutine setiv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\nsubroutine exact_solution(xi, eta, zeta, u_exact)\n\n\nuse bt_data\nimplicit none\n\ninteger m\ndouble precision xi, eta, zeta, u_exact(5)\n\ndo m = 1, 5\nu_exact(m) = ce(m,1) +\nce(m,2)*xi +\nce(m,3)*eta +\nce(m,4)*zeta +\nce(m,5)*xi*xi +\nce(m,6)*eta*eta +\nce(m,7)*zeta*zeta +\nce(m,8)*xi*xi*xi +\nce(m,9)*eta*eta*eta +\nce(m,10)*zeta*zeta*zeta +\nce(m,11)*xi*xi*xi*xi +\nce(m,12)*eta*eta*eta*eta +\nce(m,13)*zeta*zeta*zeta*zeta\nenddo\n\nreturn\nend\n\n\n\nsubroutine initialize()\n\n\nuse bt_data\nimplicit none\n\ninteger i, j, k, m, ix, iy, iz\ndouble precision xi, eta, zeta, Pface(5,3,2), Pxi, Peta, Pzeta, temp(5)\n\ncall lhsinit()\ncall set_constants()\n\ndo k = 0, grid_points(3)-1\ndo j = 0, grid_points(2)-1\ndo i = 0, grid_points(1)-1\ndo m = 1, 5\nu(m,i,j,k) = 1.0d0\nenddo\nenddo\nenddo\nenddo\n\ndo i = 0, grid_points(1)-1\ndo m = 1, 5\nu(m,i,0,0) = 1.0d0\nu(m,i,0,grid_points(3)-1) = 
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine print_array(n, x)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: x\ninteger :: n\ninteger :: i, j\n\ndo i = 1, n\ndo j = 1, n\nwrite (*, "(f10.2)", advance="no") x(j, i)\nend do\nwrite (*, "(\\n)")\nend do\nend subroutine print_array\n\nprogram main\nimplicit none\n\ninteger :: n = N\nDATA_TYPE, dimension(n, n) :: a\nDATA_TYPE, dimension(n, n) :: x\nDATA_TYPE, dimension(n, n) :: b\ninteger :: i, j\n\ncall init_array(n, x, a, b)\n\ndo i = 1, n\ndo j = 1, n\nx(j, i) = x(j, i) + a(j, i) * b(j, i)\nend do\nend do\n\ncall print_array(n, x)\nend program main\n\n",\n    "name": "Fortran",\n    "version": "gfortran 4.8.5"\n  },\n  {\n    "code": "void init_array(int n, DATA_TYPE POLYBENCH_2D(x,N,N,n,n), DATA_TYPE POLYBENCH_2D(a,N,N,n,n), DATA_TYPE POLYBENCH_2D(b,N,N,n,n)) {\n  int i, j;\n\n  for (i = 0; i < n; i++)\n    for (j = 0; j < n; j++) {\n      x[i][j] = ((DATA_TYPE) (i) * (j) + 1) / n;\n      a[i][j] = ((DATA_TYPE) (i) * (j + 1) + 2) / n;\n      b[i][j] = ((DATA_TYPE) (i) * (j + 2) + 3) / n;\n    }\n}\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_durbin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine print_array(ni, nj, c)\nimplicit none\n\nDATA_TYPE, dimension(nj, ni) :: c\ninteger :: nj, ni\ninteger :: i, j\n\ndo i = 1, ni\ndo j = 1, nj\nwrite(*, "(DATA_TYPE)", advance="no") c(j, i)\nend do\nwrite(*, *)\nend do\nend subroutine print_array\n\nsubroutine kernel_doitgen(ni, nj, nk, alpha, beta, c, a)\nimplicit none\n\nDATA_TYPE, dimension(nj, ni) :: c\nDATA_TYPE, dimension(nk, ni) :: a\nDATA_TYPE :: alpha, beta\ninteger :: nj, ni, nk\ninteger :: i, j, k\n\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, nk\nc(j, i) = c(j, i) + alpha * a(k, i)\nend do\nend do\nend do\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, nk\nc(j, i) = c(j, i) + beta * a(k, i)\nend do\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\ninteger :: ni, nj, nk\nDATA_TYPE, dimension(:,:), allocatable :: c\nDATA_TYPE, dimension(:,:), allocatable :: a\nDATA_TYPE :: alpha, beta\ninteger :: i, j\n\ncall init_T(ni, nj, nk)\nallocate(c(nj, ni))\nallocate(a(nk, ni))\ncall init_array(ni, nj, alpha, beta, c, a)\ncall kernel_doitgen(ni, nj, nk, alpha, beta, c, a)\ncall print_array(ni, nj, c)\ndeallocate(c)\ndeallocate
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\nsubroutine print_array(n, m, dat)\nimplicit none\n\nDATA_TYPE, dimension(n, m) :: dat\ninteger :: m, n\ninteger :: i, j\n\ndo i = 1, m\ndo j = 1, n\nwrite(*, "(f10.2)", advance="no") dat(j, i)\nend do\nwrite(*, *)\nend do\nend subroutine print_array\n\nsubroutine kernel_doitgen(m, n, float_n, A, C4, sum)\nimplicit none\n\nDATA_TYPE, dimension(n, m) :: A\nDATA_TYPE, dimension(n, m) :: C4\nDATA_TYPE :: float_n\nDATA_TYPE :: sum\ninteger :: m, n\ninteger :: i, j, k\n\nsum = 0.0D0\ndo i = 1, m\ndo j = 1, n\ndo k = 1, n\nC4(j, i) = C4(j, i) + A(k, i) * float_n\nend do\nsum = sum + C4(j, i)\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(N, M) :: A\nDATA_TYPE, dimension(N, M) :: C4\nDATA_TYPE :: float_n\nDATA_TYPE :: sum\ninteger :: m, n\n\nm = M\nn = N\n\ncall init_array(m, n, float_n, A)\ncall kernel_doitgen(m, n, float_n, A, C4, sum)\ncall print_array(m, n, C4)\nend program doitgen\n\n', 'kernel_doitgen', 'doitgen', 'doitgen.f', 'doitgen.c', 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_doitgen\n\nThe following code is the C++ code generated by the polybench2 tool:\nvoid doitgen(int nr, int nq, int np, DATA_TYPE POLYBENCH_2D(a,NP,NQ,nr,nq), DATA_TYPE POLYBENCH_2D(sumA,NP,NQ,np,nq), DATA_TYPE POLYBENCH_2D(cFour,NP,NP,np,np)) {\n#pragma scop\nfor (int r = 0; r < nr; r++)\nfor (int q = 0; q < nq; q++)\nfor (int p = 0; p < np; p++)\nsumA[p][q] = 0.0;\nfor (int r = 0; r < nr; r++)\nfor (int q = 0; q < nq; q++)\nfor (int p = 0; p < np; p++)\nfor (int s = 0; s < np; s++)\nsumA[p][q] = sumA[p][q] + (a[s][q] * cFour[p][s]);\nfor (int r = 0; r < nr; r++)\nfor (int q = 0; q < nq; q++)\nfor (int p = 0; p < np; p++)\na[p][q] = sumA[p][q];\n#pragma endscop\n}\n\nThe following code is the C++ code generated by the polybench2 tool:\nvoid doitgen(int nr, int nq, int np, DATA_TYPE POLYBENCH_2D(a,NP,NQ,nr,nq), DATA_TYPE POLYBENCH_2D(sumA,NP,NQ,np,nq), DATA_TYPE POLYBENCH_2D(cFour,NP,NP,np,np)) {\n#pragma scop\nfor (int r = 0; r < nr; r++)\nfor (int q = 0; q < nq; q++)\nfor (int p = 0; p < np; p++)\nsumA[p][q] = 0.0;\nfor (int r = 0; r < nr; r++)\nfor (int q = 
 kernel_trisolv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine print_array(n, x)\nimplicit none\n\nDATA_TYPE, dimension(n) :: x\ninteger :: n\ninteger :: i\n\ndo i = 1, n\nwrite (*, '(f0.2)', advance='no') x(i)\nend do\nwrite (*, '(a)', advance='yes')\nend subroutine print_array\n\nsubroutine kernel_doitgen(n, alpha, beta, a, b, x)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\nDATA_TYPE, dimension(n, n) :: b\nDATA_TYPE, dimension(n) :: x\nDATA_TYPE :: alpha, beta\ninteger :: n\ninteger :: i, j, k\n\ndo i = 1, n\ndo j = 1, n\ndo k = 1, n\nb(i, j) = b(i, j) + alpha * a(k, i) * x(j)\nend do\nend do\nend do\ndo i = 1, n\ndo j = 1, n\ndo k = 1, n\na(i, j) = a(i, j) + beta * b(k, i) * x(j)\nend do\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: a\nDATA_TYPE, dimension(:,:), allocatable :: b\nDATA_TYPE, dimension(:), allocatable :: x\nDATA_TYPE :: alpha, beta\ninteger :: n\ninteger :: i, j, k\n\ncall get_command_argument(1, arg=n)\nn = str_to_int(n)\n\nallocate(a(n, n))\nallocate(b(n, n))\nallocate(x(n))\n\ncall init_array(n, alpha, beta, a, b, x)\ncall kernel_doitgen(n, alpha, beta, a, b, x)\ncall print_array(n
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_syrk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine print_array(n, a)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\ninteger :: n\ninteger :: i, j\n\ndo i = 1, n\ndo j = 1, n\nwrite (*, "(f10.2)", advance="no") a(i, j)\nend do\nwrite (*, \"(\\\\n\")\nend do\nend subroutine print_array\n\nprogram main\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: a\nDATA_TYPE, dimension(:), allocatable :: x1\nDATA_TYPE, dimension(:), allocatable :: y1\nDATA_TYPE, dimension(:), allocatable :: x2\nDATA_TYPE, dimension(:), allocatable :: y2\ninteger :: n\ninteger :: i, j\n\nread (*, *) n\nallocate(a(n, n))\nallocate(x1(n))\nallocate(y1(n))\nallocate(x2(n))\nallocate(y2(n))\n\ncall init_array(n, x1, x2, y1, y2, a)\ncall kernel_stencil(n, x1, x2, y1, y2, a)\ncall print_array(n, a)\n\ndeallocate(a)\ndeallocate(x1)\ndeallocate(y1)\ndeallocate(x2)\ndeallocate(y2)\n\nend program main\n\nsubroutine kernel_stencil(n, x1, x2, y1, y2, a)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\nDATA_TYPE, dimension(n) :: x1\nDATA_TYPE, dimension(n) :: y1\nDATA_TYPE, dimension(n) :: x2\nDATA_TYPE, dimension(n) :: y2\ninteger :: n\ninteger :: i, j\n\ndo i = 1, n\ndo j = 1, n\na(j, i) = (a(j, i) + a(j, i
 kernel_fdtd_apml\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\n\nsubroutine print_array(n, a)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\ninteger :: n\ninteger :: i,j\ndo i = 1, n\ndo j = 1, n\nwrite(*, "(f10.2)", advance="no") a(j, i)\nend do\nwrite(*, "(A)", advance="yes")\nend do\nend subroutine print_array\n\n\nsubroutine kernel_doitgen(n, A, C4, sum)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: A\nDATA_TYPE, dimension(n, n) :: C4\nDATA_TYPE :: sum\ninteger :: n\ninteger :: i,j,k\nsum = 0.0D0\ndo i = 1, n\ndo j = 1, n\ndo k = 1, n\nC4(i, j) = C4(i, j) + A(i, k) * A(k, j)\nend do\nsum = sum + C4(i, j)\nend do\nend do\nend subroutine kernel_doitgen\n\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: A\nDATA_TYPE, dimension(:,:), allocatable :: C4\nDATA_TYPE :: sum\ninteger :: n\ninteger :: i,j,k\ninteger :: t_start, t_stop, t_rate\n\ncall get_command_argument(1, arg=n)\nn = str_to_int(n)\nallocate(A(n, n))\nallocate(C4(n, n))\n\ncall init_array(n, A)\n\ncall system_clock(t_start, t_rate)\ncall kernel_doitgen(n, A, C4, sum)\ncall system_clock(t_stop)\nprint *, "Time in seconds: ", (t_stop - t_start) / real(t_rate)\n\ncall print_array(n,
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine kernel_doitgen(ni, nj, alpha, beta, c, a, b)\nimplicit none\n\nDATA_TYPE, dimension(nj, nj) :: a\nDATA_TYPE, dimension(nj, ni) :: b\nDATA_TYPE, dimension(nj, ni) :: c\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj\ninteger :: i, j, k\n\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, nj\nc(j, i) = c(j, i) + alpha * a(j, k) * b(k, i)\nend do\nend do\nend do\ndo i = 1, ni\ndo j = 1, nj\nc(j, i) = c(j, i) + beta * c(j, i)\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: a, b, c\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj\ninteger :: i, j, k\ninteger :: t_start, t_end, cr\n\ncall get_environment_variable(\"NI\", ni)\ncall get_environment_variable(\"NJ\", nj)\n\nallocate(a(nj, nj))\nallocate(b(nj, ni))\nallocate(c(nj, ni))\n\ncall init_array(ni, nj, alpha, beta, c, a, b)\n\ncall system_clock(count_rate=cr)\ncall system_clock(count=t_start)\n\ncall kernel_doitgen(ni, nj, alpha, beta, c, a, b)\n\ncall system_clock(count=t_end, count_rate=cr)\nprint *, \"Wall clock time:\", (t_end - t_start) / dble(cr)\n\ndeallocate(a)\ndeallocate(b)\ndeallocate(c)\n\nend program doitgen\n
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n",\n    "name": "print_array",\n    "language": "Fortran",\n    "code": "subroutine print_array(n, y)\nimplicit none\n\nDATA_TYPE, dimension(n) :: y\ninteger :: n\ninteger :: i\ndo i = 1, n\nwrite(0, DATA_PRINTF_MODIFIER) y(i)\nif (mod(i - 1, 20) == 0) then\nwrite(0, *)\nend if\nend do\nend subroutine\n",\n    "url": "https://raw.githubusercontent.com/polybench/benchmarks/master/fortran/linear-algebra/kernels/print_array.f"\n  },\n  {\n    "category": "linear-algebra",\n    "benchmark": "2mm",\n    "contributors": [\n      ""\n    ],\n    "description": "This version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis kernel is the same as the 2mm kernel in PolyBench/C.\n\nThis version is for column-major layout. \nThis
 kernel_gramschmidt\n\nThe original code was obtained from: http://www.cs.utah.edu/~suresh/papers/pldi91.pdf\n\nCompiler: Intel Compiler 17.0.0\n\nCompile command: icc -O3 -xHost -ip -qopenmp -DSTREAM_ARRAY_SIZE=1000000 -DNTIMES=100 -DTYPE=double -DSTREAM_TYPE=0 -D_PB_NI=1000 -D_PB_NJ=1000 -o gramschmidt gramschmidt.c\n\nRun command:./gramschmidt\n\n","language":"c","name":"gramschmidt","output":"\n","url":"https://github.com/spcl/c-polybench/blob/master/benchmarks/gramschmidt/gramschmidt.c"},{"code":"\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n#include <unistd.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <string.h>\n#include <omp.h>\n\n#define DATA_TYPE double\n\n/* Default to LARGE_DATASET. */\n# if!defined(MINI_DATASET) &&!defined(SMALL_DATASET) &&!defined(LARGE_DATASET) &&!defined(EXTRALARGE_DATASET)\n#  define LARGE_DATASET\n# endif\n\n#ifdef MINI_DATASET\n# define NI 100\n# define NJ 100\n# define NK 100\n# define NL 100\n#endif\n\n#ifdef SMALL_DATASET\n# define NI 1000\n# define NJ 1000\n# define NK 1000\n# define NL 1000\n#endif\n\n#ifdef LARGE_DATASET\n# define NI 10000\n# define NJ 10000\n# define NK 1
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_covariance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_floyd_warshall\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_jacobi1d\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_fdtd_2d\n\n",\n"kernel_fdtd_2d_0",\n"kernel_fdtd_2d_1",\n"kernel_fdtd_2d_2",\n"kernel_fdtd_2d_3",\n"kernel_fdtd_2d_4",\n"kernel_fdtd_2d_5",\n"kernel_fdtd_2d_6",\n"kernel_fdtd_2d_7",\n"kernel_fdtd_2d_8",\n"kernel_fdtd_2d_9",\n"kernel_fdtd_2d_10",\n"kernel_fdtd_2d_11",\n"kernel_fdtd_2d_12",\n"kernel_fdtd_2d_13",\n"kernel_fdtd_2d_14",\n"kernel_fdtd_2d_15",\n"kernel_fdtd_2d_16",\n"kernel_fdtd_2d_17",\n"kernel_fdtd_2d_18",\n"kernel_fdtd_2d_19",\n"kernel_fdtd_2d_20",\n"kernel_fdtd_2d_21",\n"kernel_fdtd_2d_22",\n"kernel_fdtd_2d_23",\n"kernel_fdtd_2d_24",\n"kernel_fdtd_2d_25",\n"kernel_fdtd_2d_26",\n"kernel_fdtd_2d_27",\n"kernel_fdtd_2d_28",\n"kernel_fdtd_2d_29",\n"kernel_fdtd_2d_30",\n"kernel_fdtd_2d_31",\n"kernel_fdtd_2d_32",\n"kernel_fdtd_2d_33",\n"kernel_fdtd_2d_34",\n"kernel_fdtd_2d_35",\n"kernel_fdtd_2d_36",\n"kernel_fdtd_2d_37",\n"kernel_fdtd_2d_38",\n"kernel
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_syr2k\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_gemver\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_lu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_gemm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine print_array(n, a)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\ninteger :: n\ninteger :: i, j\n\ndo i = 1, n\ndo j = 1, n\nwrite(*, "(DATA_TYPE)", advance="no") a(j, i)\nend do\nwrite(*, *)\nend do\nend subroutine print_array\n\nsubroutine kernel_doitgen(n, alpha, a, b, c)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\nDATA_TYPE, dimension(n, n) :: b\nDATA_TYPE, dimension(n, n) :: c\nDATA_TYPE :: alpha\ninteger :: n\ninteger :: i, j, k\n\ndo i = 1, n\ndo j = 1, n\nc(j, i) = 0D0\ndo k = 1, n\nc(j, i) = c(j, i) + (a(k, i) * b(j, k))\nend do\nc(j, i) = c(j, i) + alpha\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: a\nDATA_TYPE, dimension(:,:), allocatable :: b\nDATA_TYPE, dimension(:,:), allocatable :: c\nDATA_TYPE :: alpha\ninteger :: n\ninteger :: i, j, k\n\nread(*, *) n\nallocate(a(n, n))\nallocate(b(n, n))\nallocate(c(n, n))\ncall init_array(n, alpha, a, b)\ncall kernel_doitgen(n, alpha, a, b, c)\ncall print_array(n, c)\ndeallocate(a)\ndeallocate(b)\ndeallocate(c)\nend program doitgen\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_mvt\n\n", "pass_name": "convert_to_llvm", "pass_feature_name": "llvm_ir", "pass_value": "define void @_Z11kernel_mvtiiiPA1000_dS0_S0_S0_S0_(i32 %n, double* %x1, double* %y1, double* %x2, double* %y2, [1000 x double]* %a) {\nentry:\n  %a.addr = alloca [1000 x double]*, align 8\n  %x1.addr = alloca double*, align 8\n  %y1.addr = alloca double*, align 8\n  %x2.addr = alloca double*, align 8\n  %y2.addr = alloca double*, align 8\n  %n.addr = alloca i32, align 4\n  %i = alloca i32, align 4\n  %j = alloca i32, align 4\n  store [1000 x double]* %a, [1000 x double]** %a.addr, align 8\n  store double* %x1, double** %x1.addr, align 8\n  store double* %y1, double** %y1.addr, align 8\n  store double* %x2, double** %x2.addr, align 8\n  store double* %y2, double** %y2.addr, align 8\n  store i32 %n, i32* %n.addr, align 4\n  store i32 0, i32* %i, align 4\n  br label %for.cond\n\nfor.cond:\n  %0 = load i32, i32* %i, align 4\n  %1 = load i32, i32* %n.addr, align 4\n  %cmp = icmp slt i32 %0, %1\n  br i1 %cmp, label %for.body, label %for.end\n\nfor.body:\n  %2 = load i32, i3
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\nsubroutine kernel_doitgen(ni, nj, alpha, beta, c, a, b)\nimplicit none\n\nDATA_TYPE, dimension(nj, ni) :: a\nDATA_TYPE, dimension(nj, ni) :: b\nDATA_TYPE, dimension(ni, ni) :: c\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj\ninteger :: i, j, k\n\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, ni\na(j, i) = a(j, i) + (alpha * b(j, k) * c(k, i))\nend do\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: a\nDATA_TYPE, dimension(:,:), allocatable :: b\nDATA_TYPE, dimension(:,:), allocatable :: c\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj\ninteger :: i, j, k\ninteger :: t_start, t_end\n\ncall get_command_argument(1, arg)\nread(arg, '(I30)') ni\ncall get_command_argument(2, arg)\nread(arg, '(I30)') nj\n\nallocate(a(nj, ni))\nallocate(b(nj, ni))\nallocate(c(ni, ni))\n\ncall init_array(ni, nj, alpha, beta, c, a, b)\n\ncall system_clock(count_rate=cr)\ncall system_clock(count_max=cm)\ncall system_clock(t_start)\n\ncall kernel_doitgen(ni, nj, alpha, beta, c, a, b)\n\ncall system_clock(t_end, cr)\nprint *, ((t_end - t_start) / dble(cr)), \"seconds\"\n\ndeallocate(a)\ndeallocate(b)\ndeallocate(c)\nend program doitgen\n","language":"fortran"},{"
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine s3d13(alpha, beta, a, b, c, d, ni, nj, nk, nl)\nimplicit none\n\nDATA_TYPE, dimension(nk, ni) :: a\nDATA_TYPE, dimension(nj, nk) :: b\nDATA_TYPE, dimension(nl, nj) :: c\nDATA_TYPE, dimension(nl, ni) :: d\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj, nk, nl\ninteger :: i, j, k, l\n\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, nk\na(k,i) = a(k,i) + beta * b(j,k)\nend do\nend do\nend do\n\ndo i = 1, ni\ndo j = 1, nj\ndo l = 1, nl\nd(l,i) = d(l,i) + beta * c(j,l)\nend do\nend do\nend do\n\ndo i = 1, ni\ndo l = 1, nl\nd(l,i) = d(l,i) + alpha * a(l,i)\nend do\nend do\nend subroutine s3d13\n\nsubroutine s3d13_opt(alpha, beta, a, b, c, d, ni, nj, nk, nl)\nimplicit none\n\nDATA_TYPE, dimension(nk, ni) :: a\nDATA_TYPE, dimension(nj, nk) :: b\nDATA_TYPE, dimension(nl, nj) :: c\nDATA_TYPE, dimension(nl, ni) :: d\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj, nk, nl\ninteger :: i, j, k, l\n\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, nk\na(k,i) = a(k,i) + beta * b(j,k)\nend do\n
 kernel_dynprog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\n"\n\n# +\n# %%writefile init_array.cpp\n#include <iostream>\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nusing namespace std;\n\nvoid init_array(int maxgrid, DATA_TYPE *sumTang, DATA_TYPE *mean, DATA_TYPE *path)\n{\n  int i, j;\n\n  for (i = 0; i < maxgrid; i++)\n    for (j = 0; j < maxgrid; j++)\n    {\n      sumTang[i * maxgrid + j] = (i + 1) * (j + 1);\n      mean[i * maxgrid + j] = (DATA_TYPE)(i - j) / maxgrid;\n      path[i * maxgrid + j] = ((DATA_TYPE)(i - 1) * (j - 2)) / maxgrid;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n  int maxgrid = 1024;\n  DATA_TYPE *sumTang = (DATA_TYPE *)malloc(maxgrid * maxgrid * sizeof(DATA_TYPE));\n  DATA_TYPE *mean = (DATA_TYPE *)malloc(maxgrid * maxgrid * sizeof(DATA_TYPE));\n  DATA_TYPE *path = (DATA_TYPE *)malloc(maxgrid * maxgrid * sizeof(DATA_TYPE));\n\n  init_array(maxgrid, sumTang, mean, path);\n\n  free(sumTang);\n  free(mean);\n  free(path);\n\n  return 0;\n}\n\n# +\n# %%writefile init_array.h\n#ifndef INIT_ARRAY_H\n#define INIT_ARRAY_H\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define DATA_TYPE float\n\nvoid init_array(int maxgrid, DATA_TYPE *sumTang, DATA_TYPE *mean, DATA_TYPE *path);\n\n#endif\n\n# +\n# %%writefile Makefile\n\nCC = g++\n\nCFLAGS = -O3 -fopenmp\n\nEXE = init_array\n\n$(EXE): init_array.cpp init_array.h\n	$(CC
 kernel_3mm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_adi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\n\nsubroutine print_array(n, y)\nimplicit none\n\nDATA_TYPE, dimension(n + 1) :: y\ninteger :: n\ninteger :: i\n\ndo i = 1, n + 1\nwrite(*, \"(f22.15) \") y(i)\nend do\nend subroutine print_array\n\n\nsubroutine kernel_seidel_2d(n, a, b, x, y)\nimplicit none\n\nDATA_TYPE, dimension(n + 1, n + 1) :: a\nDATA_TYPE, dimension(n + 1) :: x\nDATA_TYPE, dimension(n + 1) :: b\nDATA_TYPE, dimension(n + 1) :: y\ninteger :: n\ninteger :: i, j\n\ndo i = 1, n + 1\ny(i) = b(i)\nend do\ndo i = 1, n + 1\ndo j = 1, n + 1\ny(i) = y(i) + a(j, i) * x(j)\nend do\nend do\nend subroutine kernel_seidel_2d\n\n\nprogram main\nimplicit none\n\ninteger :: n = N\ninteger :: i, j\nDATA_TYPE, dimension(n + 1, n + 1) :: a\nDATA_TYPE, dimension(n + 1) :: x\nDATA_TYPE, dimension(n + 1) :: b\nDATA_TYPE, dimension(n + 1) :: y\n\ncall init_array(n, a, b, x, y)\ncall kernel_seidel_2d(n, a, b, x, y)\ncall print_array(n, y)\nend program main\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine kernel_doitgen(ni, nj, nk, alpha, beta, c, a, b)\nimplicit none\n\nDATA_TYPE, dimension(nk, ni) :: a\nDATA_TYPE, dimension(nj, nk) :: b\nDATA_TYPE, dimension(nj, ni) :: c\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj, nk\ninteger :: i, j, k\n\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, nk\nc(j, i) = c(j, i) + alpha * a(k, i) + beta * b(j, k)\nend do\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: a, b, c\nDATA_TYPE :: alpha, beta\ninteger :: ni, nj, nk\ninteger :: i, j, k\ninteger :: t_start, t_end, cr\n\ncall get_environment_variable(\"NI\", value = cr)\nread(cr, '(i10)') ni\ncall get_environment_variable(\"NJ\", value = cr)\nread(cr, '(i10)') nj\ncall get_environment_variable(\"NK\", value = cr)\nread(cr, '(i10)') nk\n\nallocate(a(nk, ni))\nallocate(b(nj, nk))\nallocate(c(nj, ni))\n\ncall init_array(ni, nj, nk, alpha, beta, c, a, b)\n\ncall system_clock(t_start, cr)\ncall kernel_doitgen(ni, nj, nk, alpha, beta, c, a, b)\ncall system_clock(t_end, cr)\n\nprint *, \"NI = \", ni\nprint *, \"NJ = \", nj\nprint *, \"NK = \", nk\nprint *, \"Time in seconds = \", (t_end - t_start
 kernel_symm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_atax\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\nsubroutine print_array(n, x)\nimplicit none\nDATA_TYPE, dimension(n) :: x\ninteger :: n\ninteger :: i\ndo i = 1, n\nwrite(*, '(f0.2)', advance='no') x(i)\nend do\nwrite(*,*)\nend subroutine print_array\n\nsubroutine kernel_doitgen(n, a, x, b, c)\nimplicit none\nDATA_TYPE, dimension(n, n) :: a\nDATA_TYPE, dimension(n) :: x\nDATA_TYPE, dimension(n) :: b\nDATA_TYPE, dimension(n) :: c\ninteger :: n\ninteger :: i, j\ndo i = 1, n\nb(i) = 0.0\ndo j = 1, n\nb(i) = b(i) + a(i, j) * x(j)\nend do\nb(i) = b(i) + c(i)\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\ninteger :: n = N\nDATA_TYPE, dimension(:,:), allocatable :: a\nDATA_TYPE, dimension(:), allocatable :: x\nDATA_TYPE, dimension(:), allocatable :: b\nDATA_TYPE, dimension(:), allocatable :: c\ninteger :: i, j\nallocate(a(n, n))\nallocate(x(n))\nallocate(b(n))\nallocate(c(n))\ncall init_array(n, a, x, c)\ncall kernel_doitgen(n, a, x, b, c)\ncall print_array(n, b)\ndeallocate(a)\ndeallocate(x)\ndeallocate(b)\ndeallocate(c)\nend program doitgen\n\n", "language": "c++", "name": "doitgen.cpp"}, "code_type": "program", "source_format": "code", "input_data": [{"name": "input1", "href": "https://raw.githubusercontent.com/shaojiewang/PolyBench-data/master/data
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_reg_detect\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\nsubroutine print_array(n, a)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\ninteger :: n\ninteger :: i, j\n\ndo i = 1, n\ndo j = 1, n\nwrite(*, "(f10.2)", advance="no") a(j, i)\nend do\nwrite(*, *)\nend do\nend subroutine print_array\n\nsubroutine kernel_doitgen(n, a, c)\nimplicit none\n\nDATA_TYPE, dimension(n, n) :: a\nDATA_TYPE, dimension(n, n) :: b\nDATA_TYPE, dimension(n, n) :: c\ninteger :: n\ninteger :: i, j, k\n\ndo i = 1, n\ndo j = 1, n\nc(j, i) = 0.0D0\ndo k = 1, n\nc(j, i) = c(j, i) + a(k, i) * b(j, k)\nend do\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\n\nDATA_TYPE, dimension(:,:), allocatable :: a\nDATA_TYPE, dimension(:,:), allocatable :: b\nDATA_TYPE, dimension(:,:), allocatable :: c\ninteger :: n\ninteger :: i, j\n\nread(*, *) n\nallocate(a(n, n))\nallocate(b(n, n))\nallocate(c(n, n))\n\ncall init_array(n, a, b)\ncall kernel_doitgen(n, a, c)\ncall print_array(n, c)\n\ndeallocate(a)\ndeallocate(b)\ndeallocate(c)\n\nend program doitgen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_correlation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_gesummv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_ludcmp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_cholesky\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\nsubroutine kernel_doitgen(ni, nj, nk, nl, nm, a, b, c, d, e)\nimplicit none\n\nDATA_TYPE, dimension(nk, ni) :: a\nDATA_TYPE, dimension(nj, nk) :: b\nDATA_TYPE, dimension(nm, nj) :: c\nDATA_TYPE, dimension(nl, nm) :: d\nDATA_TYPE, dimension(nl, ni) :: e\ninteger :: ni, nj, nk, nl, nm\ninteger :: i, j, k, l, m\n\ndo i = 1, ni\ndo j = 1, nj\ndo k = 1, nk\ndo l = 1, nl\ndo m = 1, nm\ne(l,i) = e(l,i) + a(k,i) * b(j,k) * c(m,j) * d(l,m)\nend do\nend do\nend do\nend do\nend do\nend subroutine kernel_doitgen\n\nprogram doitgen\nimplicit none\ninteger :: ni, nj, nk, nl, nm\ninteger :: i, j, k, l, m\nDATA_TYPE, dimension(:,:), allocatable :: a, b, c, d, e\n\ncall get_env_int('NI', ni)\ncall get_env_int('NJ', nj)\ncall get_env_int('NK', nk)\ncall get_env_int('NL', nl)\ncall get_env_int('NM', nm)\n\nallocate(a(nk, ni))\nallocate(b(nj, nk))\nallocate(c(nm, nj))\nallocate(d(nl, nm))\nallocate(e(nl, ni))\n\ncall init_array(ni, nj, nk, nl, nm, a, b, c, d)\ncall kernel_doitgen(ni, nj, nk, nl, nm, a, b, c, d, e)\n\ndo i = 1, ni\ndo
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_jacobi_2d_imper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB047_doallchar_orig_no\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n",\n    "ompt_task_id": 1,\n    "ompt_task_type": 1,\n    "ompt_task_flag": 1,\n    "ompt_frame.exit": 1,\n    "ompt_frame.enter": 1,\n    "ompt_parallel_id": 1,\n    "ompt_thread_id": 1,\n    "ompt_parallel_begin": 1,\n    "ompt_parallel_end": 1,\n    "ompt_thread_begin": 1,\n    "ompt_thread_end": 1,\n    "ompt_task_create": 1,\n    "ompt_task_schedule": 1,\n    "ompt_task_dependences": 1,\n    "ompt_task_dependence": 1,\n    "ompt_implicit_task": 1,\n    "ompt_sync_region": 1,\n    "ompt_sync_region_wait": 1,\n    "ompt_target": 1,\n    "ompt_target_data_op": 1,\n    "ompt_target_submit": 1,\n    "ompt_target_map": 1,\n    "ompt_target_map_op": 1,\n    "ompt_target_update": 1,\n    "ompt_target_update_map": 1,\n    "ompt_target_enter_data": 1,\n    "ompt_target_exit_data": 1,\n    "ompt_target_data_alloc": 1,\n    "ompt_target_data_move": 1,\n    "ompt_target_data_transfer": 1,\n    "ompt_target_data_realloc": 1,\n    "ompt_target_data_delete": 1,\n    "ompt_target_data_link": 1,\n    "ompt_target_data_unlink": 1,\n    "ompt_target_data_commit": 1,\n    "ompt_target_data_export": 1,\n    "ompt_target_data_import": 1,\n    "ompt_target_data_release": 1,\n    "ompt_target_data_resolve": 1,\n    "ompt
 DRB015_outofbounds_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB125_single_orig_no\n"\n!126 = metadata!{metadata!127, metadata!128, metadata!129, metadata!130, metadata!131, metadata!132, metadata!133, metadata!134, metadata!135, metadata!136, metadata!137, metadata!138, metadata!139, metadata!140, metadata!141, metadata!142, metadata!143, metadata!144, metadata!145, metadata!146, metadata!147, metadata!148, metadata!149, metadata!150, metadata!151, metadata!152, metadata!153, metadata!154, metadata!155, metadata!156, metadata!157, metadata!158, metadata!159, metadata!160, metadata!161, metadata!162, metadata!163, metadata!164, metadata!165, metadata!166, metadata!167, metadata!168, metadata!169, metadata!170, metadata!171, metadata!172, metadata!173, metadata!174, metadata!175, metadata!176, metadata!177, metadata!178, metadata!179, metadata!180, metadata!181, metadata!182, metadata!183, metadata!184, metadata!185, metadata!186, metadata!187, metadata!188, metadata!189, metadata!190, metadata!191, metadata!192, metadata!193, metadata!194, metadata!195, metadata!196, metadata!197, metadata!198, metadata!199, metadata!200, metadata!201, metadata!202, metadata!203, metadata!204, metadata!205, metadata!206, metadata!207, metadata!2
 DRB113_default_orig_no\n"\n!100 =!{!"0x102"}\n!101 =!{!"0x100\00len\001\000",!102,!7,!4} ; [ DW_TAG_auto_variable ] [len] [line 1]\n!102 =!{!"0xb\001\000\000",!1,!103}         ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/dry.c]\n!103 =!{!"0xb\001\000\000",!1,!0}            ; [ DW_TAG_lexical_block ] [/home/vanderson/dev/repos/GEOS1.0/GEOS/experiments/benchmarks/src/base/dry.c]\n!104 =!{!"0x100\00i\001\000",!102,!7,!4}    ; [ DW_TAG_auto_variable ] [i] [line 1]\n!105 =!{!"0x100\00j\001\000",!102,!7,!4}    ; [ DW_TAG_auto_variable ] [j] [line 1]\n!106 =!{!"0x100\00a\003\000",!102,!7,!4}    ; [ DW_TAG_auto_variable ] [a] [line 3]\n!107 =!{!"0x100\00b\004\000",!102,!7,!4}    ; [ DW_TAG_auto_variable ] [b] [line 4]\n!108 =!{!"0x2e\00main\00main\00\001\000\001\000\000\00256\
 DRB165_taskdep4_orig_yes_omp_50\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB142_acquirerelease_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB148_critical1_orig_gpu_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB019_plusplus_var_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB101_task_value_orig_no\n\nsubroutine gen_task(i)\n    use omp_lib\n    use DRB101\n    implicit none\n    integer :: i\n\n   !$omp task\n        a(i) = i+1\n   !$omp end task\nend subroutine gen_task\n\nmodule DRB101\n    implicit none\n    integer, allocatable :: a(:)\nend module DRB101\n\n"\n\n# +\n# %%writefile DRB101_task_value_orig_yes.f90\n\n!This example is derived from the NAS Parallel Benchmarks (NPB) 3.4.1.\n!The "task_value" benchmark in NPB is a serial C program that simulates\n!a parallel program using OpenMP tasks.\n!\n!The present fortran version is a translated version of the\n!OpenMP C version. No changes in the algorithm or the control flow were\n!performed except for removing unnecessary calls and variables.\n!\n!The output was checked against the serial C version for bit-identical\n!results.\n!\n!NAS Parallel Benchmarks 3.4.1 -- EP Benchmark\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n
 DRB022_reductionmissing_var_yes\n\n",\n"omp parallel do private(temp, i, j) reduction(+:getSum)\n    do i = 1, len\n        do j = 1, len\n            temp = u(i,j)\n            getSum = getSum + temp * temp\n        end do\n    end do\n   !$omp end parallel do\n\n    print*,"sum =", getSum\n\n\n    deallocate(args,u)\nend program DRB022_reductionmissing_var_yes\n\n",\n"omp parallel do private(temp, i, j) reduction(+:getSum)\n    do i = 1, len\n        do j = 1, len\n            temp = u(i,j)\n            getSum = getSum + temp * temp\n        end do\n    end do\n   !$omp end parallel do\n\n    print*,"sum =", getSum\n\n\n    deallocate(args,u)\nend program DRB022_reductionmissing_var_yes\n\n",\n"omp parallel do private(temp, i, j) reduction(+:getSum)\n    do i = 1, len\n        do j = 1, len\n            temp = u(i,j)\n            getSum = getSum + temp * temp\n        end do\n    end do\n   !$omp end parallel do\n\n    print*,"sum =", getSum\n\n\n    deallocate(args,u)\nend program DRB022_reductionmissing_var_yes\n\n",\n"omp parallel do private(temp, i, j) reduction(+:getSum)\n    do i = 1, len\n        do j = 1, len\n            temp = u(i,j)\n            getSum = getSum + temp * temp\n        end do\n    end do\n   !$omp end parallel do\n\n    print*,"sum =", getSum\n\n\n    deallocate(args,u)\nend program DRB022_reductionmissing_var_yes
 DRB014_outofbounds_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 DRB098_simd2_orig_no\n"\n!133 =!{!"0x101\00a\001\000",!134,!11,!135} ; [ DW_TAG_arg_variable ] [a] [line 10]\n!134 =!{!"0x2e\00init_array\00init_array\00\0010\001\001\000\000\00256\001\0010",!1,!11,!136, null, null, null, null,!138} ; [ DW_TAG_subprogram ] [line 10] [local] [def] [scope 10] [init_array]\n!135 =!{!"0xf\00\000\0064\0064\000\000", null, null,!12} ; [ DW_TAG_pointer_type ] [line 0, size 64, align 64, offset 0] [from ]\n!136 =!{!"0x15\00\000\000\000\000\000\000", null, null, null,!137, null, null, null} ; [ DW_TAG_subroutine_type ] [line 0, size 0, align 0, offset 0] [from ]\n!137 =!{null,!12,!12,!12}\n!138 =!{!139,!140,!141,!142,!143}\n!139 =!{!"0x101\00a\0016777226\000",!134,!11,!135} ; [ DW_TAG_arg_variable ] [a] [line 10]\n!140 =!{!"0x101\00b\00335544
 DRB080_func_arg_orig_yes\n\nsubroutine f1(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp atomic\n    i = i + 1\nend subroutine f1\n",\n"Translate this Fortran code to C++: \nprogram DRB080_func_arg_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: i\n\n    i = 0\n\n   !$omp parallel\n    call f1(i)\n   !$omp end parallel\n\n    print*,"i = ",i\nend program DRB080_func_arg_orig_yes\n\nsubroutine f1(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp atomic\n    i = i + 1\nend subroutine f1\n",\n"Translate this Fortran code to C++: \nprogram DRB080_func_arg_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: i\n\n    i = 0\n\n   !$omp parallel\n    call f1(i)\n   !$omp end parallel\n\n    print*,"i = ",i\nend program DRB080_func_arg_orig_yes\n\nsubroutine f1(i)\n    use omp_lib\n    implicit none\n    integer :: i\n\n   !$omp atomic\n    i = i + 1\nend subroutine f1\n",\n"Translate this Fortran code to C++: \nprogram DRB080_func_arg_orig_yes\n    use omp_lib\n    implicit none\n\n    integer :: i\n\n    i = 0\n\n   !$omp parallel\n    call f1(i)\n   !$omp end parallel\n\n    print*,"i = ",i\nend program DRB080_func_arg_orig_yes\n\nsubroutine f1(i)\n   
 DRB084_threadprivatemissing_orig_yes\n\nsubroutine foo(i)\n    use omp_lib\n    use DRB084\n    implicit none\n    integer (kind=8) :: i\n\n   !$omp threadprivate(sum0)\n    sum0 = sum0 + i\nend subroutine foo\n\nmodule DRB084\n    implicit none\n    integer (kind=8) :: sum0, sum1\nend module DRB084\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 DRB123_taskundeferred_orig_yes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 subroutine pintgr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 print_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 kernel_2mm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_seidel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 kernel_trmm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
 init_array\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
 init_array\n\nsubroutine print_array(n, a)\nimplicit none\n\nDATA_TYPE, dimension(n) :: a\ninteger :: n\ninteger :: i\n\ndo i = 1, n\nwrite(*, '(f0.2,x)', advance='no') a(i)\nend do\nwrite(*,*)\nend subroutine print_array\n\nsubroutine kernel_mvt(n, a, b, c, d)\nimplicit none\n\nDATA_TYPE, dimension(n) :: a\nDATA_TYPE, dimension(n) :: b\nDATA_TYPE, dimension(n) :: c\nDATA_TYPE, dimension(n) :: d\ninteger :: n\ninteger :: i\n\ndo i = 1, n\na(i) = a(i) + b(i) * c(i)\nd(i) = d(i) + a(i) * b(i)\nend do\nend subroutine kernel_mvt\n\nprogram main\nimplicit none\n\ninteger :: n = N\nDATA_TYPE, dimension(:), allocatable :: a\nDATA_TYPE, dimension(:), allocatable :: b\nDATA_TYPE, dimension(:), allocatable :: c\nDATA_TYPE, dimension(:), allocatable :: d\ninteger :: i\n\nallocate(a(n))\nallocate(b(n))\nallocate(c(n))\nallocate(d(n))\n\ncall init_array(n, a, b)\ncall init_array(n, c, d)\n\ncall kernel_mvt(n, a, b, c, d)\n\ncall print_array(n, a)\ncall print_array(n, b)\ncall print_array(n, c)\ncall print_array(n, d)\n\ndeallocate(a)\ndeallocate(b)\ndeallocate(c)\ndeallocate(d)\n\nend program main\n\n", "language": "c++", "name": "mvt.cpp"}, "mvt.c": {"code": "#include <stdio.h>\n#include <stdlib.h>\n
 kernel_bicg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
