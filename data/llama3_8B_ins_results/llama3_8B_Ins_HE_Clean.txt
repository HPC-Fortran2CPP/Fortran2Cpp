\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool hasCloseElements(const std::vector<double>& numbers, double threshold) {\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        for (size_t j = i + 1; j < numbers.size(); ++j) {\n            if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<double> a;\n    int n;\n\n    // Test case 1\n    a = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    n = a.size();\n    if (!hasCloseElements(a, 0.3)) {\n        std::cout << "Test case 1 failed: assertion failed" << std::endl;\n        return 1;\n    }\n    if (hasCloseElements(a, 0.05)) {\n        std::cout << "Test case 1 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2\n    a = {1.0, 2.0, 5.9, 4.0, 5.0};\n    n = a.size();\n    if (!hasCloseElements(a, 0.95)) {\n        std::cout << "Test case 2 failed: assertion failed" << std::endl;\n        return 1;\n    }\n    if (hasCloseElements(a, 0.8)) {\n        std::cout << "Test case 2 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 3\n    a = {1.0, 2.0, 3.0, 4.0, 5.0};\n    n = a.size();\n    if (!hasCloseElements(a, 2.0)) {\n        std::cout << "Test case 3 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 4\n    a = {1.1, 2.2, 3.1, 4.1, 5.1};\n    n = a.size();\n    if (!hasCloseElements(a, 1.0)) {\n        std::cout << "Test case 4 failed: assertion failed" << std::endl;\n        return 1;\n    }\n    if (hasCloseElements(a, 0.5)) {\n        std::cout << "Test case 4 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool below_zero(const vector<int>& operations) {\n    int num = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        num += operations[i];\n        if (num < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    vector<int> operations;\n\n    // Test cases\n    operations.clear();\n    if (below_zero(operations)) {\n        cout << "Test case 1 failed" << endl;\n        return 1;\n    }\n\n    operations.clear();\n    operations = {1, 2, -3, 1, 2, -3};\n    if (!below_zero(operations)) {\n        cout << "Test case 2 failed" << endl;\n        return 1;\n    }\n\n    operations.clear();\n    operations = {1, 2, -4, 5, 6};\n    if (!below_zero(operations)) {\n        cout << "Test case 3 failed" << endl;\n        return 1;\n    }\n\n    operations.clear();\n    operations = {1, -1, 2, -2, 5, -5, 4, -4};\n    if (!below_zero(operations)) {\n        cout << "Test case 4 failed" << endl;\n        return 1;\n    }\n\n    operations.clear();\n    operations = {1, -1, 2, -2, 5, -5, 4, -5};\n    if (below_zero(operations)) {\n        cout << "Test case 5 failed" << endl;\n        return 1;\n    }\n\n    operations.clear();\n    operations = {1, -2, 2, -2, 5, -5, 4, -4};\n    if (below_zero(operations)) {\n        cout << "Test case 6 failed" << endl;\n        return 1;\n    }\n\n    cout << "All test cases passed" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <cmath>\n\ndouble meanAbsoluteDeviation(const std::vector<double>& numbers) {\n    double sum = 0.0;\n    double avg = 0.0;\n    double msum = 0.0;\n\n    for (double num : numbers) {\n        sum += num;\n    }\n    avg = sum / numbers.size();\n\n    for (double num : numbers) {\n        msum += std::abs(num - avg);\n    }\n    return msum / numbers.size();\n}\n\nint main() {\n    std::vector<double> testCases = {1.0, 2.0, 3.0};\n    double result = meanAbsoluteDeviation(testCases);\n    if (std::abs(result - 2.0/3.0) > 1e-4) {\n        std::cout << "Assertion failed for test case 1" << std::endl;\n        return 1;\n    }\n\n    testCases = {1.0, 2.0, 3.0, 4.0};\n    result = meanAbsoluteDeviation(testCases);\n    if (std::abs(result - 1.0) > 1e-4) {\n        std::cout << "Assertion failed for test case 2" << std::endl;\n        return 1;\n    }\n\n    testCases = {1.0, 2.0, 3.0, 4.0, 5.0};\n    result = meanAbsoluteDeviation(testCases);\n    if (std::abs(result - 6.0/5.0) > 1e-4) {\n        std::cout << "Assertion failed for test case 3" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> intersperse(const vector<int>& numbers, int delimeter) {\n    vector<int> result;\n    for (int num : numbers) {\n        result.push_back(num);\n        result.push_back(delimeter);\n    }\n    return result;\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> numbers, result, expected;\n\n    // Test case 1\n    numbers.clear();\n    expected.clear();\n    result = intersperse(numbers, 7);\n    assert(issame(result, expected));\n\n    // Test case 2\n    numbers.clear();\n    numbers = {5, 6, 3, 2};\n    expected.clear();\n    expected = {5, 8, 6, 8, 3, 8, 2};\n    result = intersperse(numbers, 8);\n    assert(issame(result, expected));\n\n    // Test case 3\n    numbers.clear();\n    numbers = {2, 2, 2};\n    expected.clear();\n    expected = {2, 2, 2, 2, 2};\n    result = intersperse(numbers, 2);\n    assert(issame(result, expected));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid parseNestedParens(const string& parenString, vector<int>& allLevels) {\n    int level = 0;\n    int maxLevel = 0;\n    int n = parenString.length();\n    vector<int> tempLevels(n);\n    tempLevels.assign(n, 0);\n\n    for (int i = 0; i < n; i++) {\n        char chr = parenString[i];\n        if (chr == '(') {\n            level++;\n            if (level > maxLevel) maxLevel = level;\n        } else if (chr == ')') {\n            level--;\n            if (level == 0) {\n                tempLevels[i] = maxLevel;\n                maxLevel = 0;\n            }\n        }\n    }\n\n    // Filter out zeros and allocate the result array\n    vector<int> allLevelsTemp;\n    for (int i = 0; i < n; i++) {\n        if (tempLevels[i]!= 0) {\n            allLevelsTemp.push_back(tempLevels[i]);\n        }\n    }\n    allLevels = allLevelsTemp;\n}\n\nbool isSame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    string parenString1 = "(()()) ((())) () ((())()())";\n    vector<int> result1;\n    parseNestedParens(parenString1, result1);\n    vector<int> expected1 = {2, 3, 1, 3};\n    if (!isSame(result1, expected1)) {\n        cout << "Assertion failed for test case 1" << endl;\n        return 1;\n    }\n\n    string parenString2 = "() (()) ((())) (((()))";\n    vector<int> result2;\n    parseNestedParens(parenString2, result2);\n    vector<int> expected2 = {1, 2, 3, 4};\n    if (!isSame(result2, expected2)) {\n        cout << "Assertion failed for test case 2" << endl;\n        return 1;\n    }\n\n    string parenString3 = "(()(())((()))";\n    vector<int> result3;\n    parseNestedParens(parenString3, result3);\n    vector<int> expected3 = {4};\n    if (!isSame(result3, expected3)) {\n        cout << "Assertion failed for test case 3" << endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> sum_product(const std::vector<int>& numbers) {\n    int sum = 0;\n    int product = 1;\n\n    for (int num : numbers) {\n        sum += num;\n        product *= num;\n    }\n\n    return {sum, product};\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); ++i) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::vector<int> result;\n    std::vector<int> empty_array;\n    std::vector<int> array1 = {1, 1, 1};\n    std::vector<int> array2 = {100, 0};\n    std::vector<int> array3 = {3, 5, 7};\n    std::vector<int> array4 = {10};\n\n    // Allocate empty array with size 0\n    empty_array.clear();\n\n    // Test cases\n    result = sum_product(empty_array);\n    if (!issame(result, std::vector<int>{0, 1})) {\n        std::cout << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    result = sum_product(array1);\n    if (!issame(result, std::vector<int>{3, 1})) {\n        std::cout << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    result = sum_product(array2);\n    if (!issame(result, std::vector<int>{100, 0})) {\n        std::cout << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    result = sum_product(array3);\n    if (!issame(result, std::vector<int>{15, 105})) {\n        std::cout << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    result = sum_product(array4);\n    if (!issame(result, std::vector<int>{10, 10})) {\n        std::cout << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid rollingMax(vector<int>& numbers, vector<int>& result) {\n    int max = 0;\n    result.resize(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        result[i] = max;\n    }\n}\n\nbool isSame(vector<int>& a, vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> numbers, result, expected;\n\n    // Test case 1\n    numbers.clear();\n    expected.clear();\n    rollingMax(numbers, result);\n    assert(isSame(result, expected));\n\n    // Test case 2\n    numbers.clear();\n    numbers.resize(4);\n    numbers = {1, 2, 3, 4};\n    expected.clear();\n    expected.resize(4);\n    expected = {1, 2, 3, 4};\n    rollingMax(numbers, result);\n    assert(isSame(result, expected));\n\n    // Test case 3\n    numbers.clear();\n    numbers.resize(4);\n    numbers = {4, 3, 2, 1};\n    expected.clear();\n    expected.resize(4);\n    expected = {4, 4, 4, 4};\n    rollingMax(numbers, result);\n    assert(isSame(result, expected));\n\n    // Test case 4\n    numbers.clear();\n    numbers.resize(5);\n    numbers = {3, 2, 3, 100, 3};\n    expected.clear();\n    expected.resize(5);\n    expected = {3, 3, 3, 100, 100};\n    rollingMax(numbers, result);\n    assert(isSame(result, expected));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool isPalindrome(const std::string& str) {\n    std::string reversedStr = str;\n    std::reverse(reversedStr.begin(), reversedStr.end());\n    return str == reversedStr;\n}\n\nstd::string makePalindrome(const std::string& str) {\n    for (int i = 1; i <= str.length(); i++) {\n        std::string rstr = str.substr(i);\n        if (isPalindrome(rstr)) {\n            std::string nstr = str.substr(0, i - 1);\n            std::string n2str = nstr;\n            std::reverse(n2str.begin(), n2str.end());\n            return str + n2str;\n        }\n    }\n    std::string n2str = str;\n    std::reverse(n2str.begin(), n2str.end());\n    return str + n2str;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cout << "Assertion failed" << std::endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(isPalindrome("") == "");\n    assert(isPalindrome("x") == "x");\n    assert(isPalindrome("xyz") == "xyzyx");\n    assert(isPalindrome("xyx") == "xyx");\n    assert(isPalindrome("jerry") == "jerryrrej");\n\n    std::cout << makePalindrome("xyz") << std::endl;\n    std::cout << makePalindrome("xyx") << std::endl;\n    std::cout << makePalindrome("jerry") << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string string_xor(const std::string& a, const std::string& b) {\n    std::string output;\n    size_t len_a = a.length();\n    size_t len_b = b.length();\n    size_t min_len = std::min(len_a, len_b);\n\n    for (size_t i = 0; i < min_len; ++i) {\n        if (a[i] == b[i]) {\n            output += '0';\n        } else {\n            output += '1';\n        }\n    }\n\n    if (len_a > len_b) {\n        output += a.substr(min_len);\n    } else if (len_b > len_a) {\n        output += b.substr(min_len);\n    }\n\n    return output;\n}\n\nint main() {\n    if (string_xor("111000", "101010")!= "010010") {\n        std::cout << "Assertion failed: string_xor('111000', '101010') /= '010010'" << std::endl;\n        return 1;\n    }\n\n    if (string_xor("1", "1")!= "0") {\n        std::cout << "Assertion failed: string_xor('1', '1') /= '0'" << std::endl;\n        return 1;\n    }\n\n    if (string_xor("0101", "0000")!= "0101") {\n        std::cout << "Assertion failed: string_xor('0101', '0000') /= '0101'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nstd::string longest(const std::vector<std::string>& strings) {\n    std::string out = "";\n    for (const auto& s : strings) {\n        if (s.length() > out.length()) {\n            out = s;\n        }\n    }\n    return out;\n}\n\nint main() {\n    std::vector<std::string> strings;\n\n    // Test case 1: Empty array\n    strings.clear();\n    std::string result = longest(strings);\n    if (!result.empty()) {\n        std::cerr << "Test case 1 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2: Array with single character strings\n    strings.clear();\n    strings.push_back("x");\n    strings.push_back("y");\n    strings.push_back("z");\n    result = longest(strings);\n    if (result!= "x") {\n        std::cerr << "Test case 2 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 3: Array with varying length strings\n    strings.clear();\n    strings.push_back("x       ");\n    strings.push_back("yyy     ");\n    strings.push_back("zzzz    ");\n    strings.push_back("www     ");\n    strings.push_back("kkkk    ");\n    strings.push_back("abc     ");\n    result = longest(strings);\n    if (result!= "zzzz    ") {\n        std::cerr << "Test case 3 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint greatestCommonDivisor(int a, int b) {\n    int temp_a = a;\n    int temp_b = b;\n\n    while (true) {\n        if (temp_a < temp_b) {\n            int m = temp_a;\n            temp_a = temp_b;\n            temp_b = m;\n        }\n        temp_a = temp_a % temp_b;\n        if (temp_a == 0) {\n            return temp_b;\n        }\n    }\n}\n\nvoid assert(bool condition, string message) {\n    if (!condition) {\n        cout << message << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(greatestCommonDivisor(3, 7) == 1, "Assertion failed: gcd(3, 7) == 1");\n    assert(greatestCommonDivisor(10, 15) == 5, "Assertion failed: gcd(10, 15) == 5");\n    assert(greatestCommonDivisor(49, 14) == 7, "Assertion failed: gcd(49, 14) == 7");\n    assert(greatestCommonDivisor(144, 60) == 12, "Assertion failed: gcd(144, 60) == 12");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid allPrefixes(const string& str, vector<string>& out) {\n    if (str.empty()) {\n        out.push_back("");\n        return;\n    }\n\n    out.resize(str.size());\n    string current = "";\n    for (int i = 0; i < str.size(); i++) {\n        current += str[i];\n        out[i] = current;\n    }\n}\n\nbool isSame(const vector<string>& a, const vector<string>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    string str;\n    vector<string> prefixes;\n    vector<string> expected;\n\n    // Test cases\n    str = "";\n    allPrefixes(str, prefixes);\n    expected.clear();\n    expected.push_back("");\n    assert(isSame(prefixes, expected));\n\n    str = "asdfgh";\n    expected.clear();\n    expected.resize(6);\n    expected[0] = "a     ";\n    expected[1] = "as    ";\n    expected[2] = "asd   ";\n    expected[3] = "asdf  ";\n    expected[4] = "asdfg ";\n    expected[5] = "asdfgh";\n    allPrefixes(str, prefixes);\n    assert(isSame(prefixes, expected));\n\n    str = "WWW";\n    expected.clear();\n    expected.resize(3);\n    expected[0] = "W  ";\n    expected[1] = "WW ";\n    expected[2] = "WWW";\n    allPrefixes(str, prefixes);\n    assert(isSame(prefixes, expected));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <sstream>\n\nstd::string string_sequence(int n) {\n    std::stringstream out;\n    out << "0";\n    for (int i = 1; i <= n; ++i) {\n        std::stringstream temp;\n        temp << i;\n        out << " " << temp.str();\n    }\n    return out.str();\n}\n\nint main() {\n    std::string result;\n\n    // Test cases\n    result = string_sequence(0);\n    if (result!= "0") {\n        std::cerr << "Assertion failed: string_sequence(0) == '0'" << std::endl;\n        return 1;\n    }\n\n    result = string_sequence(3);\n    if (result!= "0 1 2 3") {\n        std::cerr << "Assertion failed: string_sequence(3) == '0 1 2 3'" << std::endl;\n        return 1;\n    }\n\n    result = string_sequence(10);\n    if (result!= "0 1 2 3 4 5 6 7 8 9 10") {\n        std::cerr << "Assertion failed: string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cctype>\n\nint countDistinctCharacters(const std::string& str) {\n    std::string lowerStr = toLower(str);\n    std::vector<char> distinct;\n\n    for (char c : lowerStr) {\n        bool isin = false;\n        for (char d : distinct) {\n            if (d == c) {\n                isin = true;\n                break;\n            }\n        }\n        if (!isin) {\n            distinct.push_back(c);\n        }\n    }\n\n    return distinct.size();\n}\n\nstd::string toLower(const std::string& str) {\n    std::string lowerStr = str;\n    for (char& c : lowerStr) {\n        if (std::isupper(c)) {\n            c = std::tolower(c);\n        }\n    }\n    return lowerStr;\n}\n\nvoid addToArray(std::vector<char>& array, char element) {\n    array.push_back(element);\n}\n\nint main() {\n    // Test cases\n    std::string str = "";\n    int result = countDistinctCharacters(str);\n    if (result!= 0) {\n        std::cout << "Assertion failed: countDistinctCharacters('') == 0" << std::endl;\n        return 1;\n    }\n\n    str = "abcde";\n    result = countDistinctCharacters(str);\n    if (result!= 5) {\n        std::cout << "Assertion failed: countDistinctCharacters('abcde') == 5" << std::endl;\n        return 1;\n    }\n\n    str = "abcdecadeCADE";\n    result = countDistinctCharacters(str);\n    if (result!= 5) {\n        std::cout << "Assertion failed: countDistinctCharacters('abcdecadeCADE') == 5" << std::endl;\n        return 1;\n    }\n\n    str = "aaaaAAAAaaaa";\n    result = countDistinctCharacters(str);\n    if (result!= 1) {\n        std::cout << "Assertion failed: countDistinctCharacters('aaaaAAAAaaaa') == 1" << std::endl;\n        return 1;\n    }\n\n    str = "Jerry jERRY JeRRRY";\n    result = countDistinctCharacters(str);\n    if (result!= 5) {\n        std::cout << "Assertion failed: countDistinctCharacters('Jerry jERRY JeRRRY') == 5" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> parse_music(const string& music_string) {\n    vector<int> out;\n    string current, local_music_string = music_string + " ";\n    int len_music = local_music_string.length();\n\n    current = "";\n    for (int i = 0; i < len_music; i++) {\n        if (local_music_string[i] =='') {\n            if (current == "o") {\n                out.push_back(4);\n            } else if (current == "o|") {\n                out.push_back(2);\n            } else if (current == ".|") {\n                out.push_back(1);\n            }\n            current = "";\n        } else {\n            current += local_music_string[i];\n        }\n    }\n    cout << "Parsed music string: ";\n    for (int i : out) {\n        cout << i << " ";\n    }\n    cout << endl;\n    return out;\n}\n\nvoid append(vector<int>& array, int value) {\n    array.push_back(value);\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    cout << "Comparing arrays: " << a << " " << b << " Result: " << true << endl;\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(issame(parse_music(""), vector<int>()));\n    assert(issame(parse_music("o o o o"), vector<int>({4, 4, 4, 4})));\n    assert(issame(parse_music(".|.|.|.|"), vector<int>({1, 1, 1, 1})));\n    assert(issame(parse_music("o| o|.|.| o o o o"), vector<int>({2, 2, 1, 1, 4, 4, 4, 4})));\n    assert(issame(parse_music("o|.| o|.| o o| o o|"), vector<int>({2, 1, 2, 1, 4, 2, 4, 2})));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nint howManyTimes(const std::string& str, const std::string& substring) {\n    int out = 0;\n    int strLen = str.length();\n    int subLen = substring.length();\n\n    if (strLen == 0) {\n        return 0;\n    }\n\n    for (int i = 0; i <= strLen - subLen; ++i) {\n        if (str.substr(i, subLen) == substring) {\n            out++;\n        }\n    }\n\n    return out;\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    result = howManyTimes("", "x");\n    if (result!= 0) {\n        std::cout << "Assertion failed: howManyTimes('', 'x') == 0" << std::endl;\n        return 1;\n    }\n\n    result = howManyTimes("xyxyxyx", "x");\n    if (result!= 4) {\n        std::cout << "Assertion failed: howManyTimes('xyxyxyx', 'x') == 4" << std::endl;\n        return 1;\n    }\n\n    result = howManyTimes("cacacacac", "cac");\n    if (result!= 4) {\n        std::cout << "Assertion failed: howManyTimes('cacacacac', 'cac') == 4" << std::endl;\n        return 1;\n    }\n\n    result = howManyTimes("john doe", "john");\n    if (result!= 1) {\n        std::cout << "Assertion failed: howManyTimes('john doe', 'john') == 1" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nstd::pair<double, double> findClosestElements(const vector<double>& numbers) {\n    double minDiff = numeric_limits<double>::max();\n    pair<double, double> closestElements = make_pair(0.0, 0.0);\n\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            double diff = abs(numbers[i] - numbers[j]);\n            if (diff < minDiff) {\n                closestElements = make_pair(numbers[i], numbers[j]);\n                minDiff = diff;\n            }\n        }\n    }\n\n    if (closestElements.first > closestElements.second) {\n        swap(closestElements.first, closestElements.second);\n    }\n\n    return closestElements;\n}\n\nbool isSame(const vector<double>& a, const vector<double>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (abs(a[i] - b[i]) > 1e-4) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    vector<double> test1 = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    vector<double> test2 = {1.0, 2.0, 5.9, 4.0, 5.0};\n    vector<double> test3 = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    vector<double> test4 = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    vector<double> test5 = {1.1, 2.2, 3.1, 4.1, 5.1};\n\n    pair<double, double> result;\n    result = findClosestElements(test1);\n    if (!isSame({3.9, 4.0}, {result.first, result.second})) {\n        cout << "Assertion failed for test1" << endl;\n        return 1;\n    }\n\n    result = findClosestElements(test2);\n    if (!isSame({5.0, 5.9}, {result.first, result.second})) {\n        cout << "Assertion failed for test2" << endl;\n        return 1;\n    }\n\n    result = findClosestElements(test3);\n    if (!isSame({2.0, 2.2}, {result.first, result.second})) {\n        cout << "Assertion failed for test3" << endl;\n        return 1;\n    }\n\n    result = findClosestElements(test4);\n    if (!isSame({2.0, 2.0}, {result.first, result.second})) {\n        cout << "Assertion failed for test4" << endl;\n        return 1;\n    }\n\n    result = findClosestElements(test5);\n    if (!isSame({2.2, 3.1}, {result.first, result.second})) {\n        cout << "Assertion failed for test5" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<double> rescale_to_unit(const vector<double>& numbers) {\n    double min_val = *min_element(numbers.begin(), numbers.end());\n    double max_val = *max_element(numbers.begin(), numbers.end());\n\n    vector<double> rescaled(numbers.size());\n    for (int i = 0; i < numbers.size(); i++) {\n        rescaled[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n    return rescaled;\n}\n\nbool issame(const vector<double>& a, const vector<double>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (abs(a[i] - b[i]) > 1.0e-4) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<double> numbers1 = {2.0, 49.9};\n    vector<double> result1 = rescale_to_unit(numbers1);\n    if (!issame(result1, vector<double>{0.0, 1.0})) {\n        cout << "Assertion failed for test case 1" << endl;\n        return 1;\n    }\n\n    vector<double> numbers2 = {100.0, 49.9};\n    vector<double> result2 = rescale_to_unit(numbers2);\n    if (!issame(result2, vector<double>{1.0, 0.0})) {\n        cout << "Assertion failed for test case 2" << endl;\n        return 1;\n    }\n\n    vector<double> numbers3 = {1.0, 2.0, 3.0, 4.0, 5.0};\n    vector<double> result3 = rescale_to_unit(numbers3);\n    if (!issame(result3, vector<double>{0.0, 0.25, 0.5, 0.75, 1.0})) {\n        cout << "Assertion failed for test case 3" << endl;\n        return 1;\n    }\n\n    vector<double> numbers4 = {2.0, 1.0, 5.0, 3.0, 4.0};\n    vector<double> result4 = rescale_to_unit(numbers4);\n    if (!issame(result4, vector<double>{0.25, 0.0, 1.0, 0.5, 0.75})) {\n        cout << "Assertion failed for test case 4" << endl;\n        return 1;\n    }\n\n    vector<double> numbers5 = {12.0, 11.0, 15.0, 13.0, 14.0};\n    vector<double> result5 = rescale_to_unit(numbers5);\n    if (!issame(result5, vector<double>{0.25, 0.0, 1.0, 0.5, 0.75})) {\n        cout << "Assertion failed for test case 5" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed successfully" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nint main() {\n    // Main program logic\n    runAssertions();\n\n    return 0;\n}\n\n// Function to get the length of a string\nint strlen(const std::string& str) {\n    return str.size();\n}\n\nvoid runAssertions() {\n    // Assertions\n    if (strlen("")!= 0) {\n        std::cerr << "Assertion failed: strlen(\"\") == 0" << std::endl;\n        return 1;\n    }\n\n    if (strlen("x")!= 1) {\n        std::cerr << "Assertion failed: strlen(\"x\") == 1" << std::endl;\n        return 1;\n    }\n\n    if (strlen("asdasnakj")!= 9) {\n        std::cerr << "Assertion failed: strlen(\"asdasnakj\") == 9" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nint largest_divisor(int n) {\n  int i;\n  for (i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0) {\n      return n / i;\n    }\n  }\n  return 1;\n}\n\nint main() {\n  int result;\n\n  // Test cases\n  result = largest_divisor(3);\n  if (result!= 1) {\n    std::cerr << "Assertion failed: largest_divisor(3) == 1" << std::endl;\n    return 1;\n  }\n\n  result = largest_divisor(7);\n  if (result!= 1) {\n    std::cerr << "Assertion failed: largest_divisor(7) == 1" << std::endl;\n    return 1;\n  }\n\n  result = largest_divisor(10);\n  if (result!= 5) {\n    std::cerr << "Assertion failed: largest_divisor(10) == 5" << std::endl;\n    return 1;\n  }\n\n  result = largest_divisor(100);\n  if (result!= 50) {\n    std::cerr << "Assertion failed: largest_divisor(100) == 50" << std::endl;\n    return 1;\n  }\n\n  result = largest_divisor(49);\n  if (result!= 7) {\n    std::cerr << "Assertion failed: largest_divisor(49) == 7" << std::endl;\n    return 1;\n  }\n\n  std::cout << "All tests passed." << std::endl;\n  return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid factorize(int n, vector<int>& factors) {\n    int i, m, count = 0;\n    m = n;\n    factors.clear();\n\n    for (i = 2; i <= sqrt(n); i++) {\n        while (m % i == 0) {\n            m /= i;\n            factors.push_back(i);\n            count++;\n        }\n    }\n\n    if (m > 1) {\n        factors.push_back(m);\n        count++;\n    }\n}\n\nvoid append(vector<int>& arr, int value) {\n    arr.push_back(value);\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    vector<int> factors;\n\n    factorize(2, factors);\n    if (!issame(factors, vector<int>{2})) {\n        cout << "Assertion failed for factorize(2)" << endl;\n        return 1;\n    }\n\n    factorize(4, factors);\n    if (!issame(factors, vector<int>{2, 2})) {\n        cout << "Assertion failed for factorize(4)" << endl;\n        return 1;\n    }\n\n    factorize(8, factors);\n    if (!issame(factors, vector<int>{2, 2, 2})) {\n        cout << "Assertion failed for factorize(8)" << endl;\n        return 1;\n    }\n\n    factorize(3 * 19, factors);\n    if (!issame(factors, vector<int>{3, 19})) {\n        cout << "Assertion failed for factorize(3 * 19)" << endl;\n        return 1;\n    }\n\n    factorize(3 * 19 * 3 * 19, factors);\n    if (!issame(factors, vector<int>{3, 3, 19, 19})) {\n        cout << "Assertion failed for factorize(3 * 19 * 3 * 19)" << endl;\n        return 1;\n    }\n\n    factorize(3 * 19 * 3 * 19 * 3 * 19, factors);\n    if (!issame(factors, vector<int>{3, 3, 3, 19, 19, 19})) {\n        cout << "Assertion failed for factorize(3 * 19 * 3 * 19 * 3 * 19)" << endl;\n        return 1;\n    }\n\n    factorize(3 * 19 * 19 * 19, factors);\n    if (!issame(factors, vector<int>{3, 19, 19, 19})) {\n        cout << "Assertion failed for factorize(3 * 19 * 19 * 19)" << endl;\n        return 1;\n    }\n\n    factorize(3 * 2 * 3, factors);\n    if (!issame(factors, vector<int>{2, 3, 3})) {\n        cout << "Assertion failed for factorize(3 * 2 * 3)" << endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> removeDuplicates(vector<int> numbers) {\n    vector<int> out;\n    vector<int> has1;\n    vector<int> has2;\n\n    if (numbers.empty()) return out;\n\n    for (int num : numbers) {\n        bool found = false;\n        for (int i = 0; i < has2.size(); i++) {\n            if (has2[i] == num) {\n                found = true;\n                break;\n            }\n        }\n        if (found) continue;\n\n        found = false;\n        for (int i = 0; i < has1.size(); i++) {\n            if (has1[i] == num) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            has2.push_back(num);\n        } else {\n            has1.push_back(num);\n        }\n    }\n\n    for (int num : numbers) {\n        bool found = false;\n        for (int i = 0; i < has2.size(); i++) {\n            if (has2[i] == num) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) out.push_back(num);\n    }\n\n    return out;\n}\n\nbool isSame(vector<int> a, vector<int> b) {\n    if (a.size()!= b.size()) return false;\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) return false;\n    }\n\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> numbers1 = {1, 2, 3, 4};\n    vector<int> numbers2 = {1, 2, 3, 2, 4, 3, 5};\n    vector<int> numbers3;\n\n    assert(isSame(removeDuplicates(numbers1), numbers1));\n    assert(isSame(removeDuplicates(numbers2), {1, 4, 5}));\n    assert(isSame(removeDuplicates(numbers3), numbers3));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nstd::string flip_case(const std::string& str) {\n    std::string result = "";\n    for (char c : str) {\n        if (std::islower(c)) {\n            result += std::toupper(c);\n        } else if (std::isupper(c)) {\n            result += std::tolower(c);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cout << "Assertion failed" << std::endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(flip_case("") == "");\n    assert(flip_case("Hello!") == "hELLO!");\n    assert(flip_case("These violent delights have violent ends") == "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string concatenate(const std::vector<std::string>& strings) {\n    std::string out;\n    for (const auto& s : strings) {\n        out += s;\n    }\n    return out;\n}\n\nint main() {\n    std::vector<std::string> strings;\n\n    // Test with an empty array\n    strings.clear();\n    std::string result = concatenate(strings);\n    if (!result.empty()) {\n        std::cerr << "Assertion failed: concatenate([]) /= ''" << std::endl;\n        return 1;\n    }\n\n    // Test with an array of strings\n    strings = {"x", "y", "z"};\n    result = concatenate(strings);\n    if (result!= "xyz") {\n        std::cerr << "Assertion failed: concatenate(['x', 'y', 'z']) /= 'xyz'" << std::endl;\n        return 1;\n    }\n\n    // Test with a larger array of strings\n    strings = {"x", "y", "z", "w", "k"};\n    result = concatenate(strings);\n    if (result!= "xyzwk") {\n        std::cerr << "Assertion failed: concatenate(['x', 'y', 'z', 'w', 'k']) /= 'xyzwk'" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> filter_by_prefix(vector<string> strings, string prefix) {\n    vector<string> out;\n    for (const auto& str : strings) {\n        if (str.substr(0, prefix.size()) == prefix) {\n            out.push_back(str);\n        }\n    }\n    return out;\n}\n\nvoid add_to_array(vector<string>& array, const string& element) {\n    array.push_back(element);\n}\n\nbool issame(const vector<string>& a, const vector<string>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid test_cases() {\n    // Test case 1\n    vector<string> strings;\n    string prefix = "john";\n    vector<string> result = filter_by_prefix(strings, prefix);\n    if (!issame(result, strings)) {\n        cout << "Assertion failed: filter_by_prefix({}, 'john')" << endl;\n        exit(1);\n    }\n\n    // Test case 2\n    strings = {"xxx     ", "asd     ", "xxy     ", "john doe", "xxxAAA  ", "xxx     "};\n    prefix = "xxx";\n    result = filter_by_prefix(strings, prefix);\n    vector<string> expected = {"xxx     ", "xxxAAA  ", "xxx     "};\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: filter_by_prefix({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx')" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    test_cases();\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<double> get_positive(const vector<double>& l) {\n    vector<double> out;\n    for (double val : l) {\n        if (val > 0.0) {\n            out.push_back(val);\n        }\n    }\n    return out;\n}\n\nbool issame(const vector<double>& a, const vector<double>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (abs(a[i] - b[i]) > 1.0e-4) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<double> input, result, expected;\n\n    // Test case 1\n    input = {-1.0, -2.0, 4.0, 5.0, 6.0};\n    expected = {4.0, 5.0, 6.0};\n    result = get_positive(input);\n    if (!issame(result, expected)) {\n        cout << "Test case 1: assertion failed" << endl;\n        return 1;\n    }\n\n    // Test case 2\n    input = {5.0, 3.0, -5.0, 2.0, 3.0, 3.0, 9.0, 0.0, 123.0, 1.0, -10.0};\n    expected = {5.0, 3.0, 2.0, 3.0, 3.0, 9.0, 123.0, 1.0};\n    result = get_positive(input);\n    if (!issame(result, expected)) {\n        cout << "Test case 2: assertion failed" << endl;\n        return 1;\n    }\n\n    // Test case 3\n    input = {-1.0, -2.0};\n    expected.clear();\n    result = get_positive(input);\n    if (!issame(result, expected)) {\n        cout << "Test case 3: assertion failed" << endl;\n        return 1;\n    }\n\n    // Test case 4\n    input.clear();\n    expected.clear();\n    input.resize(0);\n    expected.resize(0);\n    result = get_positive(input);\n    if (!issame(result, expected)) {\n        cout << "Test case 4: assertion failed" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nbool isPrime(int n) {\n    if (n < 2) {\n        return false;\n    }\n\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    // Assertions to test the isPrime function\n    if (!isPrime(6)) {\n        std::cout << "Assertion failed: isPrime(6) == false" << std::endl;\n        return 1;\n    }\n\n    if (isPrime(101)) {\n        std::cout << "Assertion failed: isPrime(101) == true" << std::endl;\n        return 1;\n    }\n\n    if (!isPrime(11)) {\n        std::cout << "Assertion failed: isPrime(11) == true" << std::endl;\n        return 1;\n    }\n\n    if (!isPrime(13441)) {\n        std::cout << "Assertion failed: isPrime(13441) == true" << std::endl;\n        return 1;\n    }\n\n    if (!isPrime(61)) {\n        std::cout << "Assertion failed: isPrime(61) == true" << std::endl;\n        return 1;\n    }\n\n    if (isPrime(4)) {\n        std::cout << "Assertion failed: isPrime(4) == false" << std::endl;\n        return 1;\n    }\n\n    if (isPrime(1)) {\n        std::cout << "Assertion failed: isPrime(1) == false" << std::endl;\n        return 1;\n    }\n\n    if (isPrime(5)) {\n        std::cout << "Assertion failed: isPrime(5) == true" << std::endl;\n        return 1;\n    }\n\n    if (isPrime(11)) {\n        std::cout << "Assertion failed: isPrime(11) == true" << std::endl;\n        return 1;\n    }\n\n    if (isPrime(17)) {\n        std::cout << "Assertion failed: isPrime(17) == true" << std::endl;\n        return 1;\n    }\n\n    if (!isPrime(5 * 17)) {\n        std::cout << "Assertion failed: isPrime(5 * 17) == false" << std::endl;\n        return 1;\n    }\n\n    if (!isPrime(11 * 7)) {\n        std::cout << "Assertion failed: isPrime(11 * 7) == false" << std::endl;\n        return 1;\n    }\n\n    if (!isPrime(13441 * 19)) {\n        std::cout << "Assertion failed: isPrime(13441 * 19) == false" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <random>\n#include <cmath>\n\nusing namespace std;\n\ndouble poly(const vector<double>& xs, int n, double x) {\n    double sum = 0.0;\n    for (int i = 1; i <= n; ++i) {\n        sum += xs[i - 1] * pow(x, i - 1);\n    }\n    return sum;\n}\n\ndouble find_zero(const vector<double>& xs, int n) {\n    double ans = 0.0;\n    double value = poly(xs, n, ans);\n    while (abs(value) > 1e-6) {\n        double driv = 0.0;\n        for (int i = 2; i <= n; ++i) {\n            driv += xs[i - 1] * (i - 1) * pow(ans, i - 2);\n        }\n        ans = ans - value / driv;\n        value = poly(xs, n, ans);\n    }\n    return ans;\n}\n\nint main() {\n    random_device rd;\n    mt19937 gen(rd());\n    uniform_real_distribution<double> dis(0, 1);\n\n    for (int i = 0; i < 100; ++i) {\n        int ncoeff = 2 * (1 + int(dis(gen) * 4));\n        vector<double> coeffs(ncoeff);\n\n        for (int j = 0; j < ncoeff; ++j) {\n            coeffs[j] = -10 + int(dis(gen) * 21);\n            if (coeffs[j] == 0) coeffs[j] = 1;\n        }\n\n        double solution = find_zero(coeffs, ncoeff);\n        if (abs(poly(coeffs, ncoeff, solution)) >= 1e-3) {\n            cout << "Assertion failed: abs(poly(coeffs, solution)) < 1e-3" << endl;\n            return 1;\n        }\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    vector<int> third, out;\n    int i, n, temp;\n\n    n = l.size();\n    third.resize((n + 2) / 3);\n    out.resize(n);\n\n    // Extract every third element\n    for (i = 0; i < third.size(); i++) {\n        third[i] = l[(i - 1) * 3 + 1];\n    }\n\n    // Sort the third array\n    sort(third.begin(), third.end());\n\n    // Reconstruct the output array\n    for (i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n            out[i] = third[(i - 1) / 3 + 1];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    return out;\n}\n\nbool issame(vector<int> a, vector<int> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nvoid run_tests() {\n    assert(issame(sort_third({1, 2, 3}), sort_third({1, 2, 3})));\n    assert(issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert(issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert(issame(sort_third({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5}));\n    assert(issame(sort_third({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5}));\n    assert(issame(sort_third({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5}));\n    assert(issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n\nint main() {\n    run_tests();\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool issame(vector<int>& a, vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> unique(vector<int>& l) {\n    vector<int> out;\n    vector<int> temp(l.begin(), l.end());\n    int count = 0;\n\n    for (int i = 0; i < temp.size(); i++) {\n        bool found = false;\n        for (int j = 0; j < count; j++) {\n            if (temp[i] == out[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            out.push_back(temp[i]);\n            count++;\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}\n\nint main() {\n    vector<int> input = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    vector<int> expected = {0, 2, 3, 5, 9, 123};\n\n    vector<int> result = unique(input);\n\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: result is not as expected" << endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ndouble max_element(const std::vector<double>& arr) {\n    double max_val = -10000.0;\n    for (double val : arr) {\n        if (max_val < val) {\n            max_val = val;\n        }\n    }\n    return max_val;\n}\n\nint main() {\n    std::vector<double> arr;\n\n    // Test case 1\n    arr = {1.0, 2.0, 3.0};\n    double result = max_element(arr);\n    if (std::abs(result - 3.0) > 1e-4) {\n        std::cout << "Test case 1: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2\n    arr = {5.0, 3.0, -5.0, 2.0, -3.0, 3.0, 9.0, 0.0, 124.0, 1.0, -10.0};\n    result = max_element(arr);\n    if (std::abs(result - 124.0) > 1e-4) {\n        std::cout << "Test case 2: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        if ((i % 11 == 0 || i % 13 == 0) && (i / 10 == 7 || i % 10 == 7)) {\n            while (i > 0) {\n                if (i % 10 == 7) count++;\n                i /= 10;\n            }\n        }\n    }\n    return count;\n}\n\nvoid assert(bool condition, std::string message) {\n    if (!condition) {\n        std::cout << message << std::endl;\n        exit(1);\n    }\n}\n\nint main() {\n    int result;\n\n    // Main program logic\n    result = fizz_buzz(50);\n    assert(result == 0, "fizz_buzz(50) == 0: assertion failed");\n\n    result = fizz_buzz(78);\n    assert(result == 2, "fizz_buzz(78) == 2: assertion failed");\n\n    result = fizz_buzz(79);\n    assert(result == 3, "fizz_buzz(79) == 3: assertion failed");\n\n    result = fizz_buzz(100);\n    assert(result == 3, "fizz_buzz(100) == 3: assertion failed");\n\n    result = fizz_buzz(200);\n    assert(result == 6, "fizz_buzz(200) == 6: assertion failed");\n\n    result = fizz_buzz(4000);\n    assert(result == 192, "fizz_buzz(4000) == 192: assertion failed");\n\n    result = fizz_buzz(10000);\n    assert(result == 639, "fizz_buzz(10000) == 639: assertion failed");\n\n    result = fizz_buzz(100000);\n    assert(result == 8026, "fizz_buzz(100000) == 8026: assertion failed");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<double> sort_even(vector<double> l) {\n    vector<double> out(l.size());\n    vector<double> even((l.size() + 1) / 2);\n\n    for (int i = 0; i < (l.size() + 1) / 2; i++) {\n        even[i] = l[2 * i - 1];\n    }\n\n    sort(even.begin(), even.end());\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 1) {\n            out[i] = even[(i + 1) / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    return out;\n}\n\nbool issame(vector<double> a, vector<double> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (abs(a[i] - b[i]) > 1e-4) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid run_tests() {\n    vector<double> l, expected, result;\n\n    // Test case 1\n    l = {1.0, 2.0, 3.0};\n    expected = {1.0, 2.0, 3.0};\n    result = sort_even(l);\n    if (!issame(result, expected)) {\n        cout << "Test case 1 failed" << endl;\n        return;\n    }\n\n    // Test case 2\n    l = {5.0, 3.0, -5.0, 2.0, -3.0, 3.0, 9.0, 0.0, 123.0, 1.0, -10.0};\n    expected = {-10.0, 3.0, -5.0, 2.0, -3.0, 3.0, 5.0, 0.0, 9.0, 1.0, 123.0};\n    result = sort_even(l);\n    if (!issame(result, expected)) {\n        cout << "Test case 2 failed" << endl;\n        return;\n    }\n\n    // Test case 3\n    l = {5.0, 8.0, -12.0, 4.0, 23.0, 2.0, 3.0, 11.0, 12.0, -10.0};\n    expected = {-12.0, 8.0, 3.0, 4.0, 5.0, 2.0, 12.0, 11.0, 23.0, -10.0};\n    result = sort_even(l);\n    if (!issame(result, expected)) {\n        cout << "Test case 3 failed" << endl;\n        return;\n    }\n\n    cout << "All test cases passed" << endl;\n}\n\nint main() {\n    run_tests();\n    return 0;\n}\n
\n#include <iostream>\n\nint car_race_collision(int n) {\n    return n * n;\n}\n\nint main() {\n    // Assertions\n    if (car_race_collision(2)!= 4) {\n        std::cerr << "Assertion failed: car_race_collision(2) == 4" << std::endl;\n        return 1;\n    }\n    if (car_race_collision(3)!= 9) {\n        std::cerr << "Assertion failed: car_race_collision(3) == 9" << std::endl;\n        return 1;\n    }\n    if (car_race_collision(4)!= 16) {\n        std::cerr << "Assertion failed: car_race_collision(4) == 16" << std::endl;\n        return 1;\n    }\n    if (car_race_collision(8)!= 64) {\n        std::cerr << "Assertion failed: car_race_collision(8) == 64" << std::endl;\n        return 1;\n    }\n    if (car_race_collision(10)!= 100) {\n        std::cerr << "Assertion failed: car_race_collision(10) == 100" << std::endl;\n        return 1;\n    }\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> incr_list(const vector<int>& l) {\n    vector<int> res = l;\n    for (int i = 0; i < res.size(); i++) {\n        res[i]++;\n    }\n    return res;\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<int> l, result, expected;\n\n    // Test case 1\n    l.clear();\n    expected.clear();\n    result = incr_list(l);\n    if (issame(result, expected)) {\n        cout << "Test case 1: assertion failed" << endl;\n        return 1;\n    }\n\n    // Test case 2\n    l.clear();\n    l = {3, 2, 1};\n    expected.clear();\n    expected = {4, 3, 2};\n    result = incr_list(l);\n    if (!issame(result, expected)) {\n        cout << "Test case 2: assertion failed" << endl;\n        return 1;\n    }\n\n    // Test case 3\n    l.clear();\n    l = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    expected.clear();\n    expected = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    result = incr_list(l);\n    if (!issame(result, expected)) {\n        cout << "Test case 3: assertion failed" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool pairsSumToZero(const vector<int>& l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    vector<int> l;\n\n    // Test cases\n    l = {1, 3, 5, 0};\n    if (!pairsSumToZero(l)) {\n        cout << "Test case 1 failed" << endl;\n        return 1;\n    }\n\n    l = {1, 3, -2, 1};\n    if (!pairsSumToZero(l)) {\n        cout << "Test case 2 failed" << endl;\n        return 1;\n    }\n\n    l = {1, 2, 3, 7};\n    if (!pairsSumToZero(l)) {\n        cout << "Test case 3 failed" << endl;\n        return 1;\n    }\n\n    l = {2, 4, -5, 3, 5, 7};\n    if (pairsSumToZero(l)) {\n        cout << "Test case 4 failed" << endl;\n        return 1;\n    }\n\n    l = {1};\n    if (!pairsSumToZero(l)) {\n        cout << "Test case 5 failed" << endl;\n        return 1;\n    }\n\n    l = {-3, 9, -1, 3, 2, 30};\n    if (pairsSumToZero(l)) {\n        cout << "Test case 6 failed" << endl;\n        return 1;\n    }\n\n    l = {-3, 9, -1, 3, 2, 31};\n    if (pairsSumToZero(l)) {\n        cout << "Test case 7 failed" << endl;\n        return 1;\n    }\n\n    l = {-3, 9, -1, 4, 2, 30};\n    if (!pairsSumToZero(l)) {\n        cout << "Test case 8 failed" << endl;\n        return 1;\n    }\n\n    l = {-3, 9, -1, 4, 2, 31};\n    if (!pairsSumToZero(l)) {\n        cout << "Test case 9 failed" << endl;\n        return 1;\n    }\n\n    cout << "All test cases passed" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <cstdio>\n\nusing namespace std;\n\nstring change_base(int x, int base) {\n    string out = "";\n    while (x > 0) {\n        int remainder = x % base;\n        char temp_str[10];\n        sprintf(temp_str, "%d", remainder);\n        out = temp_str + out;\n        x = x / base;\n    }\n    return out;\n}\n\nstring itoa(int num) {\n    char temp_str[10];\n    sprintf(temp_str, "%d", num);\n    return temp_str;\n}\n\nint main() {\n    string result;\n\n    // Assertions\n    if (change_base(8, 3)!= "22") {\n        cout << "Assertion failed: change_base(8, 3) == '22'" << endl;\n        return 1;\n    }\n    if (change_base(9, 3)!= "100") {\n        cout << "Assertion failed: change_base(9, 3) == '100'" << endl;\n        return 1;\n    }\n    if (change_base(234, 2)!= "11101010") {\n        cout << "Assertion failed: change_base(234, 2) == '11101010'" << endl;\n        return 1;\n    }\n    if (change_base(16, 2)!= "10000") {\n        cout << "Assertion failed: change_base(16, 2) == '10000'" << endl;\n        return 1;\n    }\n    if (change_base(8, 2)!= "1000") {\n        cout << "Assertion failed: change_base(8, 2) == '1000'" << endl;\n        return 1;\n    }\n    if (change_base(7, 2)!= "111") {\n        cout << "Assertion failed: change_base(7, 2) == '111'" << endl;\n        return 1;\n    }\n\n    for (int x = 2; x <= 7; x++) {\n        if (change_base(x, x + 1)!= itoa(x)) {\n            cout << "Assertion failed: change_base(" << x << ", " << x + 1 << ") == " << x << endl;\n            return 1;\n        }\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\ndouble triangle_area(double a, double h) {\n    return 0.5 * a * h;\n}\n\nint main() {\n    double result;\n\n    // Test cases\n    result = triangle_area(5.0, 3.0);\n    if (std::abs(result - 7.5) > 1e-4) {\n        std::cerr << "Assertion failed: triangle_area(5, 3) should be 7.5" << std::endl;\n        return 1;\n    }\n\n    result = triangle_area(2.0, 2.0);\n    if (std::abs(result - 2.0) > 1e-4) {\n        std::cerr << "Assertion failed: triangle_area(2, 2) should be 2.0" << std::endl;\n        return 1;\n    }\n\n    result = triangle_area(10.0, 8.0);\n    if (std::abs(result - 40.0) > 1e-4) {\n        std::cerr << "Assertion failed: triangle_area(10, 8) should be 40.0" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <cstdlib>\n\nint fib4(int n) {\n    int f[100] = {0};\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n\n    for (int i = 4; i <= n; i++) {\n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n    }\n\n    return f[n];\n}\n\nint main() {\n    if (fib4(5)!= 4) {\n        std::cout << "fib4(5) == 4: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fib4(8)!= 28) {\n        std::cout << "fib4(8) == 28: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fib4(10)!= 104) {\n        std::cout << "fib4(10) == 104: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fib4(12)!= 386) {\n        std::cout << "fib4(12) == 386: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\n// Function to swap two elements in a vector\nvoid swap(std::vector<double>& arr, int i, int j) {\n    double temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n// Function to sort a vector in ascending order\nvoid sort(std::vector<double>& arr) {\n    for (int i = 0; i < arr.size() - 1; i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[i] > arr[j]) {\n                swap(arr, i, j);\n            }\n        }\n    }\n}\n\n// Function to calculate the median of a vector\ndouble median(const std::vector<double>& arr) {\n    std::vector<double> sorted_arr = arr;\n    sort(sorted_arr);\n\n    int n = sorted_arr.size();\n\n    if (n % 2 == 1) {\n        return sorted_arr[n / 2];\n    } else {\n        return 0.5 * (sorted_arr[n / 2 - 1] + sorted_arr[n / 2]);\n    }\n}\n\nint main() {\n    // Test cases\n    std::vector<double> test_cases = {3.0, 1.0, 2.0, 4.0, 5.0};\n    double result = median(test_cases);\n    if (std::abs(result - 3.0) > 1e-4) {\n        std::cout << "Test case 1 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    test_cases = {-10.0, 4.0, 6.0, 1000.0, 10.0, 20.0};\n    result = median(test_cases);\n    if (std::abs(result - 8.0) > 1e-4) {\n        std::cout << "Test case 2 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    test_cases = {5.0};\n    result = median(test_cases);\n    if (std::abs(result - 5.0) > 1e-4) {\n        std::cout << "Test case 3 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    test_cases = {6.0, 5.0};\n    result = median(test_cases);\n    if (std::abs(result - 5.5) > 1e-4) {\n        std::cout << "Test case 4 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    test_cases = {8.0, 1.0, 3.0, 9.0, 9.0, 2.0, 7.0};\n    result = median(test_cases);\n    if (std::abs(result - 7.0) > 1e-4) {\n        std::cout << "Test case 5 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool is_palindrome(const std::string& text) {\n    std::string reversed_text = text;\n    std::reverse(reversed_text.begin(), reversed_text.end());\n    return text == reversed_text;\n}\n\nint main() {\n    // Main program\n    if (!is_palindrome("")) {\n        std::cout << "Assertion failed: is_palindrome('') == true" << std::endl;\n        return 1;\n    }\n\n    if (!is_palindrome("aba")) {\n        std::cout << "Assertion failed: is_palindrome('aba') == true" << std::endl;\n        return 1;\n    }\n\n    if (!is_palindrome("aaaaa")) {\n        std::cout << "Assertion failed: is_palindrome('aaaaa') == true" << std::endl;\n        return 1;\n    }\n\n    if (is_palindrome("zbcd")) {\n        std::cout << "Assertion failed: is_palindrome('zbcd') == false" << std::endl;\n        return 1;\n    }\n\n    if (!is_palindrome("xywyx")) {\n        std::cout << "Assertion failed: is_palindrome('xywyx') == true" << std::endl;\n        return 1;\n    }\n\n    if (is_palindrome("xywyz")) {\n        std::cout << "Assertion failed: is_palindrome('xywyz') == false" << std::endl;\n        return 1;\n    }\n\n    if (is_palindrome("xywzx")) {\n        std::cout << "Assertion failed: is_palindrome('xywzx') == false" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <cstdlib>\n\nint modp(int n, int p) {\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result = (result * 2) % p;\n    }\n    return result;\n}\n\nint main() {\n    // Variable declaration\n    int result;\n\n    // Assertions\n    result = modp(3, 5);\n    if (result!= 3) {\n        std::cerr << "modp(3, 5) == 3: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(1101, 101);\n    if (result!= 2) {\n        std::cerr << "modp(1101, 101) == 2: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(0, 101);\n    if (result!= 1) {\n        std::cerr << "modp(0, 101) == 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(3, 11);\n    if (result!= 8) {\n        std::cerr << "modp(3, 11) == 8: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(100, 101);\n    if (result!= 1) {\n        std::cerr << "modp(100, 101) == 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(30, 5);\n    if (result!= 4) {\n        std::cerr << "modp(30, 5) == 4: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(31, 5);\n    if (result!= 3) {\n        std::cerr << "modp(31, 5) == 3: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n\nstd::string encode_shift(const std::string& s) {\n    std::string out = s;\n    for (int i = 0; i < out.length(); i++) {\n        char c = out[i];\n        if (c >= 'a' && c <= 'z') {\n            c = 'a' + (c - 'a' + 5) % 26;\n        }\n        out[i] = c;\n    }\n    return out;\n}\n\nstd::string decode_shift(const std::string& s) {\n    std::string out = s;\n    for (int i = 0; i < out.length(); i++) {\n        char c = out[i];\n        if (c >= 'a' && c <= 'z') {\n            c = 'a' + (c - 'a' + 21) % 26;\n        }\n        out[i] = c;\n    }\n    return out;\n}\n\nint main() {\n    srand(time(0));\n\n    for (int i = 0; i < 100; i++) {\n        int l = 10 + rand() % 11;\n        std::string str;\n        for (int j = 0; j < l; j++) {\n            char c = 'a' + rand() % 26;\n            str += c;\n        }\n\n        std::string encoded_str = encode_shift(str);\n        std::string decoded_str = decode_shift(encoded_str);\n\n        if (decoded_str!= str) {\n            std::cout << "Assertion failed: decoded string does not match original" << std::endl;\n            return 1;\n        }\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring removeVowels(string text) {\n    string out = "";\n    string vowels = "AEIOUaeiou";\n    for (char c : text) {\n        bool isVowel = false;\n        for (char v : vowels) {\n            if (c == v) {\n                isVowel = true;\n                break;\n            }\n        }\n        if (!isVowel) {\n            out += c;\n        }\n    }\n    return out;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(removeVowels("") == "");\n    assert(removeVowels("abcdef//nghijklm") == "bcdf//nghjklm");\n    assert(removeVowels("fedcba") == "fdcb");\n    assert(removeVowels("eeeee") == "");\n    assert(removeVowels("acBAA") == "cB");\n    assert(removeVowels("EcBOO") == "cB");\n    assert(removeVowels("ybcd") == "ybcd");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool belowThreshold(const vector<int>& l, int t) {\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= t) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<int> l(4);\n    l = {1, 2, 4, 10};\n    int t = 100;\n    if (!belowThreshold(l, t)) {\n        cout << "Assertion failed: below_threshold({1, 2, 4, 10}, 100)" << endl;\n        return 1;\n    }\n\n    l = {1, 20, 4, 10};\n    t = 5;\n    if (belowThreshold(l, t)) {\n        cout << "Assertion failed: not(below_threshold({1, 20, 4, 10}, 5))" << endl;\n        return 1;\n    }\n\n    l = {1, 20, 4, 10};\n    t = 21;\n    if (!belowThreshold(l, t)) {\n        cout << "Assertion failed: below_threshold({1, 20, 4, 10}, 21)" << endl;\n        return 1;\n    }\n\n    l = {1, 20, 4, 10};\n    t = 22;\n    if (!belowThreshold(l, t)) {\n        cout << "Assertion failed: below_threshold({1, 20, 4, 10}, 22)" << endl;\n        return 1;\n    }\n\n    l = {1, 8, 4, 10};\n    t = 11;\n    if (!belowThreshold(l, t)) {\n        cout << "Assertion failed: below_threshold({1, 8, 4, 10}, 11)" << endl;\n        return 1;\n    }\n\n    l = {1, 8, 4, 10};\n    t = 10;\n    if (belowThreshold(l, t)) {\n        cout << "Assertion failed: not(below_threshold({1, 8, 4, 10}, 10))" << endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint add(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    srand(time(0)); // seed the random number generator\n\n    // Assertions\n    if (add(0, 1)!= 1) {\n        cout << "Assertion failed: add(0, 1) == 1" << endl;\n        return 1;\n    }\n\n    if (add(1, 0)!= 1) {\n        cout << "Assertion failed: add(1, 0) == 1" << endl;\n        return 1;\n    }\n\n    if (add(2, 3)!= 5) {\n        cout << "Assertion failed: add(2, 3) == 5" << endl;\n        return 1;\n    }\n\n    if (add(5, 7)!= 12) {\n        cout << "Assertion failed: add(5, 7) == 12" << endl;\n        return 1;\n    }\n\n    if (add(7, 5)!= 12) {\n        cout << "Assertion failed: add(7, 5) == 12" << endl;\n        return 1;\n    }\n\n    // Loop with random number generation and assertions\n    for (int i = 1; i <= 100; i++) {\n        double rand_val = (double)rand() / RAND_MAX;\n        int x = int(rand_val * 1000);\n        double rand_val = (double)rand() / RAND_MAX;\n        int y = int(rand_val * 1000);\n        if (add(x, y)!= x + y) {\n            cout << "Assertion failed: add(" << x << ", " << y << ") == " << x + y << endl;\n            return 1;\n        }\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool same_chars(const std::string& s0, const std::string& s1) {\n    for (char c : s0) {\n        if (s1.find(c) == std::string::npos) {\n            return false;\n        }\n    }\n    for (char c : s1) {\n        if (s0.find(c) == std::string::npos) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    bool result;\n\n    result = same_chars("eabcdzzzz", "dddzzzzzzzddeddabc");\n    if (!result) {\n        std::cout << "Assertion failed: same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == true" << std::endl;\n        return 1;\n    }\n\n    result = same_chars("abcd", "dddddddabc");\n    if (!result) {\n        std::cout << "Assertion failed: same_chars('abcd', 'dddddddabc') == true" << std::endl;\n        return 1;\n    }\n\n    result = same_chars("dddddddabc", "abcd");\n    if (!result) {\n        std::cout << "Assertion failed: same_chars('dddddddabc', 'abcd') == true" << std::endl;\n        return 1;\n    }\n\n    result = same_chars("eabcd", "dddddddabc");\n    if (result) {\n        std::cout << "Assertion failed: same_chars('eabcd', 'dddddddabc') == false" << std::endl;\n        return 1;\n    }\n\n    result = same_chars("abcd", "dddddddabcf");\n    if (result) {\n        std::cout << "Assertion failed: same_chars('abcd', 'dddddddabcf') == false" << std::endl;\n        return 1;\n    }\n\n    result = same_chars("eabcdzzzz", "dddzzzzzzzddddabc");\n    if (result) {\n        std::cout << "Assertion failed: same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == false" << std::endl;\n        return 1;\n    }\n\n    result = same_chars("aabb", "aaccc");\n    if (result) {\n        std::cout << "Assertion failed: same_chars('aabb', 'aaccc') == false" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\nusing namespace std;\n\nint fib(int n) {\n    int f[1000];\n    f[1] = 0;\n    f[2] = 1;\n    for (int i = 3; i <= n + 1; i++) {\n        f[i] = f[i-1] + f[i-2];\n    }\n    return f[n+1];\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    result = fib(10);\n    if (result!= 55) {\n        cout << "fib(10) == 55: assertion failed" << endl;\n        return 1;\n    }\n\n    result = fib(1);\n    if (result!= 1) {\n        cout << "fib(1) == 1: assertion failed" << endl;\n        return 1;\n    }\n\n    result = fib(8);\n    if (result!= 21) {\n        cout << "fib(8) == 21: assertion failed" << endl;\n        return 1;\n    }\n\n    result = fib(11);\n    if (result!= 89) {\n        cout << "fib(11) == 89: assertion failed" << endl;\n        return 1;\n    }\n\n    result = fib(12);\n    if (result!= 144) {\n        cout << "fib(12) == 144: assertion failed" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed successfully." << endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool isMonotonic(const std::vector<double>& l) {\n    bool incr = false;\n    bool decr = false;\n\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i-1]) incr = true;\n        if (l[i] < l[i-1]) decr = true;\n    }\n\n    return!(incr && decr);\n}\n\nint main() {\n    std::vector<double> l;\n\n    // Test cases\n    l = {1.0, 2.0, 4.0, 10.0};\n    if (!isMonotonic(l)) {\n        std::cout << "Assertion failed: {1, 2, 4, 10} should be monotonic" << std::endl;\n        return 1;\n    }\n\n    l = {1.0, 2.0, 4.0, 20.0};\n    if (!isMonotonic(l)) {\n        std::cout << "Assertion failed: {1, 2, 4, 20} should be monotonic" << std::endl;\n        return 1;\n    }\n\n    l = {1.0, 20.0, 4.0, 10.0};\n    if (isMonotonic(l)) {\n        std::cout << "Assertion failed: {1, 20, 4, 10} should not be monotonic" << std::endl;\n        return 1;\n    }\n\n    l = {4.0, 1.0, 0.0, -10.0};\n    if (!isMonotonic(l)) {\n        std::cout << "Assertion failed: {4, 1, 0, -10} should be monotonic" << std::endl;\n        return 1;\n    }\n\n    l = {4.0, 1.0, 1.0, 0.0};\n    if (!isMonotonic(l)) {\n        std::cout << "Assertion failed: {4, 1, 1, 0} should be monotonic" << std::endl;\n        return 1;\n    }\n\n    l = {1.0, 2.0, 3.0, 2.0, 5.0, 60.0};\n    if (isMonotonic(l)) {\n        std::cout << "Assertion failed: {1, 2, 3, 2, 5, 60} should not be monotonic" << std::endl;\n        return 1;\n    }\n\n    l = {1.0, 2.0, 3.0, 4.0, 5.0, 60.0};\n    if (!isMonotonic(l)) {\n        std::cout << "Assertion failed: {1, 2, 3, 4, 5, 60} should be monotonic" << std::endl;\n        return 1;\n    }\n\n    l = {9.0, 9.0, 9.0, 9.0};\n    if (!isMonotonic(l)) {\n        std::cout << "Assertion failed: {9, 9, 9, 9} should be monotonic" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> common(vector<int>& l1, vector<int>& l2) {\n    vector<int> temp;\n    vector<int> result;\n\n    for (int i = 0; i < l1.size(); i++) {\n        bool found = false;\n        for (int j = 0; j < temp.size(); j++) {\n            if (temp[j] == l1[i]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            for (int k = 0; k < l2.size(); k++) {\n                if (l2[k] == l1[i]) {\n                    temp.push_back(l1[i]);\n                    break;\n                }\n            }\n        }\n    }\n\n    if (temp.size() > 0) {\n        sort(temp.begin(), temp.end());\n        result = temp;\n    } else {\n        result.clear();\n    }\n\n    return result;\n}\n\nbool issame(vector<int>& a, vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    vector<int> l1 = {1, 4, 3, 34, 653, 2, 5};\n    vector<int> l2 = {5, 7, 1, 5, 9, 653, 121};\n    vector<int> expected = {1, 5, 653};\n    vector<int> result = common(l1, l2);\n    if (!issame(result, expected)) {\n        cout << "Test case 1 failed" << endl;\n        return 1;\n    }\n\n    l1 = {5, 3, 2, 8};\n    l2 = {3, 2};\n    expected = {2, 3};\n    result = common(l1, l2);\n    if (!issame(result, expected)) {\n        cout << "Test case 2 failed" << endl;\n        return 1;\n    }\n\n    l1 = {4, 3, 2, 8};\n    l2 = {3, 2, 4};\n    expected = {2, 3, 4};\n    result = common(l1, l2);\n    if (!issame(result, expected)) {\n        cout << "Test case 3 failed" << endl;\n        return 1;\n    }\n\n    l1 = {4, 3, 2, 8};\n    l2.clear();\n    expected.clear();\n    result = common(l1, l2);\n    if (!issame(result, expected)) {\n        cout << "Test case 4 failed" << endl;\n        return 1;\n    }\n\n    cout << "All test cases passed" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nint largest_prime_factor(int n) {\n  int num = n;\n  for (int i = 2; i <= sqrt(n); ++i) {\n    while (num % i == 0 && num > i) {\n      num /= i;\n    }\n  }\n  return num;\n}\n\nint main() {\n  // Assertions\n  if (largest_prime_factor(15)!= 5) {\n    std::cerr << "Assertion failed: largest_prime_factor(15) == 5" << std::endl;\n    return 1;\n  }\n  if (largest_prime_factor(27)!= 3) {\n    std::cerr << "Assertion failed: largest_prime_factor(27) == 3" << std::endl;\n    return 1;\n  }\n  if (largest_prime_factor(63)!= 7) {\n    std::cerr << "Assertion failed: largest_prime_factor(63) == 7" << std::endl;\n    return 1;\n  }\n  if (largest_prime_factor(330)!= 11) {\n    std::cerr << "Assertion failed: largest_prime_factor(330) == 11" << std::endl;\n    return 1;\n  }\n  if (largest_prime_factor(13195)!= 29) {\n    std::cerr << "Assertion failed: largest_prime_factor(13195) == 29" << std::endl;\n    return 1;\n  }\n  return 0;\n}\n
\n#include <iostream>\n\nint sum_to_n(int n) {\n    return n * (n + 1) / 2;\n}\n\nint main() {\n    // Assertions\n    if (sum_to_n(1)!= 1) {\n        std::cerr << "sum_to_n(1) == 1: assertion failed" << std::endl;\n        return 1;\n    }\n    if (sum_to_n(6)!= 21) {\n        std::cerr << "sum_to_n(6) == 21: assertion failed" << std::endl;\n        return 1;\n    }\n    if (sum_to_n(11)!= 66) {\n        std::cerr << "sum_to_n(11) == 66: assertion failed" << std::endl;\n        return 1;\n    }\n    if (sum_to_n(30)!= 465) {\n        std::cerr << "sum_to_n(30) == 465: assertion failed" << std::endl;\n        return 1;\n    }\n    if (sum_to_n(100)!= 5050) {\n        std::cerr << "sum_to_n(100) == 5050: assertion failed" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nbool correctBrackets(const std::string& brackets) {\n    int level = 0;\n    for (char c : brackets) {\n        if (c == '(') {\n            level++;\n        } else if (c == ')') {\n            level--;\n        }\n        if (level < 0) {\n            return false;\n        }\n    }\n    return level == 0;\n}\n\nint main() {\n    bool result;\n\n    // Test cases\n    result = correctBrackets("()");\n    if (!result) {\n        std::cout << "Assertion failed: ()" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("(()())");\n    if (!result) {\n        std::cout << "Assertion failed: (()())" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("()()(()())()");\n    if (!result) {\n        std::cout << "Assertion failed: ()()(()())()" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("()()((()()())())(()()(()))");\n    if (!result) {\n        std::cout << "Assertion failed: ()()((()()())())(()()(()))" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("((()())))");\n    if (result) {\n        std::cout << "Assertion failed: ((()())))" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets(")(()");\n    if (result) {\n        std::cout << "Assertion failed: )(()" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("(");\n    if (result) {\n        std::cout << "Assertion failed: (" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("((((");\n    if (result) {\n        std::cout << "Assertion failed: ((((" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets(")");\n    if (result) {\n        std::cout << "Assertion failed: )" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("(()");\n    if (result) {\n        std::cout << "Assertion failed: (()" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("()()(()())())(()");\n    if (result) {\n        std::cout << "Assertion failed: ()()(()())())(()" << std::endl;\n        return 1;\n    }\n\n    result = correctBrackets("()()(()())()))()");\n    if (result) {\n        std::cout << "Assertion failed: ()()(()())()))()" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n\nint fibfib(int n) {\n  int ff[0] = 0; // Initialize array with 0\n  ff[1] = 0;\n  ff[2] = 1;\n\n  for (int i = 3; i <= n; i++) {\n    ff[i] = ff[i-1] + ff[i-2] + ff[i-3];\n  }\n\n  return ff[n];\n}\n\nint main() {\n  // Assertions\n  if (fibfib(2)!= 1) {\n    std::cerr << "fibfib(2) == 1: assertion failed" << std::endl;\n    return 1;\n  }\n\n  if (fibfib(1)!= 0) {\n    std::cerr << "fibfib(1) == 0: assertion failed" << std::endl;\n    return 1;\n  }\n\n  if (fibfib(5)!= 4) {\n    std::cerr << "fibfib(5) == 4: assertion failed" << std::endl;\n    return 1;\n  }\n\n  if (fibfib(8)!= 24) {\n    std::cerr << "fibfib(8) == 24: assertion failed" << std::endl;\n    return 1;\n  }\n\n  if (fibfib(10)!= 81) {\n    std::cerr << "fibfib(10) == 81: assertion failed" << std::endl;\n    return 1;\n  }\n\n  if (fibfib(12)!= 274) {\n    std::cerr << "fibfib(12) == 274: assertion failed" << std::endl;\n    return 1;\n  }\n\n  if (fibfib(14)!= 927) {\n    std::cerr << "fibfib(14) == 927: assertion failed" << std::endl;\n    return 1;\n  }\n\n  return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nint vowels_count(const std::string& s) {\n    int count = 0;\n    std::string vowels = "aeiouAEIOU";\n    for (char c : s) {\n        if (vowels.find(c)!= std::string::npos) {\n            count++;\n        }\n    }\n    if (std::tolower(s.back()) == 'y') {\n        count++;\n    }\n    return count;\n}\n\nint main() {\n    std::string s;\n    int count;\n\n    // Test cases\n    s = "abcde";\n    count = vowels_count(s);\n    if (count!= 2) {\n        std::cerr << "Assertion failed for 'abcde'" << std::endl;\n        return 1;\n    }\n\n    s = "Alone";\n    count = vowels_count(s);\n    if (count!= 3) {\n        std::cerr << "Assertion failed for 'Alone'" << std::endl;\n        return 1;\n    }\n\n    s = "key";\n    count = vowels_count(s);\n    if (count!= 2) {\n        std::cerr << "Assertion failed for 'key'" << std::endl;\n        return 1;\n    }\n\n    s = "bye";\n    count = vowels_count(s);\n    if (count!= 1) {\n        std::cerr << "Assertion failed for 'bye'" << std::endl;\n        return 1;\n    }\n\n    s = "keY";\n    count = vowels_count(s);\n    if (count!= 2) {\n        std::cerr << "Assertion failed for 'keY'" << std::endl;\n        return 1;\n    }\n\n    s = "bYe";\n    count = vowels_count(s);\n    if (count!= 1) {\n        std::cerr << "Assertion failed for 'bYe'" << std::endl;\n        return 1;\n    }\n\n    s = "ACEDY";\n    count = vowels_count(s);\n    if (count!= 3) {\n        std::cerr << "Assertion failed for 'ACEDY'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string circular_shift(int x, int shift) {\n    std::string xs = std::to_string(x);\n    int len_xs = xs.length();\n\n    if (len_xs < shift) {\n        std::string reversed = xs;\n        std::reverse(reversed.begin(), reversed.end());\n        return reversed;\n    } else {\n        int actual_shift = shift % len_xs;\n        return xs.substr(len_xs - actual_shift) + xs.substr(0, len_xs - actual_shift);\n    }\n}\n\nint main() {\n    std::string result;\n\n    result = circular_shift(100, 2);\n    if (result!= "001") {\n        std::cout << "Assertion failed: circular_shift(100, 2) == '001'" << std::endl;\n        return 1;\n    }\n\n    result = circular_shift(12, 2);\n    if (result!= "12") {\n        std::cout << "Assertion failed: circular_shift(12, 2) == '12'" << std::endl;\n        return 1;\n    }\n\n    result = circular_shift(97, 8);\n    if (result!= "79") {\n        std::cout << "Assertion failed: circular_shift(97, 8) == '79'" << std::endl;\n        return 1;\n    }\n\n    result = circular_shift(12, 1);\n    if (result!= "21") {\n        std::cout << "Assertion failed: circular_shift(12, 1) == '21'" << std::endl;\n        return 1;\n    }\n\n    result = circular_shift(11, 101);\n    if (result!= "11") {\n        std::cout << "Assertion failed: circular_shift(11, 101) == '11'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nint digitSum(const std::string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (std::isupper(c)) {\n            sum += static_cast<int>(c);\n        }\n    }\n    return sum;\n}\n\nint main() {\n    // Assertions\n    if (digitSum("")!= 0) {\n        std::cerr << "Assertion failed: digitSum('') == 0" << std::endl;\n        return 1;\n    }\n\n    if (digitSum("abAB")!= 131) {\n        std::cerr << "Assertion failed: digitSum('abAB') == 131" << std::endl;\n        return 1;\n    }\n\n    if (digitSum("abcCd")!= 67) {\n        std::cerr << "Assertion failed: digitSum('abcCd') == 67" << std::endl;\n        return 1;\n    }\n\n    if (digitSum("helloE")!= 69) {\n        std::cerr << "Assertion failed: digitSum('helloE') == 69" << std::endl;\n        return 1;\n    }\n\n    if (digitSum("woArBld")!= 131) {\n        std::cerr << "Assertion failed: digitSum('woArBld') == 131" << std::endl;\n        return 1;\n    }\n\n    if (digitSum("aAaaaXa")!= 153) {\n        std::cerr << "Assertion failed: digitSum('aAaaaXa') == 153" << std::endl;\n        return 1;\n    }\n\n    if (digitSum(" How are yOu?")!= 151) {\n        std::cerr << "Assertion failed: digitSum(' How are yOu?') == 151" << std::endl;\n        return 1;\n    }\n\n    if (digitSum("You arE Very Smart")!= 327) {\n        std::cerr << "Assertion failed: digitSum('You arE Very Smart') == 327" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <sstream>\n\nint fruit_distribution(const std::string& s, int n) {\n    int res = 0;\n    std::string num1, num2;\n    int i, is12 = 0, num1_val = 0, num2_val = 0;\n\n    num1 = "";\n    num2 = "";\n\n    for (i = 0; i < s.length(); i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            if (is12 == 0) {\n                num1 += s[i];\n            } else {\n                num2 += s[i];\n            }\n        } else if (is12 == 0 &&!num1.empty()) {\n            is12 = 1;\n        }\n    }\n\n    std::istringstream iss1(num1);\n    iss1 >> num1_val;\n\n    std::istringstream iss2(num2);\n    iss2 >> num2_val;\n\n    res = n - num1_val - num2_val;\n\n    return res;\n}\n\nint main() {\n    std::string s;\n    int n;\n\n    s = "5 apples and 6 oranges";\n    n = 19;\n    if (fruit_distribution(s, n)!= 8) {\n        std::cout << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    s = "5 apples and 6 oranges";\n    n = 21;\n    if (fruit_distribution(s, n)!= 10) {\n        std::cout << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    s = "0 apples and 1 oranges";\n    n = 3;\n    if (fruit_distribution(s, n)!= 2) {\n        std::cout << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    s = "1 apples and 0 oranges";\n    n = 3;\n    if (fruit_distribution(s, n)!= 2) {\n        std::cout << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    s = "2 apples and 3 oranges";\n    n = 100;\n    if (fruit_distribution(s, n)!= 95) {\n        std::cout << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    s = "2 apples and 3 oranges";\n    n = 5;\n    if (fruit_distribution(s, n)!= 0) {\n        std::cout << "Test case 6 failed" << std::endl;\n        return 1;\n    }\n\n    s = "1 apples and 100 oranges";\n    n = 120;\n    if (fruit_distribution(s, n)!= 19) {\n        std::cout << "Test case 7 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid pluck(vector<int>& arr, vector<int>& out) {\n    out.clear();\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 && (out.empty() || arr[i] < out[0])) {\n            out.clear();\n            out.push_back(arr[i]);\n            out.push_back(i - 1);\n        }\n    }\n}\n\nbool issame(vector<int>& a, vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> arr, result, empty;\n    empty.clear();\n\n    // Test cases\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr = {4, 2, 3};\n    pluck(arr, result);\n    assert(issame(result, {2, 1}));\n\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr = {1, 2, 3};\n    pluck(arr, result);\n    assert(issame(result, {2, 1}));\n\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr.clear();\n    pluck(arr, result);\n    assert(issame(result, empty));\n\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr = {5, 0, 3, 0, 4, 2};\n    pluck(arr, result);\n    assert(issame(result, {0, 1}));\n\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr = {1, 2, 3, 0, 5, 3};\n    pluck(arr, result);\n    assert(issame(result, {0, 3}));\n\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr = {5, 4, 8, 4, 8};\n    pluck(arr, result);\n    assert(issame(result, {4, 1}));\n\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr = {7, 6, 7, 1};\n    pluck(arr, result);\n    assert(issame(result, {6, 1}));\n\n    if (!arr.empty()) {\n        arr.clear();\n    }\n    arr = {7, 9, 7, 1};\n    pluck(arr, result);\n    assert(issame(result, empty));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid extendArray(vector<vector<int>>& array, int newSize) {\n    vector<vector<int>> temp(array.size(), vector<int>(newSize));\n    for (int i = 0; i < array.size(); i++) {\n        for (int j = 0; j < array[i].size(); j++) {\n            temp[i][j] = array[i][j];\n        }\n    }\n    array = temp;\n}\n\nint search(const vector<int>& lst) {\n    int max = -1;\n    vector<pair<int, int>> freq;\n    for (int i = 0; i < lst.size(); i++) {\n        bool has = false;\n        for (int j = 0; j < freq.size(); j++) {\n            if (lst[i] == freq[j].first) {\n                freq[j].second++;\n                if (freq[j].second >= freq[j].first && freq[j].first > max) max = freq[j].first;\n                has = true;\n                break;\n            }\n        }\n        if (!has) {\n            freq.push_back({lst[i], 1});\n            if (max == -1 && lst[i] == 1) max = 1;\n        }\n    }\n    return max;\n}\n\nint main() {\n    int result;\n\n    result = search({5, 5, 5, 5, 1});\n    if (result!= 1) {\n        cout << "Assertion failed: search({5, 5, 5, 5, 1}) == 1" << endl;\n        return 1;\n    }\n\n    result = search({4, 1, 4, 1, 4, 4});\n    if (result!= 4) {\n        cout << "Assertion failed: search({4, 1, 4, 1, 4, 4}) == 4" << endl;\n        return 1;\n    }\n\n    result = search({3, 3});\n    if (result!= -1) {\n        cout << "Assertion failed: search({3, 3}) == -1" << endl;\n        return 1;\n    }\n\n    result = search({8, 8, 8, 8, 8, 8, 8, 8});\n    if (result!= 8) {\n        cout << "Assertion failed: search({8, 8, 8, 8, 8, 8, 8, 8}) == 8" << endl;\n        return 1;\n    }\n\n    result = search({2, 3, 3, 2, 2});\n    if (result!= 2) {\n        cout << "Assertion failed: search({2, 3, 3, 2, 2}) == 2" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed." << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid strangeSortList(vector<int>& lst, vector<int>& out) {\n    int n = lst.size();\n    if (n == 0) {\n        if (!out.empty()) out.clear();\n        out.resize(0);\n        return;\n    }\n\n    vector<int> sorted_lst = lst;\n\n    // Bubble sort\n    for (int i = 1; i < n; i++) {\n        for (int j = 1; j < n - i; j++) {\n            if (sorted_lst[j] > sorted_lst[j + 1]) {\n                swap(sorted_lst[j], sorted_lst[j + 1]);\n            }\n        }\n    }\n\n    if (!out.empty()) out.clear();\n    out.resize(n);\n    int l = 0;\n    int r = n - 1;\n    int i = 0;\n\n    while (l < r) {\n        out[i] = sorted_lst[l];\n        i++;\n        l++;\n        out[i] = sorted_lst[r];\n        i++;\n        r--;\n    }\n\n    if (l == r) {\n        out[i] = sorted_lst[l];\n    }\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid testAssert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> out;\n\n    // Test cases\n    strangeSortList({1, 2, 3, 4}, out);\n    testAssert(issame(out, {1, 4, 2, 3}));\n\n    strangeSortList({5, 6, 7, 8, 9}, out);\n    testAssert(issame(out, {5, 9, 6, 8, 7}));\n\n    strangeSortList({1, 2, 3, 4, 5}, out);\n    testAssert(issame(out, {1, 5, 2, 4, 3}));\n\n    strangeSortList({5, 6, 7, 8, 9, 1}, out);\n    testAssert(issame(out, {1, 9, 5, 8, 6, 7}));\n\n    strangeSortList({5, 5, 5, 5}, out);\n    testAssert(issame(out, {5, 5, 5, 5}));\n\n    // Handle empty array case separately\n    out.clear();\n    out.resize(0);\n    strangeSortList(out, out);\n    testAssert(issame(out, out));\n\n    strangeSortList({1, 2, 3, 4, 5, 6, 7, 8}, out);\n    testAssert(issame(out, {1, 8, 2, 7, 3, 6, 4, 5}));\n\n    strangeSortList({0, 2, 2, 2, 5, 5, -5, -5}, out);\n    testAssert(issame(out, {-5, 5, -5, 5, 0, 2, 2, 2}));\n\n    strangeSortList({111111}, out);\n    testAssert(issame(out, {111111}));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n#include <string>\n\nusing namespace std;\n\ndouble triangle_area(double a, double b, double c) {\n    double area, h;\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1.0;\n    } else {\n        h = (a + b + c) / 2.0;\n        area = sqrt(h * (h - a) * (h - b) * (h - c));\n        return area;\n    }\n}\n\nvoid check_assertion(bool condition, string message) {\n    if (!condition) {\n        cout << message << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    check_assertion(abs(triangle_area(3.0, 4.0, 5.0) - 6.0) < 0.01, "Assertion failed: triangle_area(3, 4, 5)");\n    check_assertion(abs(triangle_area(1.0, 2.0, 10.0) + 1.0) < 0.01, "Assertion failed: triangle_area(1, 2, 10)");\n    check_assertion(abs(triangle_area(4.0, 8.0, 5.0) - 8.18) < 0.01, "Assertion failed: triangle_area(4, 8, 5)");\n    check_assertion(abs(triangle_area(2.0, 2.0, 2.0) - 1.73) < 0.01, "Assertion failed: triangle_area(2, 2, 2)");\n    check_assertion(abs(triangle_area(1.0, 2.0, 3.0) + 1.0) < 0.01, "Assertion failed: triangle_area(1, 2, 3)");\n    check_assertion(abs(triangle_area(10.0, 5.0, 7.0) - 16.25) < 0.01, "Assertion failed: triangle_area(10, 5, 7)");\n    check_assertion(abs(triangle_area(2.0, 6.0, 3.0) + 1.0) < 0.01, "Assertion failed: triangle_area(2, 6, 3)");\n    check_assertion(abs(triangle_area(1.0, 1.0, 1.0) - 0.43) < 0.01, "Assertion failed: triangle_area(1, 1, 1)");\n    check_assertion(abs(triangle_area(2.0, 2.0, 10.0) + 1.0) < 0.01, "Assertion failed: triangle_area(2, 2, 10)");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool willItFly(const std::vector<int>& q, int w) {\n    int sum = 0;\n    bool willItFly = true;\n\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i]!= q[q.size() - 1 - i]) {\n            willItFly = false;\n            return willItFly;\n        }\n        sum += q[i];\n    }\n\n    if (sum > w) {\n        willItFly = false;\n    }\n\n    return willItFly;\n}\n\nint main() {\n    std::vector<int> q;\n    int w;\n\n    // Test cases\n    q.clear();\n    q.push_back(3);\n    q.push_back(2);\n    q.push_back(3);\n    w = 9;\n    if (!willItFly(q, w)) {\n        std::cout << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    q.clear();\n    q.push_back(1);\n    q.push_back(2);\n    w = 5;\n    if (willItFly(q, w)) {\n        std::cout << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    q.clear();\n    q.push_back(3);\n    w = 5;\n    if (!willItFly(q, w)) {\n        std::cout << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    q.clear();\n    q.push_back(3);\n    q.push_back(2);\n    q.push_back(3);\n    w = 1;\n    if (willItFly(q, w)) {\n        std::cout << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    q.clear();\n    q.push_back(1);\n    q.push_back(2);\n    q.push_back(3);\n    w = 6;\n    if (willItFly(q, w)) {\n        std::cout << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    q.clear();\n    q.push_back(5);\n    w = 5;\n    if (!willItFly(q, w)) {\n        std::cout << "Test case 6 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint smallestChange(const std::vector<int>& arr) {\n    int out = 0;\n    int n = arr.size();\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i]!= arr[n - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 2, 3, 5, 4, 7, 9, 6};\n    int result1 = smallestChange(arr1);\n    if (result1!= 4) {\n        std::cerr << "Assertion failed: smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr2 = {1, 2, 3, 4, 3, 2, 2};\n    int result2 = smallestChange(arr2);\n    if (result2!= 1) {\n        std::cerr << "Assertion failed: smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr3 = {1, 4, 2};\n    int result3 = smallestChange(arr3);\n    if (result3!= 1) {\n        std::cerr << "Assertion failed: smallest_change([1, 4, 2]) == 1" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr4 = {1, 4, 4, 2};\n    int result4 = smallestChange(arr4);\n    if (result4!= 1) {\n        std::cerr << "Assertion failed: smallest_change([1, 4, 4, 2]) == 1" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr5 = {1, 2, 3, 2, 1};\n    int result5 = smallestChange(arr5);\n    if (result5!= 0) {\n        std::cerr << "Assertion failed: smallest_change([1, 2, 3, 2, 1]) == 0" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr6 = {3, 1, 1, 3};\n    int result6 = smallestChange(arr6);\n    if (result6!= 0) {\n        std::cerr << "Assertion failed: smallest_change([3, 1, 1, 3]) == 0" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr7 = {1};\n    int result7 = smallestChange(arr7);\n    if (result7!= 0) {\n        std::cerr << "Assertion failed: smallest_change([1]) == 0" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr8 = {0, 1};\n    int result8 = smallestChange(arr8);\n    if (result8!= 1) {\n        std::cerr << "Assertion failed: smallest_change([0, 1]) == 1" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool isSame(vector<string> a, vector<string> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvector<string> totalMatch(vector<string> lst1, vector<string> lst2) {\n    int num1 = 0;\n    int num2 = 0;\n\n    for (const string& str : lst1) {\n        num1 += str.length();\n    }\n\n    for (const string& str : lst2) {\n        num2 += str.length();\n    }\n\n    if (num1 > num2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "condition: assertion failed" << endl;\n        exit(1);\n    }\n}\n\nstring pad(const string& str, int len) {\n    string padded_str = str;\n    padded_str.insert(padded_str.end(), len - str.length(),'');\n    return padded_str;\n}\n\nint main() {\n    vector<string> empty;\n\n    // Test cases\n    assert(isSame({pad("hi", 100), pad("admin", 100)}, {pad("hi", 100), pad("hi", 100)}));\n    assert(isSame({pad("hi", 100), pad("admin", 100)}, {pad("hi", 100), pad("hi", 100), pad("admin", 100), pad("project", 100)}));\n    assert(isSame({pad("4", 100)}, {pad("1", 100), pad("2", 100), pad("3", 100), pad("4", 100), pad("5", 100)}));\n    assert(isSame({pad("hi", 100), pad("admin", 100)}, {pad("hI", 100), pad("Hi", 100)}));\n    assert(isSame({pad("hi", 100), pad("admin", 100)}, {pad("hI", 100), pad("hi", 100), pad("hi", 100)}));\n    assert(isSame({pad("hi", 100), pad("admin", 100)}, {pad("hI", 100), pad("hi", 100), pad("hii", 100)}));\n    assert(isSame(empty, {pad("this", 100)}));\n    assert(isSame({pad("this", 100)}, empty));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nbool isSimplePower(int x, int n) {\n    int p = 1;\n    int count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) {\n            return true;\n        }\n        p = p * n;\n        count++;\n    }\n    return false;\n}\n\nint main() {\n    if (!isSimplePower(1, 4)) {\n        std::cout << "Assertion failed: isSimplePower(1, 4) == true" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(2, 2)) {\n        std::cout << "Assertion failed: isSimplePower(2, 2) == true" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(8, 2)) {\n        std::cout << "Assertion failed: isSimplePower(8, 2) == true" << std::endl;\n        return 1;\n    }\n    if (isSimplePower(3, 2)) {\n        std::cout << "Assertion failed: isSimplePower(3, 2) == false" << std::endl;\n        return 1;\n    }\n    if (isSimplePower(3, 1)) {\n        std::cout << "Assertion failed: isSimplePower(3, 1) == false" << std::endl;\n        return 1;\n    }\n    if (isSimplePower(5, 3)) {\n        std::cout << "Assertion failed: isSimplePower(5, 3) == false" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(16, 2)) {\n        std::cout << "Assertion failed: isSimplePower(16, 2) == true" << std::endl;\n        return 1;\n    }\n    if (isSimplePower(143214, 16)) {\n        std::cout << "Assertion failed: isSimplePower(143214, 16) == false" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(4, 2)) {\n        std::cout << "Assertion failed: isSimplePower(4, 2) == true" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(9, 3)) {\n        std::cout << "Assertion failed: isSimplePower(9, 3) == true" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(16, 4)) {\n        std::cout << "Assertion failed: isSimplePower(16, 4) == true" << std::endl;\n        return 1;\n    }\n    if (isSimplePower(24, 2)) {\n        std::cout << "Assertion failed: isSimplePower(24, 2) == false" << std::endl;\n        return 1;\n    }\n    if (isSimplePower(128, 4)) {\n        std::cout << "Assertion failed: isSimplePower(128, 4) == false" << std::endl;\n        return 1;\n    }\n    if (isSimplePower(12, 6)) {\n        std::cout << "Assertion failed: isSimplePower(12, 6) == false" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(1, 1)) {\n        std::cout << "Assertion failed: isSimplePower(1, 1) == true" << std::endl;\n        return 1;\n    }\n    if (!isSimplePower(1, 12)) {\n        std::cout << "Assertion failed: isSimplePower(1, 12) == true" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nbool iscuber(int a) {\n    bool result = false;\n    int i = 0;\n\n    while (i <= std::abs(a) / std::cbrt(std::abs(a))) {\n        if (std::pow(i, 3) == std::abs(a)) {\n            result = true;\n            return result;\n        }\n        i++;\n    }\n\n    return result;\n}\n\nint main() {\n    // Assertions\n    if (!iscuber(1)) {\n        std::cout << "iscuber(1): assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (iscuber(2)) {\n        std::cout << "iscuber(2): assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (!iscuber(-1)) {\n        std::cout << "iscuber(-1): assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (!iscuber(64)) {\n        std::cout << "iscuber(64): assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (iscuber(180)) {\n        std::cout << "iscuber(180): assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (!iscuber(1000)) {\n        std::cout << "iscuber(1000): assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (!iscuber(0)) {\n        std::cout << "iscuber(0): assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (iscuber(1729)) {\n        std::cout << "iscuber(1729): assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nconst string key = "2357BD";\nint hex_key(const string& num) {\n    int out = 0;\n    for (char c : num) {\n        if (find(key.begin(), key.end(), c)!= key.end()) {\n            out++;\n        }\n    }\n    return out;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(hex_key("AB") == 1);\n    assert(hex_key("1077E") == 2);\n    assert(hex_key("ABED1A33") == 4);\n    assert(hex_key("2020") == 2);\n    assert(hex_key("123456789ABCDEF0") == 6);\n    assert(hex_key("112233445566778899AABBCCDDEEFF00") == 12);\n    assert(hex_key("") == 0);\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nstd::string decimalToBinary(int decimal) {\n    std::string out;\n    if (decimal == 0) {\n        return "db0db";\n    }\n\n    while (decimal > 0) {\n        out = (decimal % 2 == 0? "0" : "1") + out;\n        decimal /= 2;\n    }\n\n    return "db" + out + "db";\n}\n\nint main() {\n    std::cout << "All assertions passed." << std::endl;\n\n    std::string result = decimalToBinary(0);\n    if (result!= "db0db") {\n        std::cout << "Assertion failed: decimalToBinary(0) == 'db0db'" << std::endl;\n        return 1;\n    }\n\n    result = decimalToBinary(32);\n    if (result!= "db100000db") {\n        std::cout << "Assertion failed: decimalToBinary(32) == 'db100000db'" << std::endl;\n        return 1;\n    }\n\n    result = decimalToBinary(103);\n    if (result!= "db1100111db") {\n        std::cout << "Assertion failed: decimalToBinary(103) == 'db1100111db'" << std::endl;\n        return 1;\n    }\n\n    result = decimalToBinary(15);\n    if (result!= "db1111db") {\n        std::cout << "Assertion failed: decimalToBinary(15) == 'db1111db'" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool is_happy(const string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    for (int i = 3; i < s.length(); i++) {\n        if (s[i] == s[i-1] || s[i] == s[i-2]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    cout << (is_happy("a")? "Test 1 passed" : "Test 1 failed") << endl;\n    cout << (is_happy("aa")? "Test 2 passed" : "Test 2 failed") << endl;\n    cout << (is_happy("abcd")? "Test 3 passed" : "Test 3 failed") << endl;\n    cout << (is_happy("aabb")? "Test 4 passed" : "Test 4 failed") << endl;\n    cout << (is_happy("adb")? "Test 5 passed" : "Test 5 failed") << endl;\n    cout << (is_happy("xyy")? "Test 6 passed" : "Test 6 failed") << endl;\n    cout << (is_happy("iopaxpoi")? "Test 7 passed" : "Test 7 failed") << endl;\n    cout << (is_happy("iopaxioi")? "Test 8 passed" : "Test 8 failed") << endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> numericalLetterGrade(vector<double> grades) {\n    vector<string> result;\n    for (double grade : grades) {\n        if (grade >= 3.9999) {\n            result.push_back("A+");\n        } else if (grade > 3.7001 && grade < 3.9999) {\n            result.push_back("A ");\n        } else if (grade > 3.3001 && grade <= 3.7001) {\n            result.push_back("A-");\n        } else if (grade > 3.0001 && grade <= 3.3001) {\n            result.push_back("B+");\n        } else if (grade > 2.7001 && grade <= 3.0001) {\n            result.push_back("B ");\n        } else if (grade > 2.3001 && grade <= 2.7001) {\n            result.push_back("B-");\n        } else if (grade > 2.0001 && grade <= 2.3001) {\n            result.push_back("C+");\n        } else if (grade > 1.7001 && grade <= 2.0001) {\n            result.push_back("C ");\n        } else if (grade > 1.3001 && grade <= 1.7001) {\n            result.push_back("C-");\n        } else if (grade > 1.0001 && grade <= 1.3001) {\n            result.push_back("D+");\n        } else if (grade > 0.7001 && grade <= 1.0001) {\n            result.push_back("D ");\n        } else if (grade > 0.0001 && grade <= 0.7001) {\n            result.push_back("D-");\n        } else {\n            result.push_back("E ");\n        }\n    }\n    return result;\n}\n\nbool isSame(vector<string> a, vector<string> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<double> grades1 = {4.0, 3.0, 1.7, 2.0, 3.5};\n    vector<string> expected1 = {"A+", "B ", "C-", "C ", "A-"};\n    vector<string> result1 = numericalLetterGrade(grades1);\n    if (!isSame(result1, expected1)) {\n        cout << "Assertion failed for test case 1" << endl;\n        return 1;\n    }\n\n    vector<double> grades2 = {1.2};\n    vector<string> expected2 = {"D+"};\n    vector<string> result2 = numericalLetterGrade(grades2);\n    if (!isSame(result2, expected2)) {\n        cout << "Assertion failed for test case 2" << endl;\n        return 1;\n    }\n\n    vector<double> grades3 = {0.5};\n    vector<string> expected3 = {"D-"};\n    vector<string> result3 = numericalLetterGrade(grades3);\n    if (!isSame(result3, expected3)) {\n        cout << "Assertion failed for test case 3" << endl;\n        return 1;\n    }\n\n    vector<double> grades4 = {0.0};\n    vector<string> expected4 = {"E "};\n    vector<string> result4 = numericalLetterGrade(grades4);\n    if (!isSame(result4, expected4)) {\n        cout << "Assertion failed for test case 4" << endl;\n        return 1;\n    }\n\n    vector<double> grades5 = {1.0, 0.3, 1.5, 2.8, 3.3};\n    vector<string> expected5 = {"A ", "D ", "C-", "B ", "B+"};\n    vector<string> result5 = numericalLetterGrade(grades5);\n    if (!isSame(result5, expected5)) {\n        cout << "Assertion failed for test case 5" << endl;\n        return 1;\n    }\n\n    vector<double> grades6 = {0.0, 0.7};\n    vector<string> expected6 = {"E ", "D+"};\n    vector<string> result6 = numericalLetterGrade(grades6);\n    if (!isSame(result6, expected6)) {\n        cout << "Assertion failed for test case 6" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed." << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cmath>\n\nbool isPrimeLength(const std::string& s) {\n    int l = s.length();\n    if (l < 2) {\n        return false;\n    }\n\n    for (int i = 2; i <= sqrt(l); i++) {\n        if (l % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::string str;\n    bool result;\n\n    str = "Hello";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('Hello') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "abcdcba";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('abcdcba') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "kittens";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('kittens') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "orange";\n    result = isPrimeLength(str);\n    if (result) {\n        std::cout << "isPrimeLength('orange') == false: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "wow";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('wow') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "world";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('world') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "MadaM";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('MadaM') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "Wow";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('Wow') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "";\n    result = isPrimeLength(str);\n    if (result) {\n        std::cout << "isPrimeLength('') == false: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "HI";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('HI') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "go";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('go') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "gogo";\n    result = isPrimeLength(str);\n    if (result) {\n        std::cout << "isPrimeLength('gogo') == false: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "aaaaaaaaaaaaaaa";\n    result = isPrimeLength(str);\n    if (result) {\n        std::cout << "isPrimeLength('aaaaaaaaaaaaaaa') == false: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "Madam";\n    result = isPrimeLength(str);\n    if (!result) {\n        std::cout << "isPrimeLength('Madam') == true: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "M";\n    result = isPrimeLength(str);\n    if (result) {\n        std::cout << "isPrimeLength('M') == false: assertion failed" << std::endl;\n        return 1;\n    }\n\n    str = "0";\n    result = isPrimeLength(str);\n    if (result) {\n        std::cout << "isPrimeLength('0') == false: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <cstdlib>\n\nint starts_one_ends(int n) {\n    if (n < 1) {\n        return 0;\n    } else if (n == 1) {\n        return 1;\n    }\n\n    int out = 18;\n    for (int i = 2; i < n; i++) {\n        out *= 10;\n    }\n\n    return out;\n}\n\nint main() {\n    // Assertions\n    if (starts_one_ends(1)!= 1) {\n        std::cerr << "Assertion failed: starts_one_ends(1) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    if (starts_one_ends(2)!= 18) {\n        std::cerr << "Assertion failed: starts_one_ends(2) == 18" << std::endl;\n        std::exit(1);\n    }\n\n    if (starts_one_ends(3)!= 180) {\n        std::cerr << "Assertion failed: starts_one_ends(3) == 180" << std::endl;\n        std::exit(1);\n    }\n\n    if (starts_one_ends(4)!= 1800) {\n        std::cerr << "Assertion failed: starts_one_ends(4) == 1800" << std::endl;\n        std::exit(1);\n    }\n\n    if (starts_one_ends(5)!= 18000) {\n        std::cerr << "Assertion failed: starts_one_ends(5) == 18000" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string solve(int N) {\n    std::string str = std::to_string(N);\n    int sum = 0;\n\n    for (char c : str) {\n        sum += c - '0';\n    }\n\n    std::string bi;\n\n    while (sum > 0) {\n        bi = (sum % 2 == 0? "0" : "1") + bi;\n        sum /= 2;\n    }\n\n    if (bi.empty()) {\n        bi = "0";\n    }\n\n    return bi;\n}\n\nint main() {\n    std::string result;\n\n    result = solve(1000);\n    if (result!= "1") {\n        std::cout << "Assertion failed for solve(1000)" << std::endl;\n        return 1;\n    }\n\n    result = solve(150);\n    if (result!= "110") {\n        std::cout << "Assertion failed for solve(150)" << std::endl;\n        return 1;\n    }\n\n    result = solve(147);\n    if (result!= "1100") {\n        std::cout << "Assertion failed for solve(147)" << std::endl;\n        return 1;\n    }\n\n    result = solve(333);\n    if (result!= "1001") {\n        std::cout << "Assertion failed for solve(333)" << std::endl;\n        return 1;\n    }\n\n    result = solve(963);\n    if (result!= "10010") {\n        std::cout << "Assertion failed for solve(963)" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <stdexcept>\n\nint add(const std::vector<int>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size() / 2; ++i) {\n        if (lst[2 * i + 1] % 2 == 0) {\n            sum += lst[2 * i + 1];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    result = add({4, 88});\n    if (result!= 88) {\n        std::cerr << "Assertion failed: add({4, 88}) == 88" << std::endl;\n        return 1;\n    }\n\n    result = add({4, 5, 6, 7, 2, 122});\n    if (result!= 122) {\n        std::cerr << "Assertion failed: add({4, 5, 6, 7, 2, 122}) == 122" << std::endl;\n        return 1;\n    }\n\n    result = add({4, 0, 6, 7});\n    if (result!= 0) {\n        std::cerr << "Assertion failed: add({4, 0, 6, 7}) == 0" << std::endl;\n        return 1;\n    }\n\n    result = add({4, 4, 6, 8});\n    if (result!= 12) {\n        std::cerr << "Assertion failed: add({4, 4, 6, 8}) == 12" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool issame(vector<int>& a, vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<int> sort_array(vector<int>& array) {\n    vector<int> out = array;\n    int n = out.size();\n    if (n == 0) {\n        return out;\n    }\n\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (out[j] > out[j + 1]) {\n                swap(out[j], out[j + 1]);\n            }\n        }\n    }\n\n    if ((out[0] + out.back()) % 2 == 1) {\n        return out;\n    } else {\n        reverse(out.begin(), out.end());\n        return out;\n    }\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nvoid test_cases() {\n    assert(issame(sort_array({0}), {0}));\n    assert(issame(sort_array({5}), {5}));\n    assert(issame(sort_array({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5}));\n    assert(issame(sort_array({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0}));\n    assert(issame(sort_array({2, 1}), {1, 2}));\n    assert(issame(sort_array({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87}));\n    assert(issame(sort_array({21, 14, 23, 11}), {23, 21, 14, 11}));\n}\n\nint main() {\n    test_cases();\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint nextSmallest(const std::vector<int>& lst) {\n    if (lst.empty()) {\n        return -1;\n    }\n\n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\n    int res = -1;\n    for (int i = 1; i < sorted_lst.size(); i++) {\n        if (sorted_lst[i]!= sorted_lst[i-1]) {\n            res = sorted_lst[i];\n            break;\n        }\n    }\n\n    return res;\n}\n\nvoid sort(std::vector<int>& arr) {\n    std::sort(arr.begin(), arr.end());\n}\n\nint main() {\n    int result;\n\n    // Test case 1\n    std::vector<int> lst1 = {1, 2, 3, 4, 5};\n    result = nextSmallest(lst1);\n    if (result!= 2) {\n        std::cout << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2\n    std::vector<int> lst2 = {5, 1, 4, 3, 2};\n    result = nextSmallest(lst2);\n    if (result!= 2) {\n        std::cout << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 3\n    std::vector<int> lst3;\n    result = nextSmallest(lst3);\n    if (result!= -1) {\n        std::cout << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 4\n    std::vector<int> lst4 = {1, 1};\n    result = nextSmallest(lst4);\n    if (result!= -1) {\n        std::cout << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 5\n    std::vector<int> lst5 = {1, 1, 1, 1, 0};\n    result = nextSmallest(lst5);\n    if (result!= 1) {\n        std::cout << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 6\n    std::vector<int> lst6 = {-35, 34, 12, -45};\n    result = nextSmallest(lst6);\n    if (result!= -35) {\n        std::cout << "Test case 6 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nint is_bored(const string& S) {\n    int sum = 0;\n    bool isStart = true;\n    bool isI = false;\n    int lenS = S.length();\n\n    for (int i = 0; i < lenS; i++) {\n        if (S[i] =='' && isI) {\n            isI = false;\n            sum++;\n        }\n        if (S[i] == 'I' && isStart) {\n            isI = true;\n        } else {\n            isI = false;\n        }\n        if (S[i]!='') {\n            isStart = false;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isStart = true;\n        }\n    }\n    return sum;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(is_bored("Hello world") == 0);\n    assert(is_bored("Is the sky blue?") == 0);\n    assert(is_bored("I love It!") == 1);\n    assert(is_bored("bIt") == 0);\n    assert(is_bored("I feel good today. I will be productive. will kill It") == 2);\n    assert(is_bored("You and I are going for a walk") == 0);\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nbool any_int(double a, double b, double c) {\n    if (std::abs(a - std::floor(a)) > 1e-9) {\n        return false;\n    }\n    if (std::abs(b - std::floor(b)) > 1e-9) {\n        return false;\n    }\n    if (std::abs(c - std::floor(c)) > 1e-9) {\n        return false;\n    }\n    if (std::abs(a + b - c) < 1e-9 || std::abs(a + c - b) < 1e-9 || std::abs(b + c - a) < 1e-9) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    bool result;\n\n    result = any_int(2.0, 3.0, 1.0);\n    if (!result) {\n        std::cout << "Assertion failed: any_int(2, 3, 1) == true" << std::endl;\n        return 1;\n    }\n\n    result = any_int(2.5, 2.0, 3.0);\n    if (result) {\n        std::cout << "Assertion failed: any_int(2.5, 2, 3) == false" << std::endl;\n        return 1;\n    }\n\n    result = any_int(1.5, 5.0, 3.5);\n    if (result) {\n        std::cout << "Assertion failed: any_int(1.5, 5, 3.5) == false" << std::endl;\n        return 1;\n    }\n\n    result = any_int(2.0, 6.0, 2.0);\n    if (result) {\n        std::cout << "Assertion failed: any_int(2, 6, 2) == false" << std::endl;\n        return 1;\n    }\n\n    result = any_int(4.0, 2.0, 2.0);\n    if (!result) {\n        std::cout << "Assertion failed: any_int(4, 2, 2) == true" << std::endl;\n        return 1;\n    }\n\n    result = any_int(2.2, 2.2, 2.2);\n    if (result) {\n        std::cout << "Assertion failed: any_int(2.2, 2.2, 2.2) == false" << std::endl;\n        return 1;\n    }\n\n    result = any_int(-4.0, 6.0, 2.0);\n    if (!result) {\n        std::cout << "Assertion failed: any_int(-4, 6, 2) == true" << std::endl;\n        return 1;\n    }\n\n    result = any_int(2.0, 1.0, 1.0);\n    if (!result) {\n        std::cout << "Assertion failed: any_int(2, 1, 1) == true" << std::endl;\n        return 1;\n    }\n\n    result = any_int(3.0, 4.0, 7.0);\n    if (!result) {\n        std::cout << "Assertion failed: any_int(3, 4, 7) == true" << std::endl;\n        return 1;\n    }\n\n    result = any_int(3.01, 4.0, 7.0);\n    if (result) {\n        std::cout << "Assertion failed: any_int(3.01, 4, 7) == false" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <string>\n\nint skjkasdkd(const std::vector<int>& lst) {\n    int sum = 0;\n    int largest = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            bool prime = true;\n            for (int j = 2; j <= std::sqrt(lst[i]); j++) {\n                if (lst[i] % j == 0) {\n                    prime = false;\n                    break;\n                }\n            }\n            if (prime) largest = lst[i];\n        }\n    }\n\n    std::string s = std::to_string(largest);\n    for (char c : s) {\n        sum += c - '0';\n    }\n\n    return sum;\n}\n\nint main() {\n    int result;\n\n    result = skjkasdkd({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3});\n    if (result!= 10) {\n        std::cerr << "Assertion failed: result /= 10" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1});\n    if (result!= 25) {\n        std::cerr << "Assertion failed: result /= 25" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3});\n    if (result!= 13) {\n        std::cerr << "Assertion failed: result /= 13" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6});\n    if (result!= 11) {\n        std::cerr << "Assertion failed: result /= 11" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({0, 81, 12, 3, 1, 21});\n    if (result!= 3) {\n        std::cerr << "Assertion failed: result /= 3" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({0, 8, 1, 2, 1, 7});\n    if (result!= 7) {\n        std::cerr << "Assertion failed: result /= 7" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({8191});\n    if (result!= 19) {\n        std::cerr << "Assertion failed: result /= 19" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({8191, 123456, 127, 7});\n    if (result!= 19) {\n        std::cerr << "Assertion failed: result /= 19" << std::endl;\n        return 1;\n    }\n\n    result = skjkasdkd({127, 97, 8192});\n    if (result!= 10) {\n        std::cerr << "Assertion failed: result /= 10" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n\nint multiply(int a, int b) {\n    return (abs(a) % 10) * (abs(b) % 10);\n}\n\nint main() {\n    int result;\n\n    // Assertions\n    result = multiply(148, 412);\n    if (result!= 16) {\n        std::cerr << "Assertion failed: multiply(148, 412) == 16" << std::endl;\n        return 1;\n    }\n\n    result = multiply(19, 28);\n    if (result!= 72) {\n        std::cerr << "Assertion failed: multiply(19, 28) == 72" << std::endl;\n        return 1;\n    }\n\n    result = multiply(2020, 1851);\n    if (result!= 0) {\n        std::cerr << "Assertion failed: multiply(2020, 1851) == 0" << std::endl;\n        return 1;\n    }\n\n    result = multiply(14, -15);\n    if (result!= 20) {\n        std::cerr << "Assertion failed: multiply(14, -15) == 20" << std::endl;\n        return 1;\n    }\n\n    result = multiply(76, 67);\n    if (result!= 42) {\n        std::cerr << "Assertion failed: multiply(76, 67) == 42" << std::endl;\n        return 1;\n    }\n\n    result = multiply(17, 27);\n    if (result!= 49) {\n        std::cerr << "Assertion failed: multiply(17, 27) == 49" << std::endl;\n        return 1;\n    }\n\n    result = multiply(0, 1);\n    if (result!= 0) {\n        std::cerr << "Assertion failed: multiply(0, 1) == 0" << std::endl;\n        return 1;\n    }\n\n    result = multiply(0, 0);\n    if (result!= 0) {\n        std::cerr << "Assertion failed: multiply(0, 0) == 0" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nint count_upper(const std::string& s) {\n    int count = 0;\n    for (char c : s) {\n        if (std::toupper(c) == 'A' || std::toupper(c) == 'E' || std::toupper(c) == 'I' || std::toupper(c) == 'O' || std::toupper(c) == 'U') {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    result = count_upper("aBCdEf");\n    if (result!= 1) {\n        std::cout << "Assertion failed: count_upper('aBCdEf') == 1" << std::endl;\n        return 1;\n    }\n\n    result = count_upper("abcdefg");\n    if (result!= 0) {\n        std::cout << "Assertion failed: count_upper('abcdefg') == 0" << std::endl;\n        return 1;\n    }\n\n    result = count_upper("dBBE");\n    if (result!= 0) {\n        std::cout << "Assertion failed: count_upper('dBBE') == 0" << std::endl;\n        return 1;\n    }\n\n    result = count_upper("B");\n    if (result!= 0) {\n        std::cout << "Assertion failed: count_upper('B') == 0" << std::endl;\n        return 1;\n    }\n\n    result = count_upper("U");\n    if (result!= 1) {\n        std::cout << "Assertion failed: count_upper('U') == 1" << std::endl;\n        return 1;\n    }\n\n    result = count_upper("");\n    if (result!= 0) {\n        std::cout << "Assertion failed: count_upper('') == 0" << std::endl;\n        return 1;\n    }\n\n    result = count_upper("EEEE");\n    if (result!= 2) {\n        std::cout << "Assertion failed: count_upper('EEEE') == 2" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <limits>\n\nusing namespace std;\n\nint closestInteger(string value) {\n    double w;\n    istringstream iss(value);\n    iss >> w;\n    return static_cast<int>(w);\n}\n\nvoid assert(bool condition, string message) {\n    if (!condition) {\n        cout << message << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(closestInteger("10") == 10, "Assertion failed: closest_integer('10') == 10");\n    assert(closestInteger("14.5") == 15, "Assertion failed: closest_integer('14.5') == 15");\n    assert(closestInteger("-15.5") == -16, "Assertion failed: closest_integer('-15.5') == -16");\n    assert(closestInteger("15.3") == 15, "Assertion failed: closest_integer('15.3') == 15");\n    assert(closestInteger("0") == 0, "Assertion failed: closest_integer('0') == 0");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid makeAPile(int n, vector<int>& out) {\n    out.clear();\n    out.push_back(n);\n    for (int i = 2; i <= n; i++) {\n        out.push_back(out[i-1] + 2);\n    }\n}\n\nbool isSame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> pile;\n    makeAPile(3, pile);\n    assert(isSame(pile, vector<int>{3, 5, 7}));\n\n    makeAPile(4, pile);\n    assert(isSame(pile, vector<int>{4, 6, 8, 10}));\n\n    makeAPile(5, pile);\n    assert(isSame(pile, vector<int>{5, 7, 9, 11, 13}));\n\n    makeAPile(6, pile);\n    assert(isSame(pile, vector<int>{6, 8, 10, 12, 14, 16}));\n\n    makeAPile(8, pile);\n    assert(isSame(pile, vector<int>{8, 10, 12, 14, 16, 18, 20, 22}));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cstdlib>\n\nint choose_num(int x, int y) {\n    if (y < x) {\n        return -1;\n    } else if (y == x && y % 2 == 1) {\n        return -1;\n    } else if (y % 2 == 1) {\n        return y - 1;\n    } else {\n        return y;\n    }\n}\n\nint main() {\n    int result;\n\n    result = choose_num(12, 15);\n    if (result!= 14) {\n        std::cerr << "Assertion failed: choose_num(12, 15) == 14" << std::endl;\n        std::exit(1);\n    }\n\n    result = choose_num(13, 12);\n    if (result!= -1) {\n        std::cerr << "Assertion failed: choose_num(13, 12) == -1" << std::endl;\n        std::exit(1);\n    }\n\n    result = choose_num(33, 12354);\n    if (result!= 12354) {\n        std::cerr << "Assertion failed: choose_num(33, 12354) == 12354" << std::endl;\n        std::exit(1);\n    }\n\n    result = choose_num(5234, 5233);\n    if (result!= -1) {\n        std::cerr << "Assertion failed: choose_num(5234, 5233) == -1" << std::endl;\n        std::exit(1);\n    }\n\n    result = choose_num(6, 29);\n    if (result!= 28) {\n        std::cerr << "Assertion failed: choose_num(6, 29) == 28" << std::endl;\n        std::exit(1);\n    }\n\n    result = choose_num(27, 10);\n    if (result!= -1) {\n        std::cerr << "Assertion failed: choose_num(27, 10) == -1" << std::endl;\n        std::exit(1);\n    }\n\n    result = choose_num(7, 7);\n    if (result!= -1) {\n        std::cerr << "Assertion failed: choose_num(7, 7) == -1" << std::endl;\n        std::exit(1);\n    }\n\n    result = choose_num(546, 546);\n    if (result!= 546) {\n        std::cerr << "Assertion failed: choose_num(546, 546) == 546" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <stdexcept>\n\nstd::string roundedAvg(int n, int m) {\n    if (n > m) {\n        return "-1";\n    }\n\n    int num = (m + n) / 2;\n    std::string tempOut = "";\n    while (num > 0) {\n        int remainder = num % 2;\n        tempOut = (char)(remainder + '0') + tempOut;\n        num /= 2;\n    }\n\n    if (tempOut.empty()) {\n        tempOut = "0";\n    }\n\n    return tempOut;\n}\n\nvoid assert(bool condition, const std::string& message) {\n    if (!condition) {\n        std::cerr << message << std::endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(roundedAvg(1, 5) == "11", "Assertion failed: roundedAvg(1, 5) == '11'");\n    assert(roundedAvg(7, 13) == "1010", "Assertion failed: roundedAvg(7, 13) == '1010'");\n    assert(roundedAvg(964, 977) == "1111001010", "Assertion failed: roundedAvg(964, 977) == '1111001010'");\n    assert(roundedAvg(996, 997) == "1111100100", "Assertion failed: roundedAvg(996, 997) == '1111100100'");\n    assert(roundedAvg(560, 851) == "1011000001", "Assertion failed: roundedAvg(560, 851) == '1011000001'");\n    assert(roundedAvg(185, 546) == "101101101", "Assertion failed: roundedAvg(185, 546) == '101101101'");\n    assert(roundedAvg(362, 496) == "110101101", "Assertion failed: roundedAvg(362, 496) == '110101101'");\n    assert(roundedAvg(350, 902) == "1001110010", "Assertion failed: roundedAvg(350, 902) == '1001110010'");\n    assert(roundedAvg(197, 233) == "11010111", "Assertion failed: roundedAvg(197, 233) == '11010111'");\n    assert(roundedAvg(7, 5) == "-1", "Assertion failed: roundedAvg(7, 5) == '-1'");\n    assert(roundedAvg(5, 1) == "-1", "Assertion failed: roundedAvg(5, 1) == '-1'");\n    assert(roundedAvg(5, 5) == "101", "Assertion failed: roundedAvg(5, 5) == '101'");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <stdexcept>\n\nusing namespace std;\n\nstruct numto_type {\n    int key;\n    string value;\n};\n\nvector<string> sort_array(vector<int>& arr) {\n    sort(arr.begin(), arr.end());\n    vector<string> result;\n    for (int i = arr.size() - 1; i >= 0; --i) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            result.push_back(numto_type(arr[i] + 1).value);\n        }\n    }\n    return result;\n}\n\nvector<string> by_length(vector<int>& arr) {\n    sort_array(arr);\n    vector<string> result;\n    int count = 0;\n    for (int i = arr.size() - 1; i >= 0; --i) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            count++;\n        }\n    }\n    result.resize(count);\n    count = 0;\n    for (int i = arr.size() - 1; i >= 0; --i) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            count++;\n            result[count - 1] = numto_type(arr[i] + 1).value;\n        }\n    }\n    return result;\n}\n\nbool issame(vector<string>& a, vector<string>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); ++i) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<string> result;\n    vector<string> expected1 = {"Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"};\n    vector<string> expected2 = {"One"};\n    vector<string> expected3 = {"Three", "Two", "One"};\n    vector<string> expected4 = {"Nine", "Eight", "Four"};\n\n    vector<int> arr = {2, 1, 1, 4, 5, 8, 2, 3};\n    result = by_length(arr);\n    if (!issame(result, expected1)) {\n        cout << "Test 1: assertion failed" << endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr = {};\n    result = by_length(arr);\n    if (!issame(result, expected2)) {\n        cout << "Test 2: assertion failed" << endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr = {1, -1, 55};\n    result = by_length(arr);\n    if (!issame(result, expected2)) {\n        cout << "Test 3: assertion failed" << endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr = {1, -1, 3, 2};\n    result = by_length(arr);\n    if (!issame(result, expected3)) {\n        cout << "Test 4: assertion failed" << endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr = {9, 4, 8};\n    result = by_length(arr);\n    if (!issame(result, expected4)) {\n        cout << "Test 5: assertion failed" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed." << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> f(int n) {\n    std::vector<int> out(n);\n    int sum = 0;\n    int prod = 1;\n\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n        prod *= i;\n        if (i % 2 == 0) {\n            out[i - 1] = prod;\n        } else {\n            out[i - 1] = sum;\n        }\n    }\n    return out;\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> result;\n    std::vector<int> expected1 = {1, 2, 6, 24, 15};\n    std::vector<int> expected2 = {1, 2, 6, 24, 15, 720, 28};\n    std::vector<int> expected3 = {1};\n    std::vector<int> expected4 = {1, 2, 6};\n\n    result = f(5);\n    if (!issame(result, expected1)) {\n        std::cout << "Assertion failed for f(5)" << std::endl;\n        return 1;\n    }\n\n    result = f(7);\n    if (!issame(result, expected2)) {\n        std::cout << "Assertion failed for f(7)" << std::endl;\n        return 1;\n    }\n\n    result = f(1);\n    if (!issame(result, expected3)) {\n        std::cout << "Assertion failed for f(1)" << std::endl;\n        return 1;\n    }\n\n    result = f(3);\n    if (!issame(result, expected4)) {\n        std::cout << "Assertion failed for f(3)" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<int> even_odd_palindrome(int n) {\n    int num1 = 0;\n    int num2 = 0;\n    for (int i = 1; i <= n; i++) {\n        string w = to_string(i);\n        string p = w;\n        reverse(p.begin(), p.end());\n        if (w == p) {\n            if (i % 2 == 1) {\n                num1++;\n            } else {\n                num2++;\n            }\n        }\n    }\n    return {num2, num1};\n}\n\nbool issame(vector<int> a, vector<int> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid test_even_odd_palindrome(int n, vector<int> expected) {\n    vector<int> result = even_odd_palindrome(n);\n    if (!issame(result, expected)) {\n        cout << "Assertion failed for n = " << n << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    test_even_odd_palindrome(123, {8, 13});\n    test_even_odd_palindrome(12, {4, 6});\n    test_even_odd_palindrome(3, {1, 2});\n    test_even_odd_palindrome(63, {6, 8});\n    test_even_odd_palindrome(25, {5, 6});\n    test_even_odd_palindrome(19, {4, 6});\n    test_even_odd_palindrome(9, {4, 5});\n    test_even_odd_palindrome(1, {0, 1});\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint count_nums(const std::vector<int>& n) {\n    int num = 0;\n    for (int i = 0; i < n.size(); i++) {\n        if (n[i] > 0) {\n            num++;\n        } else {\n            int sum = 0;\n            int w = std::abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w /= 10;\n            }\n            sum -= w;\n            if (sum > 0) num++;\n        }\n    }\n    return num;\n}\n\nint main() {\n    int result;\n\n    result = count_nums({0});\n    if (result!= 0) {\n        std::cout << "Assertion failed: count_nums({}) == 0" << std::endl;\n        return 1;\n    }\n\n    result = count_nums({-1, -2, 0});\n    if (result!= 0) {\n        std::cout << "Assertion failed: count_nums({-1, -2, 0}) == 0" << std::endl;\n        return 1;\n    }\n\n    result = count_nums({1, 1, 2, -2, 3, 4, 5});\n    if (result!= 6) {\n        std::cout << "Assertion failed: count_nums({1, 1, 2, -2, 3, 4, 5}) == 6" << std::endl;\n        return 1;\n    }\n\n    result = count_nums({1, 6, 9, -6, 0, 1, 5});\n    if (result!= 5) {\n        std::cout << "Assertion failed: count_nums({1, 6, 9, -6, 0, 1, 5}) == 5" << std::endl;\n        return 1;\n    }\n\n    result = count_nums({1, 100, 98, -7, 1, -1});\n    if (result!= 4) {\n        std::cout << "Assertion failed: count_nums({1, 100, 98, -7, 1, -1}) == 4" << std::endl;\n        return 1;\n    }\n\n    result = count_nums({12, 23, 34, -45, -56, 0});\n    if (result!= 5) {\n        std::cout << "Assertion failed: count_nums({12, 23, 34, -45, -56, 0}) == 5" << std::endl;\n        return 1;\n    }\n\n    result = count_nums({-0, 1});\n    if (result!= 1) {\n        std::cout << "Assertion failed: count_nums({-0, 1}) == 1" << std::endl;\n        return 1;\n    }\n\n    result = count_nums({1});\n    if (result!= 1) {\n        std::cout << "Assertion failed: count_nums({1}) == 1" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool moveOneBall(const std::vector<int>& arr) {\n    if (arr.empty()) {\n        return true;\n    }\n\n    int num = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            num++;\n        }\n    }\n\n    if (arr.back() > arr.front()) {\n        num++;\n    }\n\n    return num < 2;\n}\n\nint main() {\n    bool result;\n\n    // Test cases\n    std::vector<int> arr(5);\n    arr = {3, 4, 5, 1, 2};\n    result = moveOneBall(arr);\n    if (!result) {\n        std::cout << "Assertion failed for {3, 4, 5, 1, 2}" << std::endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr.resize(5);\n    arr = {3, 5, 10, 1, 2};\n    result = moveOneBall(arr);\n    if (!result) {\n        std::cout << "Assertion failed for {3, 5, 10, 1, 2}" << std::endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr.resize(4);\n    arr = {4, 3, 1, 2};\n    result = moveOneBall(arr);\n    if (result) {\n        std::cout << "Assertion failed for {4, 3, 1, 2}" << std::endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr.resize(5);\n    arr = {3, 5, 4, 1, 2};\n    result = moveOneBall(arr);\n    if (result) {\n        std::cout << "Assertion failed for {3, 5, 4, 1, 2}" << std::endl;\n        return 1;\n    }\n\n    arr.clear();\n    arr.resize(0);\n    result = moveOneBall(arr);\n    if (!result) {\n        std::cout << "Assertion failed for {}" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <string>\n\nstd::string exchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) num++;\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 == 0) num++;\n    }\n\n    if (num >= lst1.size()) {\n        return "YES";\n    } else {\n        return "NO";\n    }\n}\n\nint main() {\n    std::vector<int> v1 = {1, 2, 3, 4};\n    std::vector<int> v2 = {1, 2, 3, 4};\n    std::string result = exchange(v1, v2);\n    if (result!= "YES") {\n        std::cout << "Assertion failed: exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == 'YES'" << std::endl;\n        return 1;\n    }\n\n    v1 = {1, 2, 3, 4};\n    v2 = {1, 5, 3, 4};\n    result = exchange(v1, v2);\n    if (result!= "NO") {\n        std::cout << "Assertion failed: exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == 'NO'" << std::endl;\n        return 1;\n    }\n\n    v1 = {1, 2, 3, 4};\n    v2 = {2, 1, 4, 3};\n    result = exchange(v1, v2);\n    if (result!= "YES") {\n        std::cout << "Assertion failed: exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == 'YES'" << std::endl;\n        return 1;\n    }\n\n    v1 = {5, 7, 3};\n    v2 = {2, 6, 4};\n    result = exchange(v1, v2);\n    if (result!= "YES") {\n        std::cout << "Assertion failed: exchange({5, 7, 3}, {2, 6, 4}) == 'YES'" << std::endl;\n        return 1;\n    }\n\n    v1 = {5, 7, 3};\n    v2 = {2, 6, 3};\n    result = exchange(v1, v2);\n    if (result!= "NO") {\n        std::cout << "Assertion failed: exchange({5, 7, 3}, {2, 6, 3}) == 'NO'" << std::endl;\n        return 1;\n    }\n\n    v1 = {3, 2, 6, 1, 8, 9};\n    v2 = {3, 5, 5, 1, 1, 1};\n    result = exchange(v1, v2);\n    if (result!= "NO") {\n        std::cout << "Assertion failed: exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == 'NO'" << std::endl;\n        return 1;\n    }\n\n    v1 = {100, 200};\n    v2 = {200, 200};\n    result = exchange(v1, v2);\n    if (result!= "YES") {\n        std::cout << "Assertion failed: exchange({100, 200}, {200, 200}) == 'YES'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid odd_count(const vector<string>& input, vector<string>& output) {\n    for (const auto& str : input) {\n        int sum = 0;\n        for (char c : str) {\n            if (isdigit(c) && (c - '0') % 2 == 1) {\n                sum++;\n            }\n        }\n        string s = "the number of odd elements in the string i of the input.";\n        string s2;\n        size_t pos = 0;\n        for (char c : s) {\n            if (c == 'i') {\n                string temp = to_string(sum);\n                s2 += temp;\n                pos += temp.size();\n            } else {\n                s2 += c;\n                pos++;\n            }\n        }\n        output.push_back(s2);\n    }\n}\n\nbool issame(const vector<string>& a, const vector<string>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid print_results(const vector<string>& output, const vector<string>& expected) {\n    cout << "Actual Output:" << endl;\n    for (const auto& str : output) {\n        cout << str << endl;\n    }\n    cout << "Expected Output:" << endl;\n    for (const auto& str : expected) {\n        cout << str << endl;\n    }\n}\n\nint main() {\n    vector<string> input, output, expected;\n\n    // Test case 1\n    input.clear();\n    input.push_back("1234567");\n    expected.clear();\n    expected.push_back("the number of odd elements in the string i of the input.");\n    odd_count(input, output);\n    print_results(output, expected);\n    if (!issame(output, expected)) {\n        cout << "Assertion failed" << endl;\n        return 1;\n    }\n\n    // Test case 2\n    input.clear();\n    input.push_back("3");\n    input.push_back("11111111");\n    expected.clear();\n    expected.push_back("the number of odd elements in the string i of the input.");\n    expected.push_back("the number of odd elements in the string i of the input.");\n    odd_count(input, output);\n    print_results(output, expected);\n    if (!issame(output, expected)) {\n        cout << "Assertion failed" << endl;\n        return 1;\n    }\n\n    // Test case 3\n    input.clear();\n    input.push_back("271");\n    input.push_back("137");\n    input.push_back("314");\n    expected.clear();\n    expected.push_back("the number of odd elements in the string i of the input.");\n    expected.push_back("the number of odd elements in the string i of the input.");\n    expected.push_back("the number of odd elements in the string i of the input.");\n    odd_count(input, output);\n    print_results(output, expected);\n    if (!issame(output, expected)) {\n        cout << "Assertion failed" << endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstd::vector<int> sort_array(const std::vector<int>& arr) {\n    std::vector<int> sorted_arr = arr;\n    std::vector<int> bin(arr.size());\n\n    // Calculate the number of 1s in the binary representation of each element\n    for (int i = 0; i < arr.size(); i++) {\n        int b = 0;\n        int n = std::abs(arr[i]);\n        while (n > 0) {\n            b += n % 2;\n            n /= 2;\n        }\n        bin[i] = b;\n    }\n\n    // Sort the array based on the bin values and the original values\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i + 1; j < arr.size(); j++) {\n            if (bin[j] < bin[i] || (bin[j] == bin[i] && arr[j] < arr[i])) {\n                int m = arr[j];\n                arr[j] = arr[i];\n                arr[i] = m;\n                m = bin[j];\n                bin[j] = bin[i];\n                bin[i] = m;\n            }\n        }\n    }\n    return sorted_arr;\n}\n\nvoid test_case(const std::vector<int>& arr, const std::vector<int>& expected) {\n    std::vector<int> sorted_arr = sort_array(arr);\n    if (!issame(sorted_arr, expected)) {\n        std::cout << "Assertion failed" << std::endl;\n        exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    test_case({1, 5, 2, 3, 4}, {1, 2, 4, 3, 5});\n    test_case({-2, -3, -4, -5, -6}, {-4, -2, -6, -5, -3});\n    test_case({1, 0, 2, 3, 4}, {0, 1, 2, 4, 3});\n    test_case({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}, {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77});\n    test_case({3, 6, 44, 12, 32, 5}, {32, 3, 5, 6, 12, 44});\n    test_case({2, 4, 8, 16, 32}, {2, 4, 8, 16, 32});\n    test_case({2, 4, 8, 16, 32}, {2, 4, 8, 16, 32});\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring getClosestVowel(const string& word) {\n    string vowels = "AEIOUaeiou";\n    for (int i = word.length() - 1; i >= 0; --i) {\n        if (vowels.find(tolower(word[i]))!= string::npos) {\n            if (i > 0 && i < word.length() - 1 && vowels.find(tolower(word[i - 1])) == string::npos && vowels.find(tolower(word[i + 1])) == string::npos) {\n                return string(1, word[i]);\n            }\n        }\n    }\n    return "";\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(getClosestVowel("yogurt") == "u");\n    assert(getClosestVowel("full") == "u");\n    assert(getClosestVowel("easy") == "");\n    assert(getClosestVowel("eAsy") == "");\n    assert(getClosestVowel("ali") == "");\n    assert(getClosestVowel("bad") == "a");\n    assert(getClosestVowel("most") == "o");\n    assert(getClosestVowel("ab") == "");\n    assert(getClosestVowel("ba") == "");\n    assert(getClosestVowel("quick") == "");\n    assert(getClosestVowel("anime") == "i");\n    assert(getClosestVowel("Asia") == "");\n    assert(getClosestVowel("Above") == "o");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <assert.h>\n\nusing namespace std;\n\nvector<int> bubble_sort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n    return arr;\n}\n\nvector<int> maximum(vector<int>& arr, int k) {\n    vector<int> sorted_arr = arr;\n    bubble_sort(sorted_arr);\n    vector<int> out(k);\n    copy(sorted_arr.rbegin() + (sorted_arr.size() - k), sorted_arr.rend(), out.begin());\n    return out;\n}\n\nbool issame(vector<int>& a, vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nvoid run_tests() {\n    vector<int> expected;\n\n    assert(issame(maximum({-3, -4, 5}, 3), { -4, -3, 5 }));\n    assert(issame(maximum({4, -4, 4}, 2), { 4, 4 }));\n    assert(issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1), { 2 }));\n    assert(issame(maximum({123, -123, 20, 0, 1, 2, -3}, 3), { 2, 20, 123 }));\n    assert(issame(maximum({-123, 20, 0, 1, 2, -3}, 4), { 0, 1, 2, 20 }));\n    assert(issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7), { -13, -8, 0, 0, 3, 5, 15 }));\n    assert(issame(maximum({-1, 0, 2, 5, 3, -10}, 2), { 3, 5 }));\n    assert(issame(maximum({1, 0, 5, -7}, 1), { 5 }));\n    assert(issame(maximum({4, -4}, 2), { -4, 4 }));\n    assert(issame(maximum({-10, 10}, 2), { -10, 10 }));\n\n    // Handle the empty array case separately\n    assert(issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0), vector<int>()));\n}\n\nint main() {\n    run_tests();\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n\nint solutions(const std::vector<int>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    result = solutions({5, 8, 7, 1});\n    if (result!= 12) {\n        std::cout << "Assertion failed: solutions({5, 8, 7, 1}) == 12" << std::endl;\n        return 1;\n    }\n\n    result = solutions({3, 3, 3, 3, 3});\n    if (result!= 9) {\n        std::cout << "Assertion failed: solutions({3, 3, 3, 3, 3}) == 9" << std::endl;\n        return 1;\n    }\n\n    result = solutions({30, 13, 24, 321});\n    if (result!= 0) {\n        std::cout << "Assertion failed: solutions({30, 13, 24, 321}) == 0" << std::endl;\n        return 1;\n    }\n\n    result = solutions({5, 9});\n    if (result!= 5) {\n        std::cout << "Assertion failed: solutions({5, 9}) == 5" << std::endl;\n        return 1;\n    }\n\n    result = solutions({2, 4, 8});\n    if (result!= 0) {\n        std::cout << "Assertion failed: solutions({2, 4, 8}) == 0" << std::endl;\n        return 1;\n    }\n\n    result = solutions({30, 13, 23, 32});\n    if (result!= 23) {\n        std::cout << "Assertion failed: solutions({30, 13, 23, 32}) == 23" << std::endl;\n        return 1;\n    }\n\n    result = solutions({3, 13, 2, 9});\n    if (result!= 3) {\n        std::cout << "Assertion failed: solutions({3, 13, 2, 9}) == 3" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <stdexcept>\n\nint add_elements(const std::vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    std::vector<int> arr1 = {1, -2, -3, 41, 57, 76, 87, 88, 99};\n    result = add_elements(arr1, 3);\n    if (result!= -4) {\n        std::cerr << "Assertion failed: result /= -4" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr2 = {111, 121, 3, 4000, 5, 6};\n    result = add_elements(arr2, 2);\n    if (result!= 0) {\n        std::cerr << "Assertion failed: result /= 0" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr3 = {11, 21, 3, 90, 5, 6, 7, 8, 9};\n    result = add_elements(arr3, 4);\n    if (result!= 125) {\n        std::cerr << "Assertion failed: result /= 125" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr4 = {111, 21, 3, 4000, 5, 6, 7, 8, 9};\n    result = add_elements(arr4, 4);\n    if (result!= 24) {\n        std::cerr << "Assertion failed: result /= 24" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr5 = {1};\n    result = add_elements(arr5, 1);\n    if (result!= 1) {\n        std::cerr << "Assertion failed: result /= 1" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid test_odd_collatz(int n, vector<int> expected) {\n    vector<int> result = get_odd_collatz(n);\n    if (result!= expected) {\n        cout << "Assertion failed for n = " << n << endl;\n        exit(1);\n    }\n}\n\nvector<int> get_odd_collatz(int n) {\n    vector<int> out;\n    out.push_back(1);\n    int temp = n;\n    int count = 1;\n\n    while (temp!= 1) {\n        if (temp % 2 == 1) {\n            count++;\n            vector<int> temp_array(count);\n            for (int i = 0; i < count - 1; i++) {\n                temp_array[i] = out[i];\n            }\n            temp_array[count - 1] = temp;\n            out = temp_array;\n            temp = temp * 3 + 1;\n        } else {\n            temp = temp / 2;\n        }\n    }\n\n    sort(out.begin(), out.end());\n    return out;\n}\n\nbool issame(vector<int> a, vector<int> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid sort(vector<int>& array) {\n    for (int i = 0; i < array.size() - 1; i++) {\n        for (int j = i + 1; j < array.size(); j++) {\n            if (array[i] > array[j]) {\n                swap(array[i], array[j]);\n            }\n        }\n    }\n}\n\nint main() {\n    test_odd_collatz(14, {1, 5, 7, 11, 13, 17});\n    test_odd_collatz(5, {1, 5});\n    test_odd_collatz(12, {1, 3, 5});\n    test_odd_collatz(1, {1});\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <cctype>\n\nusing namespace std;\n\nbool valid_date(const string& date) {\n    if (date.length()!= 10) {\n        return false;\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i]!= '-') {\n                return false;\n            }\n        } else {\n            if (!isdigit(date[i])) {\n                return false;\n            }\n        }\n    }\n\n    int mm, dd, yy;\n    istringstream iss(date);\n    iss >> mm >> date(3) >> date(6) >> yy;\n\n    if (mm < 1 || mm > 12) {\n        return false;\n    }\n\n    if (dd < 1 || dd > 31) {\n        return false;\n    }\n\n    if (dd == 31 && (mm == 4 || mm == 6 || mm == 9 || mm == 11 || mm == 2)) {\n        return false;\n    }\n\n    if (dd == 30 && mm == 2) {\n        return false;\n    }\n\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nstring pad(const string& str) {\n    ostringstream oss;\n    oss << str;\n    for (int i = 0; i < 10 - str.length(); i++) {\n        oss <<'';\n    }\n    return oss.str();\n}\n\nint main() {\n    assert(valid_date(pad("03-11-2000")));\n    assert(!valid_date(pad("15-01-2012")));\n    assert(!valid_date(pad("04-0-2040")));\n    assert(valid_date(pad("06-04-2020")));\n    assert(valid_date(pad("01-01-2007")));\n    assert(!valid_date(pad("03-32-2011")));\n    assert(!valid_date(pad("")));\n    assert(!valid_date(pad("04-31-3000")));\n    assert(valid_date(pad("06-06-2005")));\n    assert(!valid_date(pad("21-31-2000")));\n    assert(valid_date(pad("04-12-2003")));\n    assert(!valid_date(pad("04122003")));\n    assert(!valid_date(pad("20030412")));\n    assert(!valid_date(pad("2003-04")));\n    assert(!valid_date(pad("2003-04-12")));\n    assert(!valid_date(pad("04-2003")));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool is_sorted(const vector<int>& lst) {\n    if (lst.size() <= 1) return true;\n\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < lst[i-1]) return false;\n        if (i >= 2 && lst[i] == lst[i-1] && lst[i] == lst[i-2]) return false;\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> lst;\n\n    assert(is_sorted({5}) && "Expected is_sorted({5}) to return true");\n\n    lst = {1, 2, 3, 4, 5};\n    assert(is_sorted(lst) && "Expected is_sorted({1, 2, 3, 4, 5}) to return true");\n\n    lst = {1, 3, 2, 4, 5};\n    assert(!is_sorted(lst) && "Expected is_sorted({1, 3, 2, 4, 5}) to return false");\n\n    lst = {1, 2, 3, 4, 5, 6};\n    assert(is_sorted(lst) && "Expected is_sorted({1, 2, 3, 4, 5, 6}) to return true");\n\n    lst = {1, 2, 3, 4, 5, 7};\n    assert(is_sorted(lst) && "Expected is_sorted({1, 2, 3, 4, 5, 7}) to return true");\n\n    lst = {1, 3, 2, 4, 5, 7};\n    assert(!is_sorted(lst) && "Expected is_sorted({1, 3, 2, 4, 5, 7}) to return false");\n\n    lst = {};\n    assert(is_sorted(lst) && "Expected is_sorted({}) to return true");\n\n    lst = {1};\n    assert(is_sorted(lst) && "Expected is_sorted({1}) to return true");\n\n    lst = {3, 2, 1};\n    assert(!is_sorted(lst) && "Expected is_sorted({3, 2, 1}) to return false");\n\n    lst = {1, 2, 2, 2, 3, 4};\n    assert(!is_sorted(lst) && "Expected is_sorted({1, 2, 2, 2, 3, 4}) to return false");\n\n    lst = {1, 2, 3, 3, 3, 4};\n    assert(!is_sorted(lst) && "Expected is_sorted({1, 2, 3, 3, 3, 4}) to return false");\n\n    lst = {1, 2, 2, 3, 3, 4};\n    assert(is_sorted(lst) && "Expected is_sorted({1, 2, 2, 3, 3, 4}) to return true");\n\n    lst = {1, 2, 3, 4};\n    assert(is_sorted(lst) && "Expected is_sorted({1, 2, 3, 4}) to return true");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring intersection(int interval1[], int interval2[]) {\n    int inter1 = max(interval1[0], interval2[0]);\n    int inter2 = min(interval1[1], interval2[1]);\n    int l = inter2 - inter1;\n\n    if (l < 2) {\n        return "NO";\n    }\n\n    for (int i = 2; i * i <= l; i++) {\n        if (l % i == 0) {\n            return "NO";\n        }\n    }\n\n    return "YES";\n}\n\nint main() {\n    string result;\n\n    result = intersection({1, 2}, {2, 3});\n    if (result!= "NO") {\n        cout << "Assertion failed: intersection([1, 2], [2, 3]) == 'NO'" << endl;\n        return 1;\n    }\n\n    result = intersection({-1, 1}, {0, 4});\n    if (result!= "NO") {\n        cout << "Assertion failed: intersection([-1, 1], [0, 4]) == 'NO'" << endl;\n        return 1;\n    }\n\n    result = intersection({-3, -1}, {-5, 5});\n    if (result!= "YES") {\n        cout << "Assertion failed: intersection([-3, -1], [-5, 5]) == 'YES'" << endl;\n        return 1;\n    }\n\n    result = intersection({-2, 2}, {-4, 0});\n    if (result!= "YES") {\n        cout << "Assertion failed: intersection([-2, 2], [-4, 0]) == 'YES'" << endl;\n        return 1;\n    }\n\n    result = intersection({-11, 2}, {-1, -1});\n    if (result!= "NO") {\n        cout << "Assertion failed: intersection([-11, 2], [-1, -1]) == 'NO'" << endl;\n        return 1;\n    }\n\n    result = intersection({1, 2}, {3, 5});\n    if (result!= "NO") {\n        cout << "Assertion failed: intersection([1, 2], [3, 5]) == 'NO'" << endl;\n        return 1;\n    }\n\n    result = intersection({1, 2}, {1, 2});\n    if (result!= "NO") {\n        cout << "Assertion failed: intersection([1, 2], [1, 2]) == 'NO'" << endl;\n        return 1;\n    }\n\n    result = intersection({-2, -2}, {-3, -2});\n    if (result!= "NO") {\n        cout << "Assertion failed: intersection([-2, -2], [-3, -2]) == 'NO'" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed." << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <stdexcept>\n\nint prod_signs(const std::vector<int>& arr) {\n    if (arr.empty() || (arr.size() == 1 && arr[0] == 0)) {\n        return -32768;\n    }\n\n    int sum = 0;\n    int prods = 1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        sum += std::abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        else if (arr[i] < 0) prods = -prods;\n    }\n\n    return sum * prods;\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    result = prod_signs({1, 2, 2, -4});\n    if (result!= -9) {\n        std::cerr << "Assertion failed: prod_signs({1, 2, 2, -4}) == -9" << std::endl;\n        return 1;\n    }\n\n    result = prod_signs({0, 1});\n    if (result!= 0) {\n        std::cerr << "Assertion failed: prod_signs({0, 1}) == 0" << std::endl;\n        return 1;\n    }\n\n    result = prod_signs({1, 1, 1, 2, 3, -1, 1});\n    if (result!= -10) {\n        std::cerr << "Assertion failed: prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10" << std::endl;\n        return 1;\n    }\n\n    // Handle the empty array case separately\n    result = prod_signs({});\n    if (result!= -32768) {\n        std::cerr << "Assertion failed: prod_signs({}) == -32768" << std::endl;\n        return 1;\n    }\n\n    result = prod_signs({2, 4, 1, 2, -1, -1, 9});\n    if (result!= 20) {\n        std::cerr << "Assertion failed: prod_signs({2, 4, 1, 2, -1, -1, 9}) == 20" << std::endl;\n        return 1;\n    }\n\n    result = prod_signs({-1, 1, -1, 1});\n    if (result!= 4) {\n        std::cerr << "Assertion failed: prod_signs({-1, 1, -1, 1}) == 4" << std::endl;\n        return 1;\n    }\n\n    result = prod_signs({-1, 1, 1, 1});\n    if (result!= -4) {\n        std::cerr << "Assertion failed: prod_signs({-1, 1, 1, 1}) == -4" << std::endl;\n        return 1;\n    }\n\n    result = prod_signs({-1, 1, 1, 0});\n    if (result!= 0) {\n        std::cerr << "Assertion failed: prod_signs({-1, 1, 1, 0}) == 0" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>>& grid, int k) {\n    int n = grid.size();\n    int x = -1, y = -1;\n\n    // Find the position of 1 in the grid\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n\n    int min = n * n;\n    if (x > 0 && grid[x-1][y] < min) min = grid[x-1][y];\n    if (x < n-1 && grid[x+1][y] < min) min = grid[x+1][y];\n    if (y > 0 && grid[x][y-1] < min) min = grid[x][y-1];\n    if (y < n-1 && grid[x][y+1] < min) min = grid[x][y+1];\n\n    vector<int> result(k);\n    for (int i = 0; i < k; i++) {\n        if (i % 2 == 0) {\n            result[i] = min;\n        } else {\n            result[i] = 1;\n        }\n    }\n    return result;\n}\n\nbool issame(vector<int>& a, vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<vector<int>> grid1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    vector<int> result1 = minPath(grid1, 3);\n    assert(issame(result1, vector<int>{1, 2, 1}));\n\n    vector<vector<int>> grid2 = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    vector<int> result2 = minPath(grid2, 1);\n    assert(issame(result2, vector<int>{1}));\n\n    vector<vector<int>> grid3 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    vector<int> result3 = minPath(grid3, 4);\n    assert(issame(result3, vector<int>{1, 2, 1, 2}));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid testTri(int n, vector<int> expected) {\n    vector<int> result = tri(n);\n    if (result!= expected) {\n        cout << "Assertion failed for n = " << n << endl;\n        exit(1);\n    }\n}\n\nvector<int> tri(int n) {\n    vector<int> out;\n    if (n == 0) {\n        out.push_back(1);\n        return out;\n    }\n\n    out.push_back(1);\n    out.push_back(3);\n\n    for (int i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n            out.push_back(1 + (i - 1) / 2);\n        } else {\n            out.push_back(out[i - 1] + out[i - 2] + 1 + (i / 2));\n        }\n    }\n    return out;\n}\n\nbool isSame(vector<int> a, vector<int> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    testTri(3, {1, 3, 2, 8});\n    testTri(4, {1, 3, 2, 8, 3});\n    testTri(5, {1, 3, 2, 8, 3, 15});\n    testTri(6, {1, 3, 2, 8, 3, 15, 4});\n    testTri(7, {1, 3, 2, 8, 3, 15, 4, 24});\n    testTri(8, {1, 3, 2, 8, 3, 15, 4, 24, 5});\n    testTri(9, {1, 3, 2, 8, 3, 15, 4, 24, 5, 35});\n    testTri(20, {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11});\n    testTri(0, {1});\n    testTri(1, {1, 3});\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cstdlib>\n\nusing namespace std;\n\nint digits(int n) {\n    int prod = 1;\n    int has = 0;\n    string s = to_string(n);  // Convert integer to string\n\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] - '0' % 2 == 1) {\n            has = 1;\n            prod *= (s[i] - '0');\n        }\n    }\n\n    return has == 0? 0 : prod;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(digits(5) == 5);\n    assert(digits(54) == 5);\n    assert(digits(120) == 1);\n    assert(digits(5014) == 5);\n    assert(digits(98765) == 315);\n    assert(digits(5576543) == 2625);\n    assert(digits(2468) == 0);\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nbool is_nested(const string& str) {\n    int count = 0;\n    for (char c : str) {\n        if (c == '[') count++;\n        if (c == ']') count--;\n        if (count < 0) count = 0;\n        if (count > 0) return true;\n    }\n    return false;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nvoid run_tests() {\n    assert(is_nested("[[]]") == true);\n    assert(is_nested("[]]]]]]][[[[[]") == false);\n    assert(is_nested("[][]") == false);\n    assert(is_nested("[]") == false);\n    assert(is_nested("[[[[]]]]") == true);\n    assert(is_nested("[]]]]]]]]]]") == false);\n    assert(is_nested("[][][[]]") == true);\n    assert(is_nested("[[]") == false);\n    assert(is_nested("[]]") == false);\n    assert(is_nested("[[]][[") == true);\n    assert(is_nested("[[][]]") == true);\n    assert(is_nested("") == false);\n    assert(is_nested("[[[[[[[[") == false);\n    assert(is_nested("]]]]]]]]") == false);\n}\n\nint main() {\n    run_tests();\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\ndouble sumSquares(vector<double> lst) {\n    double sum = 0;\n    for (double num : lst) {\n        sum += ceil(num) * ceil(num);\n    }\n    return sum;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nvoid runTests() {\n    assert(sumSquares({1.0, 2.0, 3.0}) == 14);\n    assert(sumSquares({1.0, 2.0, 3.0}) == 14); // This test is redundant\n    assert(sumSquares({1.0, 3.0, 5.0, 7.0}) == 84);\n    assert(sumSquares({1.4, 4.2, 0.0}) == 29);\n    assert(sumSquares({-2.4, 1.0, 1.0}) == 6);\n    assert(sumSquares({100.0, 1.0, 15.0, 2.0}) == 10230);\n    assert(sumSquares({10000.0, 10000.0}) == 200000000);\n    assert(sumSquares({-1.4, 4.6, 6.3}) == 75);\n    assert(sumSquares({-1.4, 17.9, 18.9, 19.9}) == 1086);\n    assert(sumSquares({0.0}) == 0);\n    assert(sumSquares({-1.0}) == 1);\n    assert(sumSquares({-1.0, 1.0, 0.0}) == 2);\n}\n\nint main() {\n    runTests();\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint canArrange(const std::vector<int>& arr, int n) {\n    int max = -1;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] <= i) max = i;\n    }\n    return max;\n}\n\nint canArrangeEmpty() {\n    return -1;\n}\n\nint main() {\n    int result;\n\n    result = canArrange({1, 2, 4, 3, 5}, 5);\n    if (result!= 3) {\n        std::cout << "Assertion failed: can_arrange({1,2,4,3,5}) /= 3" << std::endl;\n        return 1;\n    }\n\n    result = canArrange({1, 2, 4, 5}, 4);\n    if (result!= -1) {\n        std::cout << "Assertion failed: can_arrange({1,2,4,5}) /= -1" << std::endl;\n        return 1;\n    }\n\n    result = canArrange({1, 4, 2, 5, 6, 7, 8, 9, 10}, 9);\n    if (result!= 2) {\n        std::cout << "Assertion failed: can_arrange({1,4,2,5,6,7,8,9,10}) /= 2" << std::endl;\n        return 1;\n    }\n\n    result = canArrange({4, 8, 5, 7, 3}, 5);\n    if (result!= 4) {\n        std::cout << "Assertion failed: can_arrange({4,8,5,7,3}) /= 4" << std::endl;\n        return 1;\n    }\n\n    // Handle the empty array case separately\n    result = canArrangeEmpty();\n    if (result!= -1) {\n        std::cout << "Assertion failed: can_arrange({}) /= -1" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> largest_smallest_integers(const vector<int>& lst) {\n    int maxneg = 0;\n    int minpos = 0;\n\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n\n    vector<int> res = {maxneg, minpos};\n    return res;\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) return false;\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) return false;\n    }\n\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nvoid run_tests() {\n    vector<int> expected;\n    vector<int> test_array;\n\n    test_case({2, 4, 1, 3, 5, 7}, {0, 1});\n    test_case({2, 4, 1, 3, 5, 7, 0}, {0, 1});\n    test_case({1, 3, 2, 4, 5, 6, -2}, {-2, 1});\n    test_case({4, 5, 3, 6, 2, 7, -7}, {-7, 2});\n    test_case({7, 3, 8, 4, 9, 2, 5, -9}, {-9, 2});\n    test_case({0}, {0, 0});\n    test_case({-1, -3, -5, -6}, {-1, 0});\n    test_case({-1, -3, -5, -6, 0}, {-1, 0});\n    test_case({-6, -4, -4, -3, 1}, {-3, 1});\n    test_case({-6, -4, -4, -3, -100, 1}, {-3, 1});\n\n    // Special case for empty array\n    test_case_empty({0, 0});\n}\n\nvoid test_case(const vector<int>& input_array, const vector<int>& expected) {\n    vector<int> test_array = input_array;\n    assert(issame(largest_smallest_integers(test_array), expected));\n}\n\nvoid test_case_empty(const vector<int>& expected) {\n    vector<int> test_array;\n    assert(issame(largest_smallest_integers(test_array), expected));\n}\n\nint main() {\n    run_tests();\n    return 0;\n}\n
\n#include <iostream>\n\nusing namespace std;\n\nlong long special_factorial(int n) {\n    long long fact = 1;\n    long long bfact = 1;\n    for (int i = 1; i <= n; i++) {\n        fact *= i;\n        bfact *= fact;\n    }\n    return bfact;\n}\n\nint main() {\n    if (special_factorial(4)!= 288LL) {\n        cout << "special_factorial(4) == 288: assertion failed" << endl;\n        return 1;\n    }\n    if (special_factorial(5)!= 34560LL) {\n        cout << "special_factorial(5) == 34560: assertion failed" << endl;\n        return 1;\n    }\n    if (special_factorial(7)!= 125411328000LL) {\n        cout << "special_factorial(7) == 125411328000: assertion failed" << endl;\n        return 1;\n    }\n    if (special_factorial(1)!= 1LL) {\n        cout << "special_factorial(1) == 1: assertion failed" << endl;\n        return 1;\n    }\n    cout << "All tests passed" << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\nstring file_name_check(const string& file_name) {\n    if (file_name.length() < 5) {\n        return "No";\n    }\n\n    char w = file_name[0];\n    if (!(isupper(w) || islower(w))) {\n        return "No";\n    }\n\n    string last = file_name.substr(file_name.length() - 3);\n    if (last!= ".txt" && last!= ".exe" && last!= ".dll") {\n        return "No";\n    }\n\n    int numdigit = 0;\n    int numdot = 0;\n\n    for (char c : file_name) {\n        if (isdigit(c)) numdigit++;\n        if (c == '.') numdot++;\n    }\n\n    if (numdigit > 3 || numdot!= 1) {\n        return "No";\n    }\n\n    return "Yes";\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(file_name_check("example.txt") == "Yes");\n    assert(file_name_check("1example.dll") == "No");\n    assert(file_name_check("s1sdf3.asd") == "No");\n    assert(file_name_check("K.dll") == "Yes");\n    assert(file_name_check("MY16FILE3.exe") == "Yes");\n    assert(file_name_check("His12FILE94.exe") == "No");\n    assert(file_name_check("_Y.txt") == "No");\n    assert(file_name_check("?aREYA.exe") == "No");\n    assert(file_name_check("/this_is_valid.dll") == "No");\n    assert(file_name_check("this_is_valid.wow") == "No");\n    assert(file_name_check("this_is_valid.txt") == "Yes");\n    assert(file_name_check("this_is_valid.txtexe") == "No");\n    assert(file_name_check("#this2_i4s_5valid.ten") == "No");\n    assert(file_name_check("@this1_is6_valid.exe") == "No");\n    assert(file_name_check("this_is_12valid.6exe4.txt") == "No");\n    assert(file_name_check("all.exe.txt") == "No");\n    assert(file_name_check("I563_No.exe") == "Yes");\n    assert(file_name_check("Is3youfault.txt") == "Yes");\n    assert(file_name_check("no_one#knows.dll") == "Yes");\n    assert(file_name_check("1I563_Yes3.exe") == "No");\n    assert(file_name_check("I563_Yes3.txtt") == "No");\n    assert(file_name_check("final..txt") == "No");\n    assert(file_name_check("final132") == "No");\n    assert(file_name_check("_f4indsartal132.") == "No");\n    assert(file_name_check(".txt") == "No");\n    assert(file_name_check("s.") == "No");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    int a, b, c, d, pos;\n\n    pos = x.find('/');\n    sscanf(x.substr(0, pos - 1).c_str(), "%d", &a);\n    sscanf(x.substr(pos + 1).c_str(), "%d", &b);\n\n    pos = n.find('/');\n    sscanf(n.substr(0, pos - 1).c_str(), "%d", &c);\n    sscanf(n.substr(pos + 1).c_str(), "%d", &d);\n\n    return (a * c) % (b * d) == 0;\n}\n\nint main() {\n    bool result;\n\n    result = simplify("1/5", "5/1");\n    if (!result) {\n        cout << "Assertion failed: simplify('1/5', '5/1') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("1/6", "2/1");\n    if (result) {\n        cout << "Assertion failed: simplify('1/6', '2/1') == false" << endl;\n        return 1;\n    }\n\n    result = simplify("5/1", "3/1");\n    if (!result) {\n        cout << "Assertion failed: simplify('5/1', '3/1') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("7/10", "10/2");\n    if (result) {\n        cout << "Assertion failed: simplify('7/10', '10/2') == false" << endl;\n        return 1;\n    }\n\n    result = simplify("2/10", "50/10");\n    if (!result) {\n        cout << "Assertion failed: simplify('2/10', '50/10') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("7/2", "4/2");\n    if (!result) {\n        cout << "Assertion failed: simplify('7/2', '4/2') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("11/6", "6/1");\n    if (!result) {\n        cout << "Assertion failed: simplify('11/6', '6/1') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("2/3", "5/2");\n    if (result) {\n        cout << "Assertion failed: simplify('2/3', '5/2') == false" << endl;\n        return 1;\n    }\n\n    result = simplify("5/2", "3/5");\n    if (result) {\n        cout << "Assertion failed: simplify('5/2', '3/5') == false" << endl;\n        return 1;\n    }\n\n    result = simplify("2/4", "8/4");\n    if (!result) {\n        cout << "Assertion failed: simplify('2/4', '8/4') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("2/4", "4/2");\n    if (!result) {\n        cout << "Assertion failed: simplify('2/4', '4/2') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("1/5", "5/1");\n    if (!result) {\n        cout << "Assertion failed: simplify('1/5', '5/1') == true" << endl;\n        return 1;\n    }\n\n    result = simplify("1/5", "1/5");\n    if (result) {\n        cout << "Assertion failed: simplify('1/5', '1/5') == false" << endl;\n        return 1;\n    }\n\n    cout << "All assertions passed." << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\nvector<int> order_by_points(const vector<int>& nums) {\n    vector<int> sumdigit(nums.size());\n    vector<int> sorted_nums = nums;\n\n    for (int i = 0; i < nums.size(); i++) {\n        string w = to_string(abs(nums[i]));\n        int sum = 0;\n        for (int j = 1; j < w.size(); j++) {\n            sum += w[j] - '0';\n        }\n        if (nums[i] > 0) {\n            sum += w[0] - '0';\n        } else {\n            sum -= w[0] - '0';\n        }\n        sumdigit[i] = sum;\n    }\n\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (sumdigit[j - 1] > sumdigit[j]) {\n                int m = sumdigit[j];\n                sumdigit[j] = sumdigit[j - 1];\n                sumdigit[j - 1] = m;\n                int temp = sorted_nums[j];\n                sorted_nums[j] = sorted_nums[j - 1];\n                sorted_nums[j - 1] = temp;\n            }\n        }\n    }\n    return sorted_nums;\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> nums;\n\n    // Test cases\n    nums = {1, 11, -1, -11, -12};\n    vector<int> result = order_by_points(nums);\n    assert(issame(result, vector<int>{-1, -11, 1, -12, 11}));\n\n    nums = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    result = order_by_points(nums);\n    assert(issame(result, vector<int>{0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n\n    nums = {};\n    result = order_by_points(nums);\n    assert(issame(result, nums));\n\n    nums = {1, -11, -32, 43, 54, -98, 2, -3};\n    result = order_by_points(nums);\n    assert(issame(result, vector<int>{-3, -32, -98, -11, 1, 2, 43, 54}));\n\n    nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    result = order_by_points(nums);\n    assert(issame(result, vector<int>{1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n\n    nums = {0, 6, 6, -76, -21, 23, 4};\n    result = order_by_points(nums);\n    assert(issame(result, vector<int>{-76, -21, 0, 4, 23, 6, 6}));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <string>\n\nint specialFilter(const std::vector<int>& nums) {\n    int num = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] > 10) {\n            std::string w;\n            std::to_string(nums[i]).copy(&w[0], w.size());\n            if ((w[0] - '0') % 2 == 1 && (w.back() - '0') % 2 == 1) {\n                num++;\n            }\n        }\n    }\n    return num;\n}\n\nint specialFilterEmpty() {\n    return 0;\n}\n\nint main() {\n    int result;\n\n    // Test cases\n    result = specialFilter({5, -2, 1, -5});\n    if (result!= 0) {\n        std::cout << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    result = specialFilter({15, -73, 14, -15});\n    if (result!= 1) {\n        std::cout << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    result = specialFilter({33, -2, -3, 45, 21, 109});\n    if (result!= 2) {\n        std::cout << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    result = specialFilter({43, -12, 93, 125, 121, 109});\n    if (result!= 4) {\n        std::cout << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    result = specialFilter({71, -2, -33, 75, 21, 19});\n    if (result!= 3) {\n        std::cout << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    result = specialFilter({1});\n    if (result!= 0) {\n        std::cout << "Test case 6 failed" << std::endl;\n        return 1;\n    }\n\n    // Handle empty array case separately\n    result = specialFilterEmpty();\n    if (result!= 0) {\n        std::cout << "Test case 7 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint getMatrixTriples(int n) {\n    std::vector<int> a(n);\n    std::vector<std::vector<int>> sum(n + 1, std::vector<int>(3));\n    std::vector<std::vector<int>> sum2(n + 1, std::vector<int>(3));\n\n    for (int i = 0; i < n; i++) {\n        a[i] = (i * i - i + 1) % 3;\n        for (int j = 0; j < 3; j++) {\n            sum[i + 1][j] = sum[i][j];\n        }\n        sum[i + 1][a[i]]++;\n    }\n\n    for (int times = 0; times < 2; times++) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum2[i + 1][j] = sum2[i][j];\n            }\n            for (int j = 0; j < 3; j++) {\n                sum2[i + 1][j] += sum[i][j];\n            }\n        }\n        std::swap(sum, sum2);\n        sum2 = {{0, 0, 0}};\n    }\n\n    return sum[n][0];\n}\n\nint main() {\n    int n, result;\n\n    // Test cases\n    result = getMatrixTriples(5);\n    if (result!= 1) {\n        std::cout << "Assertion failed: getMatrixTriples(5) == 1" << std::endl;\n        return 1;\n    }\n\n    result = getMatrixTriples(6);\n    if (result!= 4) {\n        std::cout << "Assertion failed: getMatrixTriples(6) == 4" << std::endl;\n        return 1;\n    }\n\n    result = getMatrixTriples(10);\n    if (result!= 36) {\n        std::cout << "Assertion failed: getMatrixTriples(10) == 36" << std::endl;\n        return 1;\n    }\n\n    result = getMatrixTriples(100);\n    if (result!= 53361) {\n        std::cout << "Assertion failed: getMatrixTriples(100) == 53361" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            isp = false;\n            break;\n        }\n    }\n\n    return isp? x : y;\n}\n\nint main() {\n    // Assertions\n    if (x_or_y(7, 34, 12)!= 34) {\n        cout << "Assertion failed: x_or_y(7, 34, 12) == 34" << endl;\n        return 1;\n    }\n\n    if (x_or_y(15, 8, 5)!= 5) {\n        cout << "Assertion failed: x_or_y(15, 8, 5) == 5" << endl;\n        return 1;\n    }\n\n    if (x_or_y(3, 33, 5212)!= 33) {\n        cout << "Assertion failed: x_or_y(3, 33, 5212) == 33" << endl;\n        return 1;\n    }\n\n    if (x_or_y(1259, 3, 52)!= 3) {\n        cout << "Assertion failed: x_or_y(1259, 3, 52) == 3" << endl;\n        return 1;\n    }\n\n    if (x_or_y(7919, -1, 12)!= -1) {\n        cout << "Assertion failed: x_or_y(7919, -1, 12) == -1" << endl;\n        return 1;\n    }\n\n    if (x_or_y(3609, 1245, 583)!= 583) {\n        cout << "Assertion failed: x_or_y(3609, 1245, 583) == 583" << endl;\n        return 1;\n    }\n\n    if (x_or_y(91, 56, 129)!= 129) {\n        cout << "Assertion failed: x_or_y(91, 56, 129) == 129" << endl;\n        return 1;\n    }\n\n    if (x_or_y(6, 34, 1234)!= 1234) {\n        cout << "Assertion failed: x_or_y(6, 34, 1234) == 1234" << endl;\n        return 1;\n    }\n\n    if (x_or_y(1, 2, 0)!= 0) {\n        cout << "Assertion failed: x_or_y(1, 2, 0) == 0" << endl;\n        return 1;\n    }\n\n    if (x_or_y(2, 2, 0)!= 2) {\n        cout << "Assertion failed: x_or_y(2, 2, 0) == 2" << endl;\n        return 1;\n    }\n\n    cout << "All assertions passed." << endl;\n\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\ndouble doubleTheDifference(vector<double> lst) {\n    double sum = 0;\n    for (double val : lst) {\n        int roundedValue = lround(val);\n        if (abs(val - roundedValue) < 1e-4) {\n            if (val > 0 && roundedValue % 2 == 1) {\n                sum += roundedValue * roundedValue;\n            }\n        }\n    }\n    return sum;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert(doubleTheDifference({0.0}) == 0);\n    assert(doubleTheDifference({5.0, 4.0}) == 25);\n    assert(doubleTheDifference({0.1, 0.2, 0.3}) == 0);\n    assert(doubleTheDifference({-10.0, -20.0, -30.0}) == 0);\n    assert(doubleTheDifference({-1.0, -2.0, 8.0}) == 0);\n    assert(doubleTheDifference({0.2, 3.0, 5.0}) == 34);\n\n    // Initialize variables\n    double oddSum = 0;\n    vector<double> lst(100, 0.0);\n\n    // Fill the array and calculate oddSum\n    for (int i = -99; i <= 99; i += 2) {\n        lst[(i + 101) / 2] = i;\n        if (i > 0 && i % 2 == 1) {\n            oddSum += i * i;\n        }\n    }\n\n    // Check the final assertion\n    double result = doubleTheDifference(lst);\n    assert(result == oddSum);\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool cycpattern_check(const std::string& a, const std::string& b) {\n    int len_a = a.length();\n    int len_b = b.length();\n    bool is_pattern = false;\n\n    for (int i = 0; i < len_b; ++i) {\n        std::string rotate = b.substr(i, len_b - i) + b.substr(0, i);\n        // Debugging print statement\n        // std::cout << "Checking rotation: " << rotate << std::endl;\n        if (a.find(rotate)!= std::string::npos) {\n            is_pattern = true;\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    bool result;\n\n    result = cycpattern_check("xyzw", "xyw");\n    if (result) {\n        std::cout << "Assertion failed: cycpattern_check('xyzw', 'xyw') == false" << std::endl;\n        return 1;\n    }\n\n    result = cycpattern_check("yello", "ell");\n    if (!result) {\n        std::cout << "Assertion failed: cycpattern_check('yello', 'ell') == true" << std::endl;\n        return 1;\n    }\n\n    result = cycpattern_check("whattup", "ptut");\n    if (result) {\n        std::cout << "Assertion failed: cycpattern_check('whattup', 'ptut') == false" << std::endl;\n        return 1;\n    }\n\n    result = cycpattern_check("efef", "fee");\n    if (!result) {\n        std::cout << "Assertion failed: cycpattern_check('efef', 'fee') == true" << std::endl;\n        return 1;\n    }\n\n    result = cycpattern_check("abab", "aabb");\n    if (result) {\n        std::cout << "Assertion failed: cycpattern_check('abab', 'aabb') == false" << std::endl;\n        return 1;\n    }\n\n    result = cycpattern_check("winemtt", "tinem");\n    if (!result) {\n        std::cout << "Assertion failed: cycpattern_check('winemtt', 'tinem') == true" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> even_odd_count(int num) {\n    string w = to_string(abs(num));\n    int n1 = 0, n2 = 0;\n\n    for (char c : w) {\n        if (c - '0' % 2 == 1) {\n            n1++;\n        } else {\n            n2++;\n        }\n    }\n\n    return {n2, n1};\n}\n\nbool issame(vector<int> a, vector<int> b) {\n    return a == b;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> result, expected;\n\n    // Test cases\n    result = even_odd_count(7);\n    expected = {0, 1};\n    assert(issame(result, expected));\n\n    result = even_odd_count(-78);\n    expected = {1, 1};\n    assert(issame(result, expected));\n\n    result = even_odd_count(3452);\n    expected = {2, 2};\n    assert(issame(result, expected));\n\n    result = even_odd_count(346211);\n    expected = {3, 3};\n    assert(issame(result, expected));\n\n    result = even_odd_count(-345821);\n    expected = {3, 3};\n    assert(issame(result, expected));\n\n    result = even_odd_count(-2);\n    expected = {1, 0};\n    assert(issame(result, expected));\n\n    result = even_odd_count(-45347);\n    expected = {2, 3};\n    assert(issame(result, expected));\n\n    result = even_odd_count(0);\n    expected = {1, 0};\n    assert(issame(result, expected));\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring intToMiniRoman(int number) {\n    string result;\n    vector<pair<int, string>> rep = {{1000, "m"}, {900, "cm"}, {500, "d"}, {400, "cd"}, {100, "c"}, {90, "xc"}, {50, "l"}, {40, "xl"}, {10, "x"}, {9, "ix"}, {5, "v"}, {4, "iv"}, {1, "i"}};\n    int pos = 0;\n    int tempNumber = number;\n\n    while (tempNumber > 0) {\n        while (tempNumber >= rep[pos].first) {\n            result += rep[pos].second;\n            tempNumber -= rep[pos].first;\n        }\n        if (tempNumber > 0) pos++;\n    }\n    return result;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    assert(intToMiniRoman(19) == "xix");\n    assert(intToMiniRoman(152) == "clii");\n    assert(intToMiniRoman(251) == "ccli");\n    assert(intToMiniRoman(426) == "cdxxvi");\n    assert(intToMiniRoman(500) == "d");\n    assert(intToMiniRoman(1) == "i");\n    assert(intToMiniRoman(4) == "iv");\n    assert(intToMiniRoman(43) == "xliii");\n    assert(intToMiniRoman(90) == "xc");\n    assert(intToMiniRoman(94) == "xciv");\n    assert(intToMiniRoman(532) == "dxxxii");\n    assert(intToMiniRoman(900) == "cm");\n    assert(intToMiniRoman(994) == "cmxciv");\n    assert(intToMiniRoman(1000) == "m");\n\n    return 0;\n}\n
\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nbool right_angle_triangle(double a, double b, double c) {\n    double epsilon = 1.0e-4;\n\n    if (abs(a*a + b*b - c*c) < epsilon || abs(a*a + c*c - b*b) < epsilon || abs(b*b + c*c - a*a) < epsilon) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    // Assertions\n    if (!right_angle_triangle(3.0, 4.0, 5.0)) {\n        cout << "Assertion failed: right_angle_triangle(3, 4, 5) == true" << endl;\n        return 1;\n    }\n\n    if (right_angle_triangle(1.0, 2.0, 3.0)) {\n        cout << "Assertion failed: right_angle_triangle(1, 2, 3) == false" << endl;\n        return 1;\n    }\n\n    if (!right_angle_triangle(10.0, 6.0, 8.0)) {\n        cout << "Assertion failed: right_angle_triangle(10, 6, 8) == true" << endl;\n        return 1;\n    }\n\n    if (right_angle_triangle(2.0, 2.0, 2.0)) {\n        cout << "Assertion failed: right_angle_triangle(2, 2, 2) == false" << endl;\n        return 1;\n    }\n\n    if (!right_angle_triangle(7.0, 24.0, 25.0)) {\n        cout << "Assertion failed: right_angle_triangle(7, 24, 25) == true" << endl;\n        return 1;\n    }\n\n    if (right_angle_triangle(10.0, 5.0, 7.0)) {\n        cout << "Assertion failed: right_angle_triangle(10, 5, 7) == false" << endl;\n        return 1;\n    }\n\n    if (!right_angle_triangle(5.0, 12.0, 13.0)) {\n        cout << "Assertion failed: right_angle_triangle(5, 12, 13) == true" << endl;\n        return 1;\n    }\n\n    if (!right_angle_triangle(15.0, 8.0, 17.0)) {\n        cout << "Assertion failed: right_angle_triangle(15, 8, 17) == true" << endl;\n        return 1;\n    }\n\n    if (!right_angle_triangle(48.0, 55.0, 73.0)) {\n        cout << "Assertion failed: right_angle_triangle(48, 55, 73) == true" << endl;\n        return 1;\n    }\n\n    if (right_angle_triangle(1.0, 1.0, 1.0)) {\n        cout << "Assertion failed: right_angle_triangle(1, 1, 1) == false" << endl;\n        return 1;\n    }\n\n    if (right_angle_triangle(2.0, 2.0, 10.0)) {\n        cout << "Assertion failed: right_angle_triangle(2, 2, 10) == false" << endl;\n        return 1;\n    }\n\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n\nstd::string find_max(const std::vector<std::string>& words) {\n    std::string max_word = "";\n    int maxu = 0;\n\n    for (const auto& word : words) {\n        std::string unique = "";\n        for (char c : word) {\n            if (unique.find(c) == std::string::npos) {\n                unique += c;\n            }\n        }\n        if (unique.size() > maxu || (unique.size() == maxu && word > max_word)) {\n            max_word = word;\n            maxu = unique.size();\n        }\n    }\n    return max_word;\n}\n\nint main() {\n    std::vector<std::string> words;\n    std::string result;\n\n    words = {"name   ", "of     ", "string "};\n    result = find_max(words);\n    if (result!= "string") {\n        std::cerr << "Assertion failed: expected'string', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"name   ", "enam   ", "game   "};\n    result = find_max(words);\n    if (result!= "enam") {\n        std::cerr << "Assertion failed: expected 'enam', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"aaaaaaa", "bb     ", "cc     "};\n    result = find_max(words);\n    if (result!= "aaaaaaa") {\n        std::cerr << "Assertion failed: expected 'aaaaaaa', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"abc    ", "cba    "};\n    result = find_max(words);\n    if (result!= "abc") {\n        std::cerr << "Assertion failed: expected 'abc', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"play    ", "this    ", "game    ", "of      ", "footbott"};\n    result = find_max(words);\n    if (result!= "footbott") {\n        std::cerr << "Assertion failed: expected 'footbott', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"we      ", "are     ", "gonna   ", "rock    "};\n    result = find_max(words);\n    if (result!= "gonna") {\n        std::cerr << "Assertion failed: expected 'gonna', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"we      ", "are     ", "a       ", "mad     ", "nation  "};\n    result = find_max(words);\n    if (result!= "nation") {\n        std::cerr << "Assertion failed: expected 'nation', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"this    ", "is      ", "a       ", "prrk    "};\n    result = find_max(words);\n    if (result!= "this") {\n        std::cerr << "Assertion failed: expected 'this', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"b       "};\n    result = find_max(words);\n    if (result!= "b") {\n        std::cerr << "Assertion failed: expected 'b', got " << result << std::endl;\n        return 1;\n    }\n\n    words = {"play    ", "play    ", "play    "};\n    result = find_max(words);\n    if (result!= "play") {\n        std::cerr << "Assertion failed: expected 'play', got " << result << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    vector<int> res(2);\n    if (need > remaining) {\n        res[0] = number + remaining;\n        res[1] = 0;\n    } else {\n        res[0] = number + need;\n        res[1] = remaining - need;\n    }\n    return res;\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    vector<int> result(2);\n    vector<int> expected(2);\n\n    // Test cases\n    result = eat(5, 6, 10);\n    expected = {11, 4};\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: eat(5, 6, 10) == (/11, 4/)" << endl;\n        return 1;\n    }\n\n    result = eat(4, 8, 9);\n    expected = {12, 1};\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: eat(4, 8, 9) == (/12, 1/)" << endl;\n        return 1;\n    }\n\n    result = eat(1, 10, 10);\n    expected = {11, 0};\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: eat(1, 10, 10) == (/11, 0/)" << endl;\n        return 1;\n    }\n\n    result = eat(2, 11, 5);\n    expected = {7, 0};\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: eat(2, 11, 5) == (/7, 0/)" << endl;\n        return 1;\n    }\n\n    result = eat(4, 5, 7);\n    expected = {9, 2};\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: eat(4, 5, 7) == (/9, 2/)" << endl;\n        return 1;\n    }\n\n    result = eat(4, 5, 1);\n    expected = {5, 0};\n    if (!issame(result, expected)) {\n        cout << "Assertion failed: eat(4, 5, 1) == (/5, 0/)" << endl;\n        return 1;\n    }\n\n    cout << "All tests passed." << endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string solve(const std::string& s) {\n    std::string out;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            out += (char)(c + 32);\n        } else if (c >= 'a' && c <= 'z') {\n            out += (char)(c - 32);\n        } else {\n            out += c;\n        }\n    }\n    if (out.size() == s.size()) {\n        std::string rev = out;\n        std::reverse(rev.begin(), rev.end());\n        return rev;\n    }\n    return out;\n}\n\nint main() {\n    std::string s, result;\n\n    // Test cases\n    s = "AsDf";\n    result = solve(s);\n    if (result!= "aSdF") {\n        std::cout << "Assertion failed: solve('AsDf') == 'aSdF'" << std::endl;\n        return 1;\n    }\n\n    s = "1234";\n    result = solve(s);\n    if (result!= "4321") {\n        std::cout << "Assertion failed: solve('1234') == '4321'" << std::endl;\n        return 1;\n    }\n\n    s = "ab";\n    result = solve(s);\n    if (result!= "AB") {\n        std::cout << "Assertion failed: solve('ab') == 'AB'" << std::endl;\n        return 1;\n    }\n\n    s = "#a@C";\n    result = solve(s);\n    if (result!= "#A@c") {\n        std::cout << "Assertion failed: solve('#a@C') == '#A@c'" << std::endl;\n        return 1;\n    }\n\n    s = "#AsdfW^45";\n    result = solve(s);\n    if (result!= "#aSDFw^45") {\n        std::cout << "Assertion failed: solve('#AsdfW^45') == '#aSDFw^45'" << std::endl;\n        return 1;\n    }\n\n    s = "#6@2";\n    result = solve(s);\n    if (result!= "2@6#") {\n        std::cout << "Assertion failed: solve('#6@2') == '2@6#'" << std::endl;\n        return 1;\n    }\n\n    s = "#$a^D";\n    result = solve(s);\n    if (result!= "#$A^d") {\n        std::cout << "Assertion failed: solve('#$a^D') == '#$A^d'" << std::endl;\n        return 1;\n    }\n\n    s = "#ccc";\n    result = solve(s);\n    if (result!= "#CCC") {\n        std::cout << "Assertion failed: solve('#ccc') == '#CCC'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n
\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> generate_integers(int a, int b) {\n    vector<int> out;\n    int i, m, temp_a, temp_b;\n    temp_a = a;\n    temp_b = b;\n\n    if (temp_b < temp_a) {\n        swap(temp_a, temp_b);\n    }\n\n    int count = 0;\n    vector<int> temp(temp_b - temp_a + 1);\n    for (i = temp_a; i <= temp_b; i++) {\n        if (i < 10 && i % 2 == 0) {\n            count++;\n            temp[count - 1] = i;\n        }\n    }\n\n    if (count > 0) {\n        out.resize(count);\n        copy(temp.begin(), temp.begin() + count, out.begin());\n    } else {\n        out.resize(0);\n    }\n\n    return out;\n}\n\nbool isSame(vector<int> a, vector<int> b) {\n    if (a.size()!= b.size()) {\n        return false;\n    }\n\n    for (int i = 0; i < a.size(); i++) {\n        if (a[i]!= b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cout << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<int> result;\n    vector<int> empty_array;\n\n    // Create a zero-sized array for comparison\n    empty_array.resize(0);\n\n    result = generate_integers(2, 10);\n    assert(isSame(result, vector<int>{2, 4, 6, 8}));\n\n    result = generate_integers(10, 2);\n    assert(isSame(result, vector<int>{2, 4, 6, 8}));\n\n    result = generate_integers(132, 2);\n    assert(isSame(result, vector<int>{2, 4, 6, 8}));\n\n    result = generate_integers(17, 89);\n    assert(isSame(result, empty_array));  // Use the zero-sized array for comparison\n\n    return 0;\n}\n
