# Compiler and flags
CC = g++
CXXFLAGS = -c -fopenmp
LDFLAGS = -fopenmp

# Source files
SRC = $(wildcard *.cpp)

# Object files
OBJ = $(SRC:.cpp=.o)

# Executable files
EXE = $(SRC:.cpp=.exe)

# Logs for execution
LOGS = $(SRC:.cpp=.exe.log)

# Default target: compile and then execute
all: compile execute report

# Compile .cpp files into .exe files
compile: $(EXE)

# Pattern rule for compiling .cpp files into .exe files
%.exe: %.cpp
	@$(CC) $< $(LDFLAGS) -o $@ 2> $*.err
	@if [ $$? -ne 0 ]; then \
		echo "Compilation error in $<, see $*.err for details."; \
	else \
		rm -f $*.err; \
	fi

# Run each .exe with a 3-minute timeout and store logs
execute: $(LOGS)

%.exe.log: %.exe
	@timeout 3m ./$< > $@ 2>&1
	@if [ $$? -eq 0 ]; then \
		echo "Execution of $< succeeded." >> $@; \
		touch $*.pass; \
	elif [ $$? -eq 124 ]; then \
		echo "Execution of $< timed out after 3 minutes." >> $@; \
	else \
		echo "Runtime error in $<, see $@ for details." >> $@; \
	fi

# Count successful compilations and successful executions by inspecting logs
report:
	@compiled_files=$$(ls *.exe 2>/dev/null | wc -l); \
	successfully_executed=$$(ls *.pass 2>/dev/null | wc -l); \
	echo "Compiled executables: $$compiled_files"; \
	echo "Successfully executed: $$successfully_executed";

# Clean up object files, executables, logs, and error files
clean:
	rm -f $(OBJ) *.exe *.exe.log *.err

