#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib> // For exit()\n\nclass Utils {\npublic:\n    static bool has_close_elements(const std::vector<float>& numbers, int n, float threshold) {\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (std::abs(numbers[i] - numbers[j]) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n\nint main() {\n    std::vector<float> a;\n    int n;\n\n    // Test case 1\n    a = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    n = a.size();\n    if (!Utils::has_close_elements(a, n, 0.3)) {\n        std::cerr << "Test case 1 failed: assertion failed" << std::endl;\n        exit(1);\n    }\n    if (Utils::has_close_elements(a, n, 0.05)) {\n        std::cerr << "Test case 1 failed: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 2\n    a = {1.0, 2.0, 5.9, 4.0, 5.0};\n    n = a.size();\n    if (!Utils::has_close_elements(a, n, 0.95)) {\n        std::cerr << "Test case 2 failed: assertion failed" << std::endl;\n        exit(1);\n    }\n    if (Utils::has_close_elements(a, n, 0.8)) {\n        std::cerr << "Test case 2 failed: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 3\n    a = {1.0, 2.0, 3.0, 4.0, 5.0};\n    n = a.size();\n    if (!Utils::has_close_elements(a, n, 2.0)) {\n        std::cerr << "Test case 3 failed: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 4\n    a = {1.1, 2.2, 3.1, 4.1, 5.1};\n    n = a.size();\n    if (!Utils::has_close_elements(a, n, 1.0)) {\n        std::cerr << "Test case 4 failed: assertion failed" << std::endl;\n        exit(1);\n    }\n    if (Utils::has_close_elements(a, n, 0.5)) {\n        std::cerr << "Test case 4 failed: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib> // For exit()\n\nbool below_zero(const std::vector<int>& operations) {\n    int num = 0;\n    for (int i = 0; i < operations.size(); ++i) {\n        num += operations[i];\n        if (num < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<int> operations;\n    bool result;\n\n    // Test case 1: Empty vector\n    result = below_zero(operations);\n    if (result != false) {\n        std::cout << "Test case 1 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 2: All positive numbers\n    operations = {1, 2, -3, 1, 2, -3};\n    result = below_zero(operations);\n    if (result != false) {\n        std::cout << "Test case 2 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 3: One negative number\n    operations = {1, 2, -4, 5, 6};\n    result = below_zero(operations);\n    if (result != true) {\n        std::cout << "Test case 3 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 4: No negative numbers\n    operations = {1, -1, 2, -2, 5, -5, 4, -4};\n    result = below_zero(operations);\n    if (result != false) {\n        std::cout << "Test case 4 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 5: One negative number at the end\n    operations = {1, -1, 2, -2, 5, -5, 4, -5};\n    result = below_zero(operations);\n    if (result != true) {\n        std::cout << "Test case 5 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 6: One negative number in the middle\n    operations = {1, -2, 2, -2, 5, -5, 4, -4};\n    result = below_zero(operations);\n    if (result != true) {\n        std::cout << "Test case 6 failed" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\n\nclass MADModule {\npublic:\n    static double mean_absolute_deviation(const std::vector<double>& numbers) {\n        double sum = std::accumulate(numbers.begin(), numbers.end(), 0.0);\n        double avg = sum / numbers.size();\n\n        double msum = 0.0;\n        for (double num : numbers) {\n            msum += std::abs(num - avg);\n        }\n        return msum / numbers.size();\n    }\n};\n\nint main() {\n    // Test cases\n    std::vector<double> test1 = {1.0, 2.0, 3.0};\n    if (std::abs(MADModule::mean_absolute_deviation(test1) - 2.0 / 3.0) > 1e-4) {\n        std::cerr << "Assertion failed for test case 1" << std::endl;\n        return 1;\n    }\n\n    std::vector<double> test2 = {1.0, 2.0, 3.0, 4.0};\n    if (std::abs(MADModule::mean_absolute_deviation(test2) - 1.0) > 1e-4) {\n        std::cerr << "Assertion failed for test case 2" << std::endl;\n        return 1;\n    }\n\n    std::vector<double> test3 = {1.0, 2.0, 3.0, 4.0, 5.0};\n    if (std::abs(MADModule::mean_absolute_deviation(test3) - 6.0 / 5.0) > 1e-4) {\n        std::cerr << "Assertion failed for test case 3" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\nvoid intersperse(const std::vector<int>& numbers, int delimeter, std::vector<int>& out) {\n    int n = numbers.size();\n    if (n == 0) {\n        out.clear();\n    } else {\n        out.resize(2 * n - 1);\n        out[0] = numbers[0];\n        for (int i = 1; i < n; ++i) {\n            out[2 * i - 1] = delimeter;\n            out[2 * i] = numbers[i];\n        }\n    }\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    std::vector<int> numbers, result, expected;\n\n    // Test case 1\n    numbers.clear();\n    expected.clear();\n    intersperse(numbers, 7, result);\n    assert(issame(result, expected));\n\n    // Test case 2\n    numbers = {5, 6, 3, 2};\n    expected = {5, 8, 6, 8, 3, 8, 2};\n    intersperse(numbers, 8, result);\n    assert(issame(result, expected));\n\n    // Test case 3\n    numbers = {2, 2, 2};\n    expected = {2, 2, 2, 2, 2};\n    intersperse(numbers, 2, result);\n    assert(issame(result, expected));\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cstdlib>\n\nvoid parse_nested_parens(const std::string& paren_string, std::vector<int>& all_levels) {\n    int level = 0;\n    int max_level = 0;\n    all_levels.clear();\n\n    for (char chr : paren_string) {\n        if (chr == '(') {\n            level++;\n            if (level > max_level) max_level = level;\n        } else if (chr == ')') {\n            level--;\n            if (level == 0) {\n                all_levels.push_back(max_level);\n                max_level = 0;\n            }\n        }\n    }\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::string paren_string;\n    std::vector<int> result;\n    std::vector<int> expected1 = {2, 3, 1, 3};\n    std::vector<int> expected2 = {1, 2, 3, 4};\n    std::vector<int> expected3 = {4};\n\n    // Test case 1\n    paren_string = "(()()) ((())) () ((())()())";\n    parse_nested_parens(paren_string, result);\n    if (!issame(result, expected1)) {\n        std::cerr << "Assertion failed for test case 1" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 2\n    paren_string = "() (()) ((())) (((())))";\n    parse_nested_parens(paren_string, result);\n    if (!issame(result, expected2)) {\n        std::cerr << "Assertion failed for test case 2" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 3\n    paren_string = "(()(())((())))";\n    parse_nested_parens(paren_string, result);\n    if (!issame(result, expected3)) {\n        std::cerr << "Assertion failed for test case 3" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib> // For exit()\n\nnamespace utils {\n    std::vector<int> sum_product(const std::vector<int>& numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return {sum, product};\n    }\n\n    bool issame(const std::vector<int>& a, const std::vector<int>& b) {\n        if (a.size() != b.size()) return false;\n        for (size_t i = 0; i < a.size(); ++i) {\n            if (a[i] != b[i]) return false;\n        }\n        return true;\n    }\n}\n\nint main() {\n    using namespace utils;\n    std::vector<int> result;\n    std::vector<int> empty_array;\n    std::vector<int> array1 = {1, 1, 1};\n    std::vector<int> array2 = {100, 0};\n    std::vector<int> array3 = {3, 5, 7};\n    std::vector<int> array4 = {10};\n\n    // Test cases\n    result = sum_product(empty_array);\n    if (!issame(result, {0, 1})) {\n        std::cerr << "Test case 1 failed" << std::endl;\n        exit(1);\n    }\n\n    result = sum_product(array1);\n    if (!issame(result, {3, 1})) {\n        std::cerr << "Test case 2 failed" << std::endl;\n        exit(1);\n    }\n\n    result = sum_product(array2);\n    if (!issame(result, {100, 0})) {\n        std::cerr << "Test case 3 failed" << std::endl;\n        exit(1);\n    }\n\n    result = sum_product(array3);\n    if (!issame(result, {3 + 5 + 7, 3 * 5 * 7})) {\n        std::cerr << "Test case 4 failed" << std::endl;\n        exit(1);\n    }\n\n    result = sum_product(array4);\n    if (!issame(result, {10, 10})) {\n        std::cerr << "Test case 5 failed" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdlib> // For exit()\n\nvoid rolling_max(const std::vector<int>& numbers, std::vector<int>& out) {\n    int max = 0;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if (numbers[i] > max) max = numbers[i];\n        out[i] = max;\n    }\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    std::vector<int> numbers, result, expected;\n\n    // Test case 1\n    numbers.clear();\n    expected.clear();\n    rolling_max(numbers, result);\n    assert(issame(result, expected));\n\n    // Test case 2\n    numbers = {1, 2, 3, 4};\n    expected = {1, 2, 3, 4};\n    rolling_max(numbers, result);\n    assert(issame(result, expected));\n\n    // Test case 3\n    numbers = {4, 3, 2, 1};\n    expected = {4, 4, 4, 4};\n    rolling_max(numbers, result);\n    assert(issame(result, expected));\n\n    // Test case 4\n    numbers = {3, 2, 3, 100, 3};\n    expected = {3, 3, 3, 100, 100};\n    rolling_max(numbers, result);\n    assert(issame(result, expected));\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <algorithm>\n\nbool is_palindrome(const std::string& str) {\n    std::string reversed_str = str;\n    std::reverse(reversed_str.begin(), reversed_str.end());\n    return str == reversed_str;\n}\n\nstd::string make_palindrome(const std::string& str) {\n    std::string palindrome_str = str;\n    for (size_t i = 1; i <= str.size(); ++i) {\n        std::string rstr = str.substr(i - 1);\n        if (is_palindrome(rstr)) {\n            std::string nstr = str.substr(0, i - 1);\n            std::string n2str = nstr;\n            std::reverse(n2str.begin(), n2str.end());\n            palindrome_str = str + n2str;\n            return palindrome_str;\n        }\n    }\n    std::string n2str = str;\n    std::reverse(n2str.begin(), n2str.end());\n    palindrome_str = str + n2str;\n    return palindrome_str;\n}\n\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert_condition(make_palindrome("") == "");\n    assert_condition(make_palindrome("x") == "x");\n    assert_condition(make_palindrome("xyz") == "xyzyx");\n    assert_condition(make_palindrome("xyx") == "xyx");\n    assert_condition(make_palindrome("jerry") == "jerryrrej");\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string string_xor(const std::string& a, const std::string& b) {\n    std::string output;\n    size_t len_a = a.length();\n    size_t len_b = b.length();\n    size_t min_len = std::min(len_a, len_b);\n\n    for (size_t i = 0; i < min_len; ++i) {\n        if (a[i] == b[i]) {\n            output += '0';\n        } else {\n            output += '1';\n        }\n    }\n\n    if (len_a > len_b) {\n        output += a.substr(min_len);\n    } else if (len_b > len_a) {\n        output += b.substr(min_len);\n    }\n\n    return output;\n}\n\nint main() {\n    // Test cases\n    std::string result;\n\n    result = string_xor("111000", "101010");\n    if (result != "010010") {\n        std::cerr << "Assertion failed: string_xor('111000', '101010') != '010010'" << std::endl;\n        return 1;\n    }\n\n    result = string_xor("1", "1");\n    if (result != "0") {\n        std::cerr << "Assertion failed: string_xor('1', '1') != '0'" << std::endl;\n        return 1;\n    }\n\n    result = string_xor("0101", "0000");\n    if (result != "0101") {\n        std::cerr << "Assertion failed: string_xor('0101', '0000') != '0101'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\n// Function to find the longest string in a vector of strings\nstd::string longest(const std::vector<std::string>& strings) {\n    if (strings.empty()) {\n        return "";\n    }\n\n    std::string longestString = strings[0];\n    for (const auto& str : strings) {\n        if (str.length() > longestString.length()) {\n            longestString = str;\n        }\n    }\n    return longestString;\n}\n\n// Main function to test the longest function\nint main() {\n    std::vector<std::string> strings;\n\n    // Test case 1: Empty array\n    strings.clear();\n    if (longest(strings) != "") {\n        std::cerr << "Test case 1 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2: Array with single character strings\n    strings = {"x", "y", "z"};\n    if (longest(strings) != "x") {\n        std::cerr << "Test case 2 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 3: Array with varying length strings\n    strings = {"x       ", "yyy     ", "zzzz    ", "www     ", "kkkk    ", "abc     "};\n    if (longest(strings) != "zzzz    ") {\n        std::cerr << "Test case 3 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <cstdlib>\n\nclass GCDModule {\npublic:\n    static int greatest_common_divisor(int a, int b) {\n        int temp_a = a;\n        int temp_b = b;\n\n        while (true) {\n            if (temp_a < temp_b) {\n                std::swap(temp_a, temp_b);\n            }\n            temp_a %= temp_b;\n            if (temp_a == 0) {\n                return temp_b;\n            }\n        }\n    }\n\n    static void assert(bool condition, const std::string& message) {\n        if (!condition) {\n            std::cerr << message << std::endl;\n            std::exit(1);\n        }\n    }\n};\n\nint main() {\n    GCDModule::assert(GCDModule::greatest_common_divisor(3, 7) == 1, "Assertion failed: gcd(3, 7) == 1");\n    GCDModule::assert(GCDModule::greatest_common_divisor(10, 15) == 5, "Assertion failed: gcd(10, 15) == 5");\n    GCDModule::assert(GCDModule::greatest_common_divisor(49, 14) == 7, "Assertion failed: gcd(49, 14) == 7");\n    GCDModule::assert(GCDModule::greatest_common_divisor(144, 60) == 12, "Assertion failed: gcd(144, 60) == 12");\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cstdlib> // For std::exit\n\n// Function prototypes\nvoid all_prefixes(const std::string& str, std::vector<std::string>& out);\nbool issame(const std::vector<std::string>& a, const std::vector<std::string>& b);\nvoid assert_condition(bool condition);\n\nint main() {\n    std::string str;\n    std::vector<std::string> prefixes;\n    std::vector<std::string> expected;\n\n    // Test case 1\n    str = "";\n    all_prefixes(str, prefixes);\n    expected = {"",};\n    assert_condition(issame(prefixes, expected));\n\n    // Test case 2\n    str = "asdfgh";\n    expected = {"a", "as", "asd", "asdf", "asdfg", "asdfgh"};\n    all_prefixes(str, prefixes);\n    assert_condition(issame(prefixes, expected));\n\n    // Test case 3\n    str = "WWW";\n    expected = {"W", "WW", "WWW"};\n    all_prefixes(str, prefixes);\n    assert_condition(issame(prefixes, expected));\n\n    return 0;\n}\n\nvoid all_prefixes(const std::string& str, std::vector<std::string>& out) {\n    if (str.empty()) {\n        out = {""};\n        return;\n    }\n\n    out.resize(str.size());\n    std::string current;\n    for (size_t i = 0; i < str.size(); ++i) {\n        current += str[i];\n        out[i] = current;\n    }\n}\n\nbool issame(const std::vector<std::string>& a, const std::vector<std::string>& b) {\n    if (a.size() != b.size()) return false;\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n\n    return true;\n}\n\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}
#include <iostream>\n#include <string>\n#include <sstream>\n#include <cstdlib> // For exit()\n\nstd::string string_sequence(int n) {\n    std::ostringstream oss;\n    oss << "0";\n    for (int i = 1; i <= n; ++i) {\n        oss << " " << i;\n    }\n    return oss.str();\n}\n\nint main() {\n    // Test cases\n    std::string result;\n\n    result = string_sequence(0);\n    if (result != "0") {\n        std::cerr << "Assertion failed: string_sequence(0) == '0'" << std::endl;\n        exit(1);\n    }\n\n    result = string_sequence(3);\n    if (result != "0 1 2 3") {\n        std::cerr << "Assertion failed: string_sequence(3) == '0 1 2 3'" << std::endl;\n        exit(1);\n    }\n\n    result = string_sequence(10);\n    if (result != "0 1 2 3 4 5 6 7 8 9 10") {\n        std::cerr << "Assertion failed: string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <vector>\n#include <cctype> // For std::tolower\n\n// Function to count distinct characters in a string\nint count_distinct_characters(const std::string& str) {\n    std::vector<char> distinct;\n    int count = 0;\n\n    // Convert the string to lowercase\n    std::string lower_str = str;\n    for (char& c : lower_str) {\n        c = std::tolower(static_cast<unsigned char>(c));\n    }\n\n    // Loop through each character in the string\n    for (char c : lower_str) {\n        bool isin = false;\n        // Check if the character is already in the distinct vector\n        for (char d : distinct) {\n            if (d == c) {\n                isin = true;\n                break;\n            }\n        }\n        // If not, add it to the distinct vector\n        if (!isin) {\n            distinct.push_back(c);\n            count++;\n        }\n    }\n\n    return count;\n}\n\nint main() {\n    // Test cases\n    std::string str;\n    int result;\n\n    str = "";\n    result = count_distinct_characters(str);\n    if (result != 0) {\n        std::cerr << "Assertion failed: count_distinct_characters('') == 0" << std::endl;\n        return 1;\n    }\n\n    str = "abcde";\n    result = count_distinct_characters(str);\n    if (result != 5) {\n        std::cerr << "Assertion failed: count_distinct_characters('abcde') == 5" << std::endl;\n        return 1;\n    }\n\n    str = "abcdecadeCADE";\n    result = count_distinct_characters(str);\n    if (result != 5) {\n        std::cerr << "Assertion failed: count_distinct_characters('abcdecadeCADE') == 5" << std::endl;\n        return 1;\n    }\n\n    str = "aaaaAAAAaaaa";\n    result = count_distinct_characters(str);\n    if (result != 1) {\n        std::cerr << "Assertion failed: count_distinct_characters('aaaaAAAAaaaa') == 1" << std::endl;\n        return 1;\n    }\n\n    str = "Jerry jERRY JeRRRY";\n    result = count_distinct_characters(str);\n    if (result != 5) {\n        std::cerr << "Assertion failed: count_distinct_characters('Jerry jERRY JeRRRY') == 5" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<int> parse_music(const std::string& music_string) {\n    std::vector<int> result;\n    std::string current;\n    for (char c : music_string + ' ') {\n        if (c == ' ') {\n            if (current == "o") {\n                result.push_back(4);\n            } else if (current == "o|") {\n                result.push_back(2);\n            } else if (current == ".|") {\n                result.push_back(1);\n            }\n            current.clear();\n        } else {\n            current += c;\n        }\n    }\n    return result;\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert_equal(const std::vector<int>& a, const std::vector<int>& b) {\n    assert(issame(a, b));\n}\n\nint main() {\n    // Test cases\n    assert_equal(parse_music(""), {});\n    assert_equal(parse_music("o o o o"), {4, 4, 4, 4});\n    assert_equal(parse_music(".| .| .| .|"), {1, 1, 1, 1});\n    assert_equal(parse_music("o| o| .| .| o o o o"), {2, 2, 1, 1, 4, 4, 4, 4});\n    assert_equal(parse_music("o| .| o| .| o o| o o|"), {2, 1, 2, 1, 4, 2, 4, 2});\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <string>\n\n// Function to count occurrences of a substring in a string\nint how_many_times(const std::string& str, const std::string& substring) {\n    int out = 0;\n    size_t str_len = str.length();\n    size_t sub_len = substring.length();\n\n    if (str_len == 0) {\n        return 0;\n    }\n\n    for (size_t i = 0; i <= str_len - sub_len; ++i) {\n        if (str.substr(i, sub_len) == substring) {\n            ++out;\n        }\n    }\n\n    return out;\n}\n\nint main() {\n    // Test cases\n    if (how_many_times("", "x") != 0) {\n        std::cerr << "Assertion failed: how_many_times('', 'x') == 0" << std::endl;\n        return 1;\n    }\n\n    if (how_many_times("xyxyxyx", "x") != 4) {\n        std::cerr << "Assertion failed: how_many_times('xyxyxyx', 'x') == 4" << std::endl;\n        return 1;\n    }\n\n    if (how_many_times("cacacacac", "cac") != 4) {\n        std::cerr << "Assertion failed: how_many_times('cacacacac', 'cac') == 4" << std::endl;\n        return 1;\n    }\n\n    if (how_many_times("john doe", "john") != 1) {\n        std::cerr << "Assertion failed: how_many_times('john doe', 'john') == 1" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n```\n\n### Explanation:\n1. **Function Definition**: The `how_many_times` function is defined to take two `const std::string&` references as arguments and returns an `int`. This is similar to the Fortran version, using `std::string` for string manipulation.\n\n2. **String Lengths**: The lengths of the input strings are determined using the `length()` method of the `std::string` class.\n\n3. **Loop and Condition**: The loop iterates from `0` to `str_len - sub_len`, similar to the Fortran version. The condition checks if the substring matches the substring of the string starting at index `i` with length `sub_len`.\n\n4. **Test Cases**: The test cases are similar to the Fortran version, using `if` statements to check the return values of the `how_many_times` function and printing error messages if any assertion fails.
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <cstdlib>\n\nclass Utils {\npublic:\n    static std::vector<float> find_closest_elements(const std::vector<float>& numbers) {\n        std::vector<float> out(2, 0.0f);\n        float min_diff = std::numeric_limits<float>::max();\n\n        for (size_t i = 0; i < numbers.size(); ++i) {\n            for (size_t j = i + 1; j < numbers.size(); ++j) {\n                float diff = std::abs(numbers[i] - numbers[j]);\n                if (diff < min_diff) {\n                    out[0] = numbers[i];\n                    out[1] = numbers[j];\n                    min_diff = diff;\n                }\n            }\n        }\n\n        if (out[0] > out[1]) {\n            std::swap(out[0], out[1]);\n        }\n\n        return out;\n    }\n\n    static bool issame(const std::vector<float>& a, const std::vector<float>& b) {\n        if (a.size() != b.size()) {\n            return false;\n        }\n\n        for (size_t i = 0; i < a.size(); ++i) {\n            if (std::abs(a[i] - b[i]) > 1e-4) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};\n\nint main() {\n    std::vector<float> test1 = {1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    std::vector<float> test2 = {1.0, 2.0, 5.9, 4.0, 5.0};\n    std::vector<float> test3 = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    std::vector<float> test4 = {1.0, 2.0, 3.0, 4.0, 5.0, 2.0};\n    std::vector<float> test5 = {1.1, 2.2, 3.1, 4.1, 5.1};\n\n    std::vector<float> result;\n\n    result = Utils::find_closest_elements(test1);\n    if (!Utils::issame(result, {3.9, 4.0})) {\n        std::cerr << "Assertion failed for test1" << std::endl;\n        std::exit(1);\n    }\n\n    result = Utils::find_closest_elements(test2);\n    if (!Utils::issame(result, {5.0, 5.9})) {\n        std::cerr << "Assertion failed for test2" << std::endl;\n        std::exit(1);\n    }\n\n    result = Utils::find_closest_elements(test3);\n    if (!Utils::issame(result, {2.0, 2.2})) {\n        std::cerr << "Assertion failed for test3" << std::endl;\n        std::exit(1);\n    }\n\n    result = Utils::find_closest_elements(test4);\n    if (!Utils::issame(result, {2.0, 2.0})) {\n        std::cerr << "Assertion failed for test4" << std::endl;\n        std::exit(1);\n    }\n\n    result = Utils::find_closest_elements(test5);\n    if (!Utils::issame(result, {2.2, 3.1})) {\n        std::cerr << "Assertion failed for test5" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed" << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n\nstd::vector<float> rescale_to_unit(const std::vector<float>& numbers) {\n    std::vector<float> rescaled(numbers.size());\n    float min_val = *std::min_element(numbers.begin(), numbers.end());\n    float max_val = *std::max_element(numbers.begin(), numbers.end());\n\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n\n    return rescaled;\n}\n\nbool issame(const std::vector<float>& a, const std::vector<float>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (std::abs(a[i] - b[i]) > 1.0e-4) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::vector<float> numbers, result;\n    std::vector<float> expected1 = {0.0, 1.0};\n    std::vector<float> expected2 = {1.0, 0.0};\n    std::vector<float> expected3 = {0.0, 0.25, 0.5, 0.75, 1.0};\n    std::vector<float> expected4 = {0.25, 0.0, 1.0, 0.5, 0.75};\n    std::vector<float> expected5 = {0.25, 0.0, 1.0, 0.5, 0.75};\n\n    // Test case 1\n    numbers = {2.0, 49.9};\n    result = rescale_to_unit(numbers);\n    if (!issame(result, expected1)) {\n        std::cerr << "Assertion failed for test case 1" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 2\n    numbers = {100.0, 49.9};\n    result = rescale_to_unit(numbers);\n    if (!issame(result, expected2)) {\n        std::cerr << "Assertion failed for test case 2" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 3\n    numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n    result = rescale_to_unit(numbers);\n    if (!issame(result, expected3)) {\n        std::cerr << "Assertion failed for test case 3" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 4\n    numbers = {2.0, 1.0, 5.0, 3.0, 4.0};\n    result = rescale_to_unit(numbers);\n    if (!issame(result, expected4)) {\n        std::cerr << "Assertion failed for test case 4" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 5\n    numbers = {12.0, 11.0, 15.0, 13.0, 14.0};\n    result = rescale_to_unit(numbers);\n    if (!issame(result, expected5)) {\n        std::cerr << "Assertion failed for test case 5" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully" << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For std::exit\n#include <string>\n\n// Function to get the length of a string\nint strlen(const std::string& str) {\n    return str.length();\n}\n\nvoid run_assertions() {\n    // Assertions\n    if (strlen("") != 0) {\n        std::cerr << "Assertion failed: strlen(\"\") == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (strlen("x") != 1) {\n        std::cerr << "Assertion failed: strlen(\"x\") == 1" << std::endl;\n        std::exit(1);\n    }\n\n    if (strlen("asdasnakj") != 9) {\n        std::cerr << "Assertion failed: strlen(\"asdasnakj\") == 9" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n}\n\nint main() {\n    // Main program logic\n    run_assertions();\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\nint largest_divisor(int n) {\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)); ++i) {\n        if (n % i == 0) {\n            return n / i;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    // Test cases\n    int result;\n\n    result = largest_divisor(3);\n    if (result != 1) {\n        std::cerr << "Assertion failed: largest_divisor(3) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    result = largest_divisor(7);\n    if (result != 1) {\n        std::cerr << "Assertion failed: largest_divisor(7) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    result = largest_divisor(10);\n    if (result != 5) {\n        std::cerr << "Assertion failed: largest_divisor(10) == 5" << std::endl;\n        std::exit(1);\n    }\n\n    result = largest_divisor(100);\n    if (result != 50) {\n        std::cerr << "Assertion failed: largest_divisor(100) == 50" << std::endl;\n        std::exit(1);\n    }\n\n    result = largest_divisor(49);\n    if (result != 7) {\n        std::cerr << "Assertion failed: largest_divisor(49) == 7" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n\nvoid factorize(int n, std::vector<int>& out) {\n    int m = n;\n    out.clear();\n\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)); ++i) {\n        if (m <= 1) break;\n        while (m % i == 0) {\n            m /= i;\n            out.push_back(i);\n        }\n    }\n\n    if (m > 1) {\n        out.push_back(m);\n    }\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) return false;\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n\n    return true;\n}\n\nint main() {\n    std::vector<int> factors;\n    bool result;\n\n    factorize(2, factors);\n    result = issame(factors, {2});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(2)" << std::endl;\n        std::exit(1);\n    }\n\n    factorize(4, factors);\n    result = issame(factors, {2, 2});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(4)" << std::endl;\n        std::exit(1);\n    }\n\n    factorize(8, factors);\n    result = issame(factors, {2, 2, 2});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(8)" << std::endl;\n        std::exit(1);\n    }\n\n    factorize(3 * 19, factors);\n    result = issame(factors, {3, 19});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(3 * 19)" << std::endl;\n        std::exit(1);\n    }\n\n    factorize(3 * 19 * 3 * 19, factors);\n    result = issame(factors, {3, 3, 19, 19});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(3 * 19 * 3 * 19)" << std::endl;\n        std::exit(1);\n    }\n\n    factorize(3 * 19 * 3 * 19 * 3 * 19, factors);\n    result = issame(factors, {3, 3, 3, 19, 19, 19});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(3 * 19 * 3 * 19 * 3 * 19)" << std::endl;\n        std::exit(1);\n    }\n\n    factorize(3 * 19 * 19 * 19, factors);\n    result = issame(factors, {3, 19, 19, 19});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(3 * 19 * 19 * 19)" << std::endl;\n        std::exit(1);\n    }\n\n    factorize(3 * 2 * 3, factors);\n    result = issame(factors, {2, 3, 3});\n    if (!result) {\n        std::cerr << "Assertion failed for factorize(3 * 2 * 3)" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\n// Function to remove duplicates from a vector\nstd::vector<int> remove_duplicates(const std::vector<int>& numbers) {\n    std::vector<int> has1, has2, out;\n\n    if (numbers.empty()) return out;\n\n    for (int i = 0; i < numbers.size(); ++i) {\n        int num = numbers[i];\n        bool found = false;\n        for (int j = 0; j < has2.size(); ++j) {\n            if (has2[j] == num) {\n                found = true;\n                break;\n            }\n        }\n        if (found) continue;\n\n        found = false;\n        for (int j = 0; j < has1.size(); ++j) {\n            if (has1[j] == num) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            has2.push_back(num);\n        } else {\n            has1.push_back(num);\n        }\n    }\n\n    for (int i = 0; i < numbers.size(); ++i) {\n        int num = numbers[i];\n        bool found = false;\n        for (int j = 0; j < has2.size(); ++j) {\n            if (has2[j] == num) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            out.push_back(num);\n        }\n    }\n\n    return out;\n}\n\n// Helper function to assert equality between two vectors\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\n// Main function to run test cases\nint main() {\n    std::vector<int> empty_array;\n\n    // Test cases\n    assert(issame(remove_duplicates({1, 2, 3, 4}), {1, 2, 3, 4}));\n    assert(issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}), {1, 4, 5}));\n    assert(issame(remove_duplicates(empty_array), empty_array));\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cctype>\n#include <cstdlib>\n\nstd::string flip_case(const std::string& str) {\n    std::string out;\n    for (char w : str) {\n        if (std::islower(w)) {\n            out += std::toupper(w);\n        } else if (std::isupper(w)) {\n            out += std::tolower(w);\n        } else {\n            out += w;\n        }\n    }\n    return out;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert(flip_case("") == "");\n    assert(flip_case("Hello!") == "hELLO!");\n    assert(flip_case("These violent delights have violent ends") == "tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS");\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cstdlib> // For exit()\n\nstd::string concatenate(const std::vector<std::string>& strings) {\n    if (strings.empty()) {\n        return "";\n    } else {\n        std::string out = "";\n        for (const auto& str : strings) {\n            out += str;\n        }\n        return out;\n    }\n}\n\nint main() {\n    std::vector<std::string> strings;\n    std::string result;\n\n    // Test with an empty array\n    strings.clear();\n    result = concatenate(strings);\n    if (result != "") {\n        std::cerr << "Assertion failed: concatenate([]) /= ''" << std::endl;\n        exit(1);\n    }\n\n    // Test with an array of strings\n    strings = {"x", "y", "z"};\n    result = concatenate(strings);\n    if (result != "xyz") {\n        std::cerr << "Assertion failed: concatenate(['x', 'y', 'z']) /= 'xyz'" << std::endl;\n        exit(1);\n    }\n\n    // Test with a larger array of strings\n    strings = {"x", "y", "z", "w", "k"};\n    result = concatenate(strings);\n    if (result != "xyzwk") {\n        std::cerr << "Assertion failed: concatenate(['x', 'y', 'z', 'w', 'k']) /= 'xyzwk'" << std::endl;\n        exit(1);\n    }\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<std::string> filter_by_prefix(const std::vector<std::string>& strings, const std::string& prefix) {\n    std::vector<std::string> out;\n    for (const auto& str : strings) {\n        if (str.substr(0, prefix.length()) == prefix) {\n            out.push_back(str);\n        }\n    }\n    return out;\n}\n\nvoid test_cases() {\n    // Test case 1\n    std::vector<std::string> strings = {};\n    std::string prefix = "john";\n    auto result = filter_by_prefix(strings, prefix);\n    assert(result == strings);\n\n    // Test case 2\n    strings = {"xxx     ", "asd     ", "xxy     ", "john doe", "xxxAAA  ", "xxx     "};\n    prefix = "xxx";\n    std::vector<std::string> expected = {"xxx     ", "xxxAAA  ", "xxx     "};\n    result = filter_by_prefix(strings, prefix);\n    assert(result == expected);\n}\n\nint main() {\n    test_cases();\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n\nclass Utils {\npublic:\n    static std::vector<float> get_positive(const std::vector<float>& l) {\n        std::vector<float> out;\n        for (float num : l) {\n            if (num > 0.0f) {\n                out.push_back(num);\n            }\n        }\n        return out;\n    }\n\n    static bool issame(const std::vector<float>& a, const std::vector<float>& b) {\n        if (a.size() != b.size()) {\n            return false;\n        }\n        for (size_t i = 0; i < a.size(); ++i) {\n            if (std::abs(a[i] - b[i]) > 1.0e-4) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n\nint main() {\n    // Test case 1\n    std::vector<float> input = {-1.0f, -2.0f, 4.0f, 5.0f, 6.0f};\n    std::vector<float> expected = {4.0f, 5.0f, 6.0f};\n    std::vector<float> result = Utils::get_positive(input);\n    if (!Utils::issame(result, expected)) {\n        std::cerr << "Test case 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 2\n    input = {5.0f, 3.0f, -5.0f, 2.0f, 3.0f, 3.0f, 9.0f, 0.0f, 123.0f, 1.0f, -10.0f};\n    expected = {5.0f, 3.0f, 2.0f, 3.0f, 3.0f, 9.0f, 123.0f, 1.0f};\n    result = Utils::get_positive(input);\n    if (!Utils::issame(result, expected)) {\n        std::cerr << "Test case 2: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 3\n    input = {-1.0f, -2.0f};\n    expected.clear();\n    result = Utils::get_positive(input);\n    if (!Utils::issame(result, expected)) {\n        std::cerr << "Test case 3: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 4\n    input.clear();\n    expected.clear();\n    result = Utils::get_positive(input);\n    if (!Utils::issame(result, expected)) {\n        std::cerr << "Test case 4: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\n// Function to check if a number is prime\nbool is_prime(int n) {\n    if (n < 2) {\n        return false;\n    }\n\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)); ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    // Assertions to test the is_prime function\n    if (is_prime(6) != false) {\n        std::cerr << "Assertion failed: is_prime(6) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(101) != true) {\n        std::cerr << "Assertion failed: is_prime(101) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(11) != true) {\n        std::cerr << "Assertion failed: is_prime(11) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(13441) != true) {\n        std::cerr << "Assertion failed: is_prime(13441) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(61) != true) {\n        std::cerr << "Assertion failed: is_prime(61) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(4) != false) {\n        std::cerr << "Assertion failed: is_prime(4) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(1) != false) {\n        std::cerr << "Assertion failed: is_prime(1) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(5) != true) {\n        std::cerr << "Assertion failed: is_prime(5) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(11) != true) {\n        std::cerr << "Assertion failed: is_prime(11) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(17) != true) {\n        std::cerr << "Assertion failed: is_prime(17) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(5 * 17) != false) {\n        std::cerr << "Assertion failed: is_prime(5 * 17) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(11 * 7) != false) {\n        std::cerr << "Assertion failed: is_prime(11 * 7) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_prime(13441 * 19) != false) {\n        std::cerr << "Assertion failed: is_prime(13441 * 19) == false" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n\nclass Polynomial {\npublic:\n    // Define the poly function\n    static double poly(const std::vector<double>& xs, int n, double x) {\n        double sum = 0.0;\n        for (int i = 1; i <= n; ++i) {\n            sum += xs[i-1] * std::pow(x, i-1);\n        }\n        return sum;\n    }\n\n    // Define the find_zero function\n    static double find_zero(const std::vector<double>& xs, int n) {\n        double ans = 0.0;\n        double value = poly(xs, n, ans);\n        while (std::abs(value) > 1e-6) {\n            double driv = 0.0;\n            for (int i = 2; i <= n; ++i) {\n                driv += xs[i-1] * (i-1) * std::pow(ans, i-2);\n            }\n            ans -= value / driv;\n            value = poly(xs, n, ans);\n        }\n        return ans;\n    }\n};\n\nint main() {\n    std::srand(std::time(nullptr));\n\n    for (int i = 0; i < 100; ++i) {\n        int ncoeff = 2 * (1 + std::rand() % 5);\n        std::vector<double> coeffs(ncoeff);\n\n        for (int j = 0; j < ncoeff; ++j) {\n            coeffs[j] = -10 + std::rand() % 21;\n            if (coeffs[j] == 0) coeffs[j] = 1;\n        }\n\n        double solution = Polynomial::find_zero(coeffs, ncoeff);\n        if (std::abs(Polynomial::poly(coeffs, ncoeff, solution)) >= 1e-3) {\n            std::cerr << "Assertion failed: abs(poly(coeffs, solution)) < 1e-3" << std::endl;\n            return 1;\n        }\n    }\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\n// Function to sort every third element\nstd::vector<int> sort_third(const std::vector<int>& l) {\n    int n = l.size();\n    std::vector<int> third((n + 2) / 3);\n    std::vector<int> out(n);\n\n    // Extract every third element\n    for (int i = 0; i < third.size(); ++i) {\n        third[i] = l[i * 3];\n    }\n\n    // Sort the third array\n    std::sort(third.begin(), third.end());\n\n    // Reconstruct the output array\n    for (int i = 0; i < n; ++i) {\n        if (i % 3 == 0) {\n            out[i] = third[i / 3];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    return out;\n}\n\n// Helper function to compare two vectors\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Assert function\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\n// Test function\nvoid run_tests() {\n    assert_condition(issame(sort_third({1, 2, 3}), sort_third({1, 2, 3})));\n    assert_condition(issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\n                           sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert_condition(issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\n                           sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert_condition(issame(sort_third({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5}));\n    assert_condition(issame(sort_third({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5}));\n    assert_condition(issame(sort_third({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5}));\n    assert_condition(issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n\nint main() {\n    run_tests();\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n\n// Function to remove duplicates and sort\nvoid unique(const std::vector<int>& l, std::vector<int>& out) {\n    std::vector<int> temp;\n    for (int i : l) {\n        if (std::find(temp.begin(), temp.end(), i) == temp.end()) {\n            temp.push_back(i);\n        }\n    }\n    out = temp;\n    std::sort(out.begin(), out.end());\n}\n\n// Function to check if two vectors are the same\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> input = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    std::vector<int> expected = {0, 2, 3, 5, 9, 123};\n    std::vector<int> result;\n\n    // Call the unique function\n    unique(input, result);\n\n    // Check if the result is the same as expected\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed: result is not as expected" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nclass MaxModule {\npublic:\n    static float max_element(const std::vector<float>& arr) {\n        if (arr.empty()) {\n            throw std::invalid_argument("Array is empty");\n        }\n        float max_val = arr[0];\n        for (size_t i = 1; i < arr.size(); ++i) {\n            if (max_val < arr[i]) {\n                max_val = arr[i];\n            }\n        }\n        return max_val;\n    }\n};\n\nint main() {\n    // Test case 1\n    std::vector<float> arr = {1.0, 2.0, 3.0};\n    float result = MaxModule::max_element(arr);\n    if (std::abs(result - 3.0) > 1e-4) {\n        std::cerr << "Test case 1: assertion failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2\n    arr = {5.0, 3.0, -5.0, 2.0, -3.0, 3.0, 9.0, 0.0, 124.0, 1.0, -10.0};\n    result = MaxModule::max_element(arr);\n    if (std::abs(result - 124.0) > 1e-4) {\n        std::cerr << "Test case 2: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For exit()\n\n// Function prototype\nint fizz_buzz(int n);\n\n// Assert function\nvoid assert(bool condition, const std::string& message) {\n    if (!condition) {\n        std::cerr << message << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Main program logic\n    assert(fizz_buzz(50) == 0, "fizz_buzz(50) == 0: assertion failed");\n    assert(fizz_buzz(78) == 2, "fizz_buzz(78) == 2: assertion failed");\n    assert(fizz_buzz(79) == 3, "fizz_buzz(79) == 3: assertion failed");\n    assert(fizz_buzz(100) == 3, "fizz_buzz(100) == 3: assertion failed");\n    assert(fizz_buzz(200) == 6, "fizz_buzz(200) == 6: assertion failed");\n    assert(fizz_buzz(4000) == 192, "fizz_buzz(4000) == 192: assertion failed");\n    assert(fizz_buzz(10000) == 639, "fizz_buzz(10000) == 639: assertion failed");\n    assert(fizz_buzz(100000) == 8026, "fizz_buzz(100000) == 8026: assertion failed");\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}\n\nint fizz_buzz(int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 11 == 0 || i % 13 == 0) {\n            int q = i;\n            while (q > 0) {\n                if (q % 10 == 7) {\n                    count++;\n                }\n                q /= 10;\n            }\n        }\n    }\n    return count;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<float> sort_even(const vector<float>& l) {\n    vector<float> out(l.size());\n    vector<float> even;\n    int n = l.size();\n\n    // Extract even-indexed elements\n    for (int i = 0; i < (n + 1) / 2; ++i) {\n        even.push_back(l[2 * i]);\n    }\n\n    // Sort the even-indexed elements\n    sort(even.begin(), even.end());\n\n    // Merge sorted even-indexed elements back into the output array\n    for (int i = 0; i < n; ++i) {\n        if (i % 2 == 0) {\n            out[i] = even[i / 2];\n        } else {\n            out[i] = l[i];\n        }\n    }\n\n    return out;\n}\n\nbool issame(const vector<float>& a, const vector<float>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (fabs(a[i] - b[i]) > 1e-4) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid run_tests() {\n    vector<float> l;\n    vector<float> expected;\n    vector<float> result;\n\n    // Test case 1\n    l = {1.0, 2.0, 3.0};\n    expected = {1.0, 2.0, 3.0};\n    result = sort_even(l);\n    if (!issame(result, expected)) {\n        cerr << "Test case 1 failed" << endl;\n        exit(1);\n    }\n\n    // Test case 2\n    l = {5.0, 3.0, -5.0, 2.0, -3.0, 3.0, 9.0, 0.0, 123.0, 1.0, -10.0};\n    expected = {-10.0, 3.0, -5.0, 2.0, -3.0, 3.0, 5.0, 0.0, 9.0, 1.0, 123.0};\n    result = sort_even(l);\n    if (!issame(result, expected)) {\n        cerr << "Test case 2 failed" << endl;\n        exit(1);\n    }\n\n    // Test case 3\n    l = {5.0, 8.0, -12.0, 4.0, 23.0, 2.0, 3.0, 11.0, 12.0, -10.0};\n    expected = {-12.0, 8.0, 3.0, 4.0, 5.0, 2.0, 12.0, 11.0, 23.0, -10.0};\n    result = sort_even(l);\n    if (!issame(result, expected)) {\n        cerr << "Test case 3 failed" << endl;\n        exit(1);\n    }\n\n    cout << "All test cases passed" << endl;\n}\n\nint main() {\n    run_tests();\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For exit()\n\n// Function declaration\nint car_race_collision(int n);\n\nint main() {\n    // Assertions\n    if (car_race_collision(2) != 4) {\n        std::cerr << "Assertion failed: car_race_collision(2) == 4" << std::endl;\n        exit(1);\n    }\n\n    if (car_race_collision(3) != 9) {\n        std::cerr << "Assertion failed: car_race_collision(3) == 9" << std::endl;\n        exit(1);\n    }\n\n    if (car_race_collision(4) != 16) {\n        std::cerr << "Assertion failed: car_race_collision(4) == 16" << std::endl;\n        exit(1);\n    }\n\n    if (car_race_collision(8) != 64) {\n        std::cerr << "Assertion failed: car_race_collision(8) == 64" << std::endl;\n        exit(1);\n    }\n\n    if (car_race_collision(10) != 100) {\n        std::cerr << "Assertion failed: car_race_collision(10) == 100" << std::endl;\n        exit(1);\n    }\n\n    return 0;\n}\n\n// Function definition\nint car_race_collision(int n) {\n    return n * n;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function to increment each element of the list\nstd::vector<int> incr_list(const std::vector<int>& l) {\n    std::vector<int> res(l.size());\n    for (size_t i = 0; i < l.size(); ++i) {\n        res[i] = l[i] + 1;\n    }\n    return res;\n}\n\n// Function to check if two lists are equal\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    std::vector<int> l;\n    std::vector<int> result;\n    std::vector<int> expected;\n    bool condition;\n\n    // Test case 1\n    l.clear();\n    expected.clear();\n    result = incr_list(l);\n    condition = issame(result, expected);\n    if (!condition) {\n        std::cerr << "Test case 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 2\n    l = {3, 2, 1};\n    expected = {4, 3, 2};\n    result = incr_list(l);\n    condition = issame(result, expected);\n    if (!condition) {\n        std::cerr << "Test case 2: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 3\n    l = {5, 2, 5, 2, 3, 3, 9, 0, 123};\n    expected = {6, 3, 6, 3, 4, 4, 10, 1, 124};\n    result = incr_list(l);\n    condition = issame(result, expected);\n    if (!condition) {\n        std::cerr << "Test case 3: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed" << std::endl;\n    std::exit(0);\n}
#include <iostream>\n#include <vector>\n#include <cstdlib> // For exit()\n\nbool pairs_sum_to_zero(const std::vector<int>& l) {\n    for (size_t i = 0; i < l.size(); ++i) {\n        for (size_t j = i + 1; j < l.size(); ++j) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<int> l;\n    bool result;\n\n    // Test case 1\n    l = {1, 3, 5, 0};\n    result = pairs_sum_to_zero(l);\n    if (result != false) {\n        std::cout << "Test case 1 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 2\n    l = {1, 3, -2, 1};\n    result = pairs_sum_to_zero(l);\n    if (result != false) {\n        std::cout << "Test case 2 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 3\n    l = {1, 2, 3, 7};\n    result = pairs_sum_to_zero(l);\n    if (result != false) {\n        std::cout << "Test case 3 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 4\n    l = {2, 4, -5, 3, 5, 7};\n    result = pairs_sum_to_zero(l);\n    if (result != true) {\n        std::cout << "Test case 4 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 5\n    l = {1};\n    result = pairs_sum_to_zero(l);\n    if (result != false) {\n        std::cout << "Test case 5 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 6\n    l = {-3, 9, -1, 3, 2, 30};\n    result = pairs_sum_to_zero(l);\n    if (result != true) {\n        std::cout << "Test case 6 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 7\n    l = {-3, 9, -1, 3, 2, 31};\n    result = pairs_sum_to_zero(l);\n    if (result != true) {\n        std::cout << "Test case 7 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 8\n    l = {-3, 9, -1, 4, 2, 30};\n    result = pairs_sum_to_zero(l);\n    if (result != false) {\n        std::cout << "Test case 8 failed" << std::endl;\n        exit(1);\n    }\n\n    // Test case 9\n    l = {-3, 9, -1, 4, 2, 31};\n    result = pairs_sum_to_zero(l);\n    if (result != false) {\n        std::cout << "Test case 9 failed" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\n// Function to change base\nstd::string change_base(int x, int base) {\n    std::string out = "";\n    int temp_x = x;\n    while (temp_x > 0) {\n        int remainder = temp_x % base;\n        out = std::to_string(remainder) + out;\n        temp_x = temp_x / base;\n    }\n    return out;\n}\n\n// Integer to string conversion function\nstd::string itoa(int num) {\n    return std::to_string(num);\n}\n\nint main() {\n    // Assertions\n    if (change_base(8, 3) != "22") {\n        std::cerr << "Assertion failed: change_base(8, 3) == '22'" << std::endl;\n        std::exit(1);\n    }\n    if (change_base(9, 3) != "100") {\n        std::cerr << "Assertion failed: change_base(9, 3) == '100'" << std::endl;\n        std::exit(1);\n    }\n    if (change_base(234, 2) != "11101010") {\n        std::cerr << "Assertion failed: change_base(234, 2) == '11101010'" << std::endl;\n        std::exit(1);\n    }\n    if (change_base(16, 2) != "10000") {\n        std::cerr << "Assertion failed: change_base(16, 2) == '10000'" << std::endl;\n        std::exit(1);\n    }\n    if (change_base(8, 2) != "1000") {\n        std::cerr << "Assertion failed: change_base(8, 2) == '1000'" << std::endl;\n        std::exit(1);\n    }\n    if (change_base(7, 2) != "111") {\n        std::cerr << "Assertion failed: change_base(7, 2) == '111'" << std::endl;\n        std::exit(1);\n    }\n\n    for (int x = 2; x <= 7; ++x) {\n        if (change_base(x, x + 1) != itoa(x)) {\n            std::cerr << "Assertion failed: change_base(" << x << ", " << x + 1 << ") == " << x << std::endl;\n            std::exit(1);\n        }\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\n// Function prototype\nfloat triangle_area(float a, float h);\n\nint main() {\n    float result;\n\n    // Test cases\n    result = triangle_area(5.0, 3.0);\n    if (std::abs(result - 7.5) > 1e-4) {\n        std::cout << "Assertion failed: triangle_area(5, 3) should be 7.5" << std::endl;\n        std::exit(1);\n    }\n\n    result = triangle_area(2.0, 2.0);\n    if (std::abs(result - 2.0) > 1e-4) {\n        std::cout << "Assertion failed: triangle_area(2, 2) should be 2.0" << std::endl;\n        std::exit(1);\n    }\n\n    result = triangle_area(10.0, 8.0);\n    if (std::abs(result - 40.0) > 1e-4) {\n        std::cout << "Assertion failed: triangle_area(10, 8) should be 40.0" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}\n\n// Function definition\nfloat triangle_area(float a, float h) {\n    return (a * h) * 0.5;\n}
#include <iostream>\n#include <vector>\n\n// Function declaration\nint fib4(int n);\n\nint main() {\n    // Assertions\n    if (fib4(5) != 4) {\n        std::cerr << "fib4(5) == 4: assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (fib4(8) != 28) {\n        std::cerr << "fib4(8) == 28: assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (fib4(10) != 104) {\n        std::cerr << "fib4(10) == 104: assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (fib4(12) != 386) {\n        std::cerr << "fib4(12) == 386: assertion failed" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}\n\n// Function definition\nint fib4(int n) {\n    static std::vector<int> f(100, 0);\n\n    // Initialize the first four elements\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 2;\n    f[3] = 0;\n\n    // Compute the sequence\n    for (int i = 4; i <= n; ++i) {\n        f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n    }\n\n    return f[n];\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nclass Utilities {\npublic:\n    static void sort(std::vector<float>& arr) {\n        for (size_t i = 0; i < arr.size() - 1; ++i) {\n            for (size_t j = i + 1; j < arr.size(); ++j) {\n                if (arr[i] > arr[j]) {\n                    std::swap(arr[i], arr[j]);\n                }\n            }\n        }\n    }\n\n    static float median(const std::vector<float>& arr) {\n        std::vector<float> sorted_arr = arr;\n        sort(sorted_arr);\n        size_t n = sorted_arr.size();\n\n        if (n % 2 == 1) {\n            return sorted_arr[(n + 1) / 2 - 1];\n        } else {\n            return 0.5 * (sorted_arr[n / 2 - 1] + sorted_arr[n / 2]);\n        }\n    }\n};\n\nint main() {\n    // Test cases\n    if (std::abs(Utilities::median({3.0, 1.0, 2.0, 4.0, 5.0}) - 3.0) > 1e-4) {\n        std::cerr << "Test case 1 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (std::abs(Utilities::median({-10.0, 4.0, 6.0, 1000.0, 10.0, 20.0}) - 8.0) > 1e-4) {\n        std::cerr << "Test case 2 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (std::abs(Utilities::median({5.0}) - 5.0) > 1e-4) {\n        std::cerr << "Test case 3 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (std::abs(Utilities::median({6.0, 5.0}) - 5.5) > 1e-4) {\n        std::cerr << "Test case 4 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    if (std::abs(Utilities::median({8.0, 1.0, 3.0, 9.0, 9.0, 2.0, 7.0}) - 7.0) > 1e-4) {\n        std::cerr << "Test case 5 failed: assertion failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <algorithm>\n\n// Function to check if a string is a palindrome\nbool is_palindrome(const std::string& text) {\n    std::string reversed_text = text;\n    std::reverse(reversed_text.begin(), reversed_text.end());\n    return reversed_text == text;\n}\n\nint main() {\n    // Main program\n    if (!is_palindrome("")) {\n        std::cerr << "Assertion failed: is_palindrome('') == true" << std::endl;\n        return 1;\n    }\n\n    if (!is_palindrome("aba")) {\n        std::cerr << "Assertion failed: is_palindrome('aba') == true" << std::endl;\n        return 1;\n    }\n\n    if (!is_palindrome("aaaaa")) {\n        std::cerr << "Assertion failed: is_palindrome('aaaaa') == true" << std::endl;\n        return 1;\n    }\n\n    if (is_palindrome("zbcd")) {\n        std::cerr << "Assertion failed: is_palindrome('zbcd') == false" << std::endl;\n        return 1;\n    }\n\n    if (!is_palindrome("xywyx")) {\n        std::cerr << "Assertion failed: is_palindrome('xywyx') == true" << std::endl;\n        return 1;\n    }\n\n    if (is_palindrome("xywyz")) {\n        std::cerr << "Assertion failed: is_palindrome('xywyz') == false" << std::endl;\n        return 1;\n    }\n\n    if (is_palindrome("xywzx")) {\n        std::cerr << "Assertion failed: is_palindrome('xywzx') == false" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n```\n\n### Explanation:\n1. **Function Definition**: The `is_palindrome` function checks if a given string is a palindrome by comparing it with its reversed version. This is done using the `std::reverse` function from the `<algorithm>` header.\n2. **Main Program**: The `main` function contains the same test cases as the Fortran program. Each test case calls the `is_palindrome` function with a specific string and checks the result. If any test fails, it prints an error message and returns a non-zero value, indicating an error.\n3. **Error Handling**: The `std::cerr` stream is used for error messages, similar to the `write(*,*)` statement in Fortran.\n4. **String Handling**: The `std::string` type in C++ is used to handle strings, which simplifies memory management compared to the manual allocation and deallocation in Fortran.
#include <iostream>\n#include <cstdlib>\n\n// Function declaration\nint modp(int n, int p);\n\nint main() {\n    // Variable declaration\n    int result;\n\n    // Assertions\n    result = modp(3, 5);\n    if (result != 3) {\n        std::cout << "modp(3, 5) == 3: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(1101, 101);\n    if (result != 2) {\n        std::cout << "modp(1101, 101) == 2: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(0, 101);\n    if (result != 1) {\n        std::cout << "modp(0, 101) == 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(3, 11);\n    if (result != 8) {\n        std::cout << "modp(3, 11) == 8: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(100, 101);\n    if (result != 1) {\n        std::cout << "modp(100, 101) == 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(30, 5);\n    if (result != 4) {\n        std::cout << "modp(30, 5) == 4: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = modp(31, 5);\n    if (result != 3) {\n        std::cout << "modp(31, 5) == 3: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}\n\n// Function definition\nint modp(int n, int p) {\n    int modp = 1;\n    for (int i = 1; i <= n; ++i) {\n        modp = (modp * 2) % p;\n    }\n    return modp;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n\nstd::string encode_shift(const std::string& s) {\n    std::string out = s;\n    for (size_t i = 0; i < s.length(); ++i) {\n        int w = (static_cast<int>(s[i]) + 5 - static_cast<int>('a')) % 26 + static_cast<int>('a');\n        out[i] = static_cast<char>(w);\n    }\n    return out;\n}\n\nstd::string decode_shift(const std::string& s) {\n    std::string out = s;\n    for (size_t i = 0; i < s.length(); ++i) {\n        int w = (static_cast<int>(s[i]) + 21 - static_cast<int>('a')) % 26 + static_cast<int>('a');\n        out[i] = static_cast<char>(w);\n    }\n    return out;\n}\n\nint main() {\n    std::srand(std::time(nullptr));\n\n    for (int i = 0; i < 100; ++i) {\n        int l = 10 + std::rand() % 11;\n        std::string str;\n        for (int j = 0; j < l; ++j) {\n            char chr = 'a' + std::rand() % 26;\n            str += chr;\n        }\n\n        std::string encoded_str = encode_shift(str);\n        std::string decoded_str = decode_shift(encoded_str);\n\n        if (decoded_str != str) {\n            std::cerr << "Assertion failed: decoded string does not match original" << std::endl;\n            return 1;\n        }\n    }\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\n// Function to remove vowels from a string\nstd::string remove_vowels(const std::string& text) {\n    std::string out = "";\n    std::string vowels = "AEIOUaeiou";\n    for (char c : text) {\n        if (vowels.find(c) == std::string::npos) {\n            out += c;\n        }\n    }\n    return out;\n}\n\n// Assert function to check conditions\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert(remove_vowels("") == "");\n    assert(remove_vowels("abcdef//nghijklm") == "bcdf//nghjklm");\n    assert(remove_vowels("fedcba") == "fdcb");\n    assert(remove_vowels("eeeee") == "");\n    assert(remove_vowels("acBAA") == "cB");\n    assert(remove_vowels("EcBOO") == "cB");\n    assert(remove_vowels("ybcd") == "ybcd");\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function prototype\nbool below_threshold(const std::vector<int>& l, int t);\n\nint main() {\n    std::vector<int> l;\n    int t;\n\n    // Test cases\n    l = {1, 2, 4, 10};\n    t = 100;\n    if (!below_threshold(l, t)) {\n        std::cerr << "Assertion failed: below_threshold({1, 2, 4, 10}, 100)" << std::endl;\n        std::exit(1);\n    }\n\n    l = {1, 20, 4, 10};\n    t = 5;\n    if (below_threshold(l, t)) {\n        std::cerr << "Assertion failed: not(below_threshold({1, 20, 4, 10}, 5))" << std::endl;\n        std::exit(1);\n    }\n\n    l = {1, 20, 4, 10};\n    t = 21;\n    if (!below_threshold(l, t)) {\n        std::cerr << "Assertion failed: below_threshold({1, 20, 4, 10}, 21)" << std::endl;\n        std::exit(1);\n    }\n\n    l = {1, 20, 4, 10};\n    t = 22;\n    if (!below_threshold(l, t)) {\n        std::cerr << "Assertion failed: below_threshold({1, 20, 4, 10}, 22)" << std::endl;\n        std::exit(1);\n    }\n\n    l = {1, 8, 4, 10};\n    t = 11;\n    if (!below_threshold(l, t)) {\n        std::cerr << "Assertion failed: below_threshold({1, 8, 4, 10}, 11)" << std::endl;\n        std::exit(1);\n    }\n\n    l = {1, 8, 4, 10};\n    t = 10;\n    if (below_threshold(l, t)) {\n        std::cerr << "Assertion failed: not(below_threshold({1, 8, 4, 10}, 10))" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}\n\nbool below_threshold(const std::vector<int>& l, int t) {\n    for (int i : l) {\n        if (i >= t) {\n            return false;\n        }\n    }\n    return true;\n}
#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\n// Function to add two integers\nint add(int x, int y) {\n    return x + y;\n}\n\nint main() {\n    // Assertions\n    if (add(0, 1) != 1) {\n        std::cerr << "Assertion failed: add(0, 1) == 1" << std::endl;\n        return 1;\n    }\n\n    if (add(1, 0) != 1) {\n        std::cerr << "Assertion failed: add(1, 0) == 1" << std::endl;\n        return 1;\n    }\n\n    if (add(2, 3) != 5) {\n        std::cerr << "Assertion failed: add(2, 3) == 5" << std::endl;\n        return 1;\n    }\n\n    if (add(5, 7) != 12) {\n        std::cerr << "Assertion failed: add(5, 7) == 12" << std::endl;\n        return 1;\n    }\n\n    if (add(7, 5) != 12) {\n        std::cerr << "Assertion failed: add(7, 5) == 12" << std::endl;\n        return 1;\n    }\n\n    // Seed for random number generation\n    std::srand(std::time(nullptr));\n\n    // Loop with random number generation and assertions\n    for (int i = 1; i <= 100; ++i) {\n        int x = std::rand() % 1000; // Generate random number between 0 and 999\n        int y = std::rand() % 1000; // Generate random number between 0 and 999\n        if (add(x, y) != x + y) {\n            std::cerr << "Assertion failed: add(" << x << ", " << y << ") == " << x + y << std::endl;\n            return 1;\n        }\n    }\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nbool same_chars(const std::string& s0, const std::string& s1) {\n    for (char c : s0) {\n        if (s1.find(c) == std::string::npos) {\n            return false;\n        }\n    }\n\n    for (char c : s1) {\n        if (s0.find(c) == std::string::npos) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    bool result;\n\n    result = same_chars("eabcdzzzz", "dddzzzzzzzddeddabc");\n    if (!result) {\n        std::cerr << "Assertion failed: same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == true" << std::endl;\n        std::exit(1);\n    }\n\n    result = same_chars("abcd", "dddddddabc");\n    if (!result) {\n        std::cerr << "Assertion failed: same_chars('abcd', 'dddddddabc') == true" << std::endl;\n        std::exit(1);\n    }\n\n    result = same_chars("dddddddabc", "abcd");\n    if (!result) {\n        std::cerr << "Assertion failed: same_chars('dddddddabc', 'abcd') == true" << std::endl;\n        std::exit(1);\n    }\n\n    result = same_chars("eabcd", "dddddddabc");\n    if (result) {\n        std::cerr << "Assertion failed: same_chars('eabcd', 'dddddddabc') == false" << std::endl;\n        std::exit(1);\n    }\n\n    result = same_chars("abcd", "dddddddabcf");\n    if (result) {\n        std::cerr << "Assertion failed: same_chars('abcd', 'dddddddabcf') == false" << std::endl;\n        std::exit(1);\n    }\n\n    result = same_chars("eabcdzzzz", "dddzzzzzzzddddabc");\n    if (result) {\n        std::cerr << "Assertion failed: same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == false" << std::endl;\n        std::exit(1);\n    }\n\n    result = same_chars("aabb", "aaccc");\n    if (result) {\n        std::cerr << "Assertion failed: same_chars('aabb', 'aaccc') == false" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <cstdlib>\n\nint fib(int n) {\n    int f[1000];\n    f[1] = 0;\n    f[2] = 1;\n    for (int i = 3; i <= n + 1; ++i) {\n        f[i] = f[i - 1] + f[i - 2];\n    }\n    return f[n + 1];\n}\n\nint main() {\n    // Test cases\n    int result;\n\n    result = fib(10);\n    if (result != 55) {\n        std::cout << "fib(10) == 55: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = fib(1);\n    if (result != 1) {\n        std::cout << "fib(1) == 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = fib(8);\n    if (result != 21) {\n        std::cout << "fib(8) == 21: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = fib(11);\n    if (result != 89) {\n        std::cout << "fib(11) == 89: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    result = fib(12);\n    if (result != 144) {\n        std::cout << "fib(12) == 144: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib> // For exit()\n\n// Function to check if the array is monotonic\nbool is_monotonic(const std::vector<float>& l) {\n    bool incr = false;\n    bool decr = false;\n\n    for (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > l[i - 1]) incr = true;\n        if (l[i] < l[i - 1]) decr = true;\n    }\n\n    return !(incr && decr);\n}\n\nint main() {\n    // Test cases\n    std::vector<float> l;\n\n    l = {1.0, 2.0, 4.0, 10.0};\n    if (!is_monotonic(l)) {\n        std::cerr << "Assertion failed: {1, 2, 4, 10} should be monotonic" << std::endl;\n        exit(1);\n    }\n\n    l = {1.0, 2.0, 4.0, 20.0};\n    if (!is_monotonic(l)) {\n        std::cerr << "Assertion failed: {1, 2, 4, 20} should be monotonic" << std::endl;\n        exit(1);\n    }\n\n    l = {1.0, 20.0, 4.0, 10.0};\n    if (is_monotonic(l)) {\n        std::cerr << "Assertion failed: {1, 20, 4, 10} should not be monotonic" << std::endl;\n        exit(1);\n    }\n\n    l = {4.0, 1.0, 0.0, -10.0};\n    if (!is_monotonic(l)) {\n        std::cerr << "Assertion failed: {4, 1, 0, -10} should be monotonic" << std::endl;\n        exit(1);\n    }\n\n    l = {4.0, 1.0, 1.0, 0.0};\n    if (!is_monotonic(l)) {\n        std::cerr << "Assertion failed: {4, 1, 1, 0} should be monotonic" << std::endl;\n        exit(1);\n    }\n\n    l = {1.0, 2.0, 3.0, 2.0, 5.0, 60.0};\n    if (is_monotonic(l)) {\n        std::cerr << "Assertion failed: {1, 2, 3, 2, 5, 60} should not be monotonic" << std::endl;\n        exit(1);\n    }\n\n    l = {1.0, 2.0, 3.0, 4.0, 5.0, 60.0};\n    if (!is_monotonic(l)) {\n        std::cerr << "Assertion failed: {1, 2, 3, 4, 5, 60} should be monotonic" << std::endl;\n        exit(1);\n    }\n\n    l = {9.0, 9.0, 9.0, 9.0};\n    if (!is_monotonic(l)) {\n        std::cerr << "Assertion failed: {9, 9, 9, 9} should be monotonic" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n\nclass CommonModule {\npublic:\n    static void common(const std::vector<int>& l1, const std::vector<int>& l2, std::vector<int>& out) {\n        std::vector<int> temp;\n        for (int i : l1) {\n            if (std::find(temp.begin(), temp.end(), i) == temp.end() && std::find(l2.begin(), l2.end(), i) != l2.end()) {\n                temp.push_back(i);\n            }\n        }\n        std::sort(temp.begin(), temp.end());\n        out = temp;\n    }\n\n    static bool issame(const std::vector<int>& a, const std::vector<int>& b) {\n        if (a.size() != b.size()) {\n            return false;\n        }\n        for (size_t i = 0; i < a.size(); ++i) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n\nint main() {\n    std::vector<int> l1, l2, result, expected;\n\n    // Test case 1\n    l1 = {1, 4, 3, 34, 653, 2, 5};\n    l2 = {5, 7, 1, 5, 9, 653, 121};\n    expected = {1, 5, 653};\n    CommonModule::common(l1, l2, result);\n    if (!CommonModule::issame(result, expected)) {\n        std::cerr << "Test case 1 failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 2\n    l1 = {5, 3, 2, 8};\n    l2 = {3, 2};\n    expected = {2, 3};\n    CommonModule::common(l1, l2, result);\n    if (!CommonModule::issame(result, expected)) {\n        std::cerr << "Test case 2 failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 3\n    l1 = {4, 3, 2, 8};\n    l2 = {3, 2, 4};\n    expected = {2, 3, 4};\n    CommonModule::common(l1, l2, result);\n    if (!CommonModule::issame(result, expected)) {\n        std::cerr << "Test case 3 failed" << std::endl;\n        std::exit(1);\n    }\n\n    // Test case 4\n    l1 = {4, 3, 2, 8};\n    l2.clear();\n    expected.clear();\n    CommonModule::common(l1, l2, result);\n    if (!CommonModule::issame(result, expected)) {\n        std::cerr << "Test case 4 failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n```
#include <iostream>\n#include <cmath>\n\nint largest_prime_factor(int n) {\n    int num = n;\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)); ++i) {\n        while (num % i == 0 && num > i) {\n            num /= i;\n        }\n    }\n    return num;\n}\n\nint main() {\n    // Assertions\n    if (largest_prime_factor(15) != 5) {\n        std::cerr << "Assertion failed: largest_prime_factor(15) == 5" << std::endl;\n        return 1;\n    }\n\n    if (largest_prime_factor(27) != 3) {\n        std::cerr << "Assertion failed: largest_prime_factor(27) == 3" << std::endl;\n        return 1;\n    }\n\n    if (largest_prime_factor(63) != 7) {\n        std::cerr << "Assertion failed: largest_prime_factor(63) == 7" << std::endl;\n        return 1;\n    }\n\n    if (largest_prime_factor(330) != 11) {\n        std::cerr << "Assertion failed: largest_prime_factor(330) == 11" << std::endl;\n        return 1;\n    }\n\n    if (largest_prime_factor(13195) != 29) {\n        std::cerr << "Assertion failed: largest_prime_factor(13195) == 29" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For exit()\n\n// Function prototype\nint sum_to_n(int n);\n\nint main() {\n    // Assertions\n    if (sum_to_n(1) != 1) {\n        std::cout << "sum_to_n(1) == 1: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    if (sum_to_n(6) != 21) {\n        std::cout << "sum_to_n(6) == 21: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    if (sum_to_n(11) != 66) {\n        std::cout << "sum_to_n(11) == 66: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    if (sum_to_n(30) != 465) {\n        std::cout << "sum_to_n(30) == 465: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    if (sum_to_n(100) != 5050) {\n        std::cout << "sum_to_n(100) == 5050: assertion failed" << std::endl;\n        exit(1);\n    }\n\n    return 0;\n}\n\n// Function definition\nint sum_to_n(int n) {\n    return n * (n + 1) / 2;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nbool correct_bracketing(const std::string& brackets) {\n    int level = 0;\n    for (char c : brackets) {\n        if (c == '(') {\n            level++;\n        } else if (c == ')') {\n            level--;\n        }\n        if (level < 0) {\n            return false;\n        }\n    }\n    return level == 0;\n}\n\nint main() {\n    // Test cases\n    if (!correct_bracketing("()")) {\n        std::cerr << "Assertion failed: ()" << std::endl;\n        std::exit(1);\n    }\n\n    if (!correct_bracketing("(()())")) {\n        std::cerr << "Assertion failed: (()())" << std::endl;\n        std::exit(1);\n    }\n\n    if (!correct_bracketing("()()(()())()")) {\n        std::cerr << "Assertion failed: ()()(()())()" << std::endl;\n        std::exit(1);\n    }\n\n    if (!correct_bracketing("()()((()()())())(()()(()))")) {\n        std::cerr << "Assertion failed: ()()((()()())())(()()(()))" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing("((()())))")) {\n        std::cerr << "Assertion failed: ((()())))" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing(")(()")) {\n        std::cerr << "Assertion failed: )(()" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing("(")) {\n        std::cerr << "Assertion failed: (" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing("((((")) {\n        std::cerr << "Assertion failed: ((((" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing(")")) {\n        std::cerr << "Assertion failed: )" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing("(()")) {\n        std::cerr << "Assertion failed: (()" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing("()()(()())())(()")) {\n        std::cerr << "Assertion failed: ()()(()())())(()" << std::endl;\n        std::exit(1);\n    }\n\n    if (correct_bracketing("()()(()())()))()")) {\n        std::cerr << "Assertion failed: ()()(()())()))()" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function to compute the nth Fibonacci number using the Fibonacci-Fibonacci sequence\nint fibfib(int n) {\n    // Create a vector to store the Fibonacci-Fibonacci sequence\n    std::vector<int> ff(n + 1);\n    \n    // Initial values\n    ff[0] = 0;\n    ff[1] = 0;\n    ff[2] = 1;\n    \n    // Compute the sequence\n    for (int i = 3; i <= n; ++i) {\n        ff[i] = ff[i - 1] + ff[i - 2] + ff[i - 3];\n    }\n    \n    return ff[n];\n}\n\n// Main function to test the fibfib function\nint main() {\n    // Assertions\n    if (fibfib(2) != 1) {\n        std::cerr << "fibfib(2) == 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fibfib(1) != 0) {\n        std::cerr << "fibfib(1) == 0: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fibfib(5) != 4) {\n        std::cerr << "fibfib(5) == 4: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fibfib(8) != 24) {\n        std::cerr << "fibfib(8) == 24: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fibfib(10) != 81) {\n        std::cerr << "fibfib(10) == 81: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fibfib(12) != 274) {\n        std::cerr << "fibfib(12) == 274: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (fibfib(14) != 927) {\n        std::cerr << "fibfib(14) == 927: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nint vowels_count(const std::string& s) {\n    std::string vowels = "aeiouAEIOU";\n    int count = 0;\n\n    for (char c : s) {\n        if (vowels.find(c) != std::string::npos) {\n            count++;\n        }\n    }\n\n    if (s.back() == 'y' || s.back() == 'Y') {\n        count++;\n    }\n\n    return count;\n}\n\nint main() {\n    // Test cases\n    std::string s = "abcde";\n    if (vowels_count(s) != 2) {\n        std::cerr << "Assertion failed for 'abcde'" << std::endl;\n        std::exit(1);\n    }\n\n    s = "Alone";\n    if (vowels_count(s) != 3) {\n        std::cerr << "Assertion failed for 'Alone'" << std::endl;\n        std::exit(1);\n    }\n\n    s = "key";\n    if (vowels_count(s) != 2) {\n        std::cerr << "Assertion failed for 'key'" << std::endl;\n        std::exit(1);\n    }\n\n    s = "bye";\n    if (vowels_count(s) != 1) {\n        std::cerr << "Assertion failed for 'bye'" << std::endl;\n        std::exit(1);\n    }\n\n    s = "keY";\n    if (vowels_count(s) != 2) {\n        std::cerr << "Assertion failed for 'keY'" << std::endl;\n        std::exit(1);\n    }\n\n    s = "bYe";\n    if (vowels_count(s) != 1) {\n        std::cerr << "Assertion failed for 'bYe'" << std::endl;\n        std::exit(1);\n    }\n\n    s = "ACEDY";\n    if (vowels_count(s) != 3) {\n        std::cerr << "Assertion failed for 'ACEDY'" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nstd::string circular_shift(int x, int shift) {\n    std::string xs = std::to_string(x);\n    int len_xs = xs.length();\n    int actual_shift = shift % len_xs;\n\n    if (len_xs < shift) {\n        std::reverse(xs.begin(), xs.end());\n    } else {\n        std::rotate(xs.begin(), xs.begin() + len_xs - actual_shift, xs.end());\n    }\n\n    return xs;\n}\n\nint main() {\n    if (circular_shift(100, 2) != "001") {\n        std::cerr << "Assertion failed: circular_shift(100, 2) == '001'" << std::endl;\n        std::exit(1);\n    }\n\n    if (circular_shift(12, 2) != "12") {\n        std::cerr << "Assertion failed: circular_shift(12, 2) == '12'" << std::endl;\n        std::exit(1);\n    }\n\n    if (circular_shift(97, 8) != "79") {\n        std::cerr << "Assertion failed: circular_shift(97, 8) == '79'" << std::endl;\n        std::exit(1);\n    }\n\n    if (circular_shift(12, 1) != "21") {\n        std::cerr << "Assertion failed: circular_shift(12, 1) == '21'" << std::endl;\n        std::exit(1);\n    }\n\n    if (circular_shift(11, 101) != "11") {\n        std::cerr << "Assertion failed: circular_shift(11, 101) == '11'" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\n// Function to calculate the sum of uppercase letters in a string\nint digitSum(const std::string& s) {\n    int sum = 0;\n    for (char c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\nint main() {\n    // Assertions\n    if (digitSum("") != 0) {\n        std::cerr << "Assertion failed: digitSum(\"\") == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (digitSum("abAB") != 131) {\n        std::cerr << "Assertion failed: digitSum(\"abAB\") == 131" << std::endl;\n        std::exit(1);\n    }\n\n    if (digitSum("abcCd") != 67) {\n        std::cerr << "Assertion failed: digitSum(\"abcCd\") == 67" << std::endl;\n        std::exit(1);\n    }\n\n    if (digitSum("helloE") != 69) {\n        std::cerr << "Assertion failed: digitSum(\"helloE\") == 69" << std::endl;\n        std::exit(1);\n    }\n\n    if (digitSum("woArBld") != 131) {\n        std::cerr << "Assertion failed: digitSum(\"woArBld\") == 131" << std::endl;\n        std::exit(1);\n    }\n\n    if (digitSum("aAaaaXa") != 153) {\n        std::cerr << "Assertion failed: digitSum(\"aAaaaXa\") == 153" << std::endl;\n        std::exit(1);\n    }\n\n    if (digitSum(" How are yOu?") != 151) {\n        std::cerr << "Assertion failed: digitSum(\" How are yOu?\") == 151" << std::endl;\n        std::exit(1);\n    }\n\n    if (digitSum("You arE Very Smart") != 327) {\n        std::cerr << "Assertion failed: digitSum(\"You arE Very Smart\") == 327" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\n// Function declaration\nint fruit_distribution(const std::string& s, int n);\n\nint main() {\n    // Test cases\n    std::string s;\n    int n;\n\n    s = "5 apples and 6 oranges";\n    n = 19;\n    if (fruit_distribution(s, n) != 8) {\n        std::cout << "Test case 1 failed" << std::endl;\n        std::exit(1);\n    }\n\n    s = "5 apples and 6 oranges";\n    n = 21;\n    if (fruit_distribution(s, n) != 10) {\n        std::cout << "Test case 2 failed" << std::endl;\n        std::exit(1);\n    }\n\n    s = "0 apples and 1 oranges";\n    n = 3;\n    if (fruit_distribution(s, n) != 2) {\n        std::cout << "Test case 3 failed" << std::endl;\n        std::exit(1);\n    }\n\n    s = "1 apples and 0 oranges";\n    n = 3;\n    if (fruit_distribution(s, n) != 2) {\n        std::cout << "Test case 4 failed" << std::endl;\n        std::exit(1);\n    }\n\n    s = "2 apples and 3 oranges";\n    n = 100;\n    if (fruit_distribution(s, n) != 95) {\n        std::cout << "Test case 5 failed" << std::endl;\n        std::exit(1);\n    }\n\n    s = "2 apples and 3 oranges";\n    n = 5;\n    if (fruit_distribution(s, n) != 0) {\n        std::cout << "Test case 6 failed" << std::endl;\n        std::exit(1);\n    }\n\n    s = "1 apples and 100 oranges";\n    n = 120;\n    if (fruit_distribution(s, n) != 19) {\n        std::cout << "Test case 7 failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n\n    return 0;\n}\n\nint fruit_distribution(const std::string& s, int n) {\n    std::string num1, num2;\n    int is12 = 0;\n\n    for (char c : s) {\n        if (c >= '0' && c <= '9') {\n            if (is12 == 0) {\n                num1 += c;\n            } else if (is12 == 1) {\n                num2 += c;\n            }\n        } else if (is12 == 0 && !num1.empty()) {\n            is12 = 1;\n        }\n    }\n\n    int num1_val = std::stoi(num1);\n    int num2_val = std::stoi(num2);\n\n    return n - num1_val - num2_val;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function prototypes\nvoid pluck(const std::vector<int>& arr, std::vector<int>& out);\nbool issame(const std::vector<int>& a, const std::vector<int>& b);\nvoid assert_condition(bool condition);\n\nint main() {\n    std::vector<int> arr, result, empty;\n\n    // Test cases\n    arr = {4, 2, 3};\n    pluck(arr, result);\n    assert_condition(issame(result, {2, 1}));\n\n    arr = {1, 2, 3};\n    pluck(arr, result);\n    assert_condition(issame(result, {2, 1}));\n\n    arr = {};\n    pluck(arr, result);\n    assert_condition(issame(result, empty));\n\n    arr = {5, 0, 3, 0, 4, 2};\n    pluck(arr, result);\n    assert_condition(issame(result, {0, 1}));\n\n    arr = {1, 2, 3, 0, 5, 3};\n    pluck(arr, result);\n    assert_condition(issame(result, {0, 3}));\n\n    arr = {5, 4, 8, 4, 8};\n    pluck(arr, result);\n    assert_condition(issame(result, {4, 1}));\n\n    arr = {7, 6, 7, 1};\n    pluck(arr, result);\n    assert_condition(issame(result, {6, 1}));\n\n    arr = {7, 9, 7, 1};\n    pluck(arr, result);\n    assert_condition(issame(result, empty));\n\n    return 0;\n}\n\nvoid pluck(const std::vector<int>& arr, std::vector<int>& out) {\n    out.clear();\n\n    for (size_t i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0 && (out.empty() || arr[i] < out[0])) {\n            out = {static_cast<int>(i), arr[i]};\n        }\n    }\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n\n// Function to extend the array\nvoid extend_array(std::vector<std::vector<int>>& array, int new_size) {\n    int old_size = array[0].size();\n    for (auto& row : array) {\n        row.resize(new_size, 0);\n    }\n}\n\n// Function to search for the maximum frequency element\nint search(const std::vector<int>& lst) {\n    std::vector<std::vector<int>> freq(2, std::vector<int>(0));\n    int max = -1;\n\n    for (int i = 0; i < lst.size(); ++i) {\n        bool has = false;\n        for (int j = 0; j < freq[0].size(); ++j) {\n            if (lst[i] == freq[0][j]) {\n                freq[1][j]++;\n                has = true;\n                if (freq[1][j] >= freq[0][j] && freq[0][j] > max) {\n                    max = freq[0][j];\n                }\n            }\n        }\n        if (!has) {\n            freq[0].push_back(lst[i]);\n            freq[1].push_back(1);\n            if (max == -1 && lst[i] == 1) {\n                max = 1;\n            }\n        }\n    }\n\n    return max;\n}\n\nint main() {\n    // Test cases\n    if (search({5, 5, 5, 5, 1}) != 1) {\n        std::cerr << "Assertion failed: search({5, 5, 5, 5, 1}) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    if (search({4, 1, 4, 1, 4, 4}) != 4) {\n        std::cerr << "Assertion failed: search({4, 1, 4, 1, 4, 4}) == 4" << std::endl;\n        std::exit(1);\n    }\n\n    if (search({3, 3}) != -1) {\n        std::cerr << "Assertion failed: search({3, 3}) == -1" << std::endl;\n        std::exit(1);\n    }\n\n    if (search({8, 8, 8, 8, 8, 8, 8, 8}) != 8) {\n        std::cerr << "Assertion failed: search({8, 8, 8, 8, 8, 8, 8, 8}) == 8" << std::endl;\n        std::exit(1);\n    }\n\n    if (search({2, 3, 3, 2, 2}) != 2) {\n        std::cerr << "Assertion failed: search({2, 3, 3, 2, 2}) == 2" << std::endl;\n        std::exit(1);\n    }\n\n    // Add more test cases as needed...\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nvoid strange_sort_list(const std::vector<int>& lst, std::vector<int>& out) {\n    int n = lst.size();\n    if (n == 0) {\n        out.clear();\n        return;\n    }\n\n    std::vector<int> sorted_lst = lst;\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n\n    out.resize(n);\n    int l = 0, r = n - 1;\n    for (int i = 0; i < n; ++i) {\n        if (i % 2 == 0) {\n            out[i] = sorted_lst[l];\n            ++l;\n        } else {\n            out[i] = sorted_lst[r];\n            --r;\n        }\n    }\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nvoid test_assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    std::vector<int> out;\n\n    // Test cases\n    strange_sort_list({1, 2, 3, 4}, out);\n    test_assert(issame(out, {1, 4, 2, 3}));\n\n    strange_sort_list({5, 6, 7, 8, 9}, out);\n    test_assert(issame(out, {5, 9, 6, 8, 7}));\n\n    strange_sort_list({1, 2, 3, 4, 5}, out);\n    test_assert(issame(out, {1, 5, 2, 4, 3}));\n\n    strange_sort_list({5, 6, 7, 8, 9, 1}, out);\n    test_assert(issame(out, {1, 9, 5, 8, 6, 7}));\n\n    strange_sort_list({5, 5, 5, 5}, out);\n    test_assert(issame(out, {5, 5, 5, 5}));\n\n    // Handle empty array case separately\n    out.clear();\n    strange_sort_list(out, out);\n    test_assert(issame(out, out));\n\n    strange_sort_list({1, 2, 3, 4, 5, 6, 7, 8}, out);\n    test_assert(issame(out, {1, 8, 2, 7, 3, 6, 4, 5}));\n\n    strange_sort_list({0, 2, 2, 2, 5, 5, -5, -5}, out);\n    test_assert(issame(out, {-5, 5, -5, 5, 0, 2, 2, 2}));\n\n    strange_sort_list({111111}, out);\n    test_assert(issame(out, {111111}));\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib> // For exit()\n\n// Function prototype\ndouble triangle_area(double a, double b, double c);\n\n// Main function\nint main() {\n    // Assertions\n    if (std::abs(triangle_area(3.0, 4.0, 5.0) - 6.0) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(3, 4, 5)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(1.0, 2.0, 10.0) + 1.0) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(1, 2, 10)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(4.0, 8.0, 5.0) - 8.18) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(4, 8, 5)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(2.0, 2.0, 2.0) - 1.73) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(2, 2, 2)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(1.0, 2.0, 3.0) + 1.0) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(1, 2, 3)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(10.0, 5.0, 7.0) - 16.25) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(10, 5, 7)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(2.0, 6.0, 3.0) + 1.0) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(2, 6, 3)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(1.0, 1.0, 1.0) - 0.43) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(1, 1, 1)" << std::endl;\n        std::exit(1);\n    }\n    if (std::abs(triangle_area(2.0, 2.0, 10.0) + 1.0) >= 0.01) {\n        std::cerr << "Assertion failed: triangle_area(2, 2, 10)" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}\n\n// Function to calculate the area of a triangle\ndouble triangle_area(double a, double b, double c) {\n    double h = (a + b + c) / 2.0;\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1.0;\n    } else {\n        return std::sqrt(h * (h - a) * (h - b) * (h - c));\n    }\n}
#include <iostream>\n#include <vector>\n#include <numeric> // For std::accumulate\n\nclass FlightModule {\npublic:\n    static bool will_it_fly(const std::vector<int>& q, int w) {\n        int sum = 0;\n        int n = q.size();\n\n        for (int i = 0; i < n; ++i) {\n            if (q[i] != q[n - 1 - i]) {\n                return false;\n            }\n            sum += q[i];\n        }\n\n        return sum <= w;\n    }\n};\n\nint main() {\n    // Test cases\n    std::vector<int> q;\n    int w;\n\n    // Test case 1\n    q = {3, 2, 3};\n    w = 9;\n    if (!FlightModule::will_it_fly(q, w)) {\n        std::cerr << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2\n    q = {1, 2};\n    w = 5;\n    if (FlightModule::will_it_fly(q, w)) {\n        std::cerr << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 3\n    q = {3};\n    w = 5;\n    if (!FlightModule::will_it_fly(q, w)) {\n        std::cerr << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 4\n    q = {3, 2, 3};\n    w = 1;\n    if (FlightModule::will_it_fly(q, w)) {\n        std::cerr << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 5\n    q = {1, 2, 3};\n    w = 6;\n    if (FlightModule::will_it_fly(q, w)) {\n        std::cerr << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 6\n    q = {5};\n    w = 5;\n    if (!FlightModule::will_it_fly(q, w)) {\n        std::cerr << "Test case 6 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}\n```\n\n### Explanation:\n1. **Class `FlightModule`**: This class contains the static method `will_it_fly` which performs the same logic as the Fortran function.\n2. **Static Method `will_it_fly`**: Takes a `std::vector<int>` for the array `q` and an integer `w`. Calculates the sum of the array elements and checks if the array is symmetric and the sum does not exceed `w`.\n3. **Main Function**: Contains test cases similar to the Fortran program. Each test case initializes the array `q` and the integer `w`, then calls the `will_it_fly` method and checks the result. If any test case fails, it prints an error message and returns `1`.
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\nint smallest_change(const std::vector<int>& arr) {\n    int n = arr.size();\n    int out = 0;\n    for (int i = 0; i < n / 2; ++i) {\n        if (arr[i] != arr[n - 1 - i]) {\n            out++;\n        }\n    }\n    return out;\n}\n\nint main() {\n    if (smallest_change({1, 2, 3, 5, 4, 7, 9, 6}) != 4) {\n        std::cerr << "Assertion failed: smallest_change({1, 2, 3, 5, 4, 7, 9, 6}) == 4" << std::endl;\n        std::exit(1);\n    }\n\n    if (smallest_change({1, 2, 3, 4, 3, 2, 2}) != 1) {\n        std::cerr << "Assertion failed: smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    if (smallest_change({1, 4, 2}) != 1) {\n        std::cerr << "Assertion failed: smallest_change({1, 4, 2}) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    if (smallest_change({1, 4, 4, 2}) != 1) {\n        std::cerr << "Assertion failed: smallest_change({1, 4, 4, 2}) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    if (smallest_change({1, 2, 3, 2, 1}) != 0) {\n        std::cerr << "Assertion failed: smallest_change({1, 2, 3, 2, 1}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (smallest_change({3, 1, 1, 3}) != 0) {\n        std::cerr << "Assertion failed: smallest_change({3, 1, 1, 3}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (smallest_change({1}) != 0) {\n        std::cerr << "Assertion failed: smallest_change({1}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (smallest_change({0, 1}) != 1) {\n        std::cerr << "Assertion failed: smallest_change({0, 1}) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cstdlib> // For std::exit\n\n// Function prototypes\nstd::vector<std::string> total_match(const std::vector<std::string>& lst1, const std::vector<std::string>& lst2);\nbool issame(const std::vector<std::string>& a, const std::vector<std::string>& b);\nvoid assert_condition(bool condition);\nstd::string pad(const std::string& str, size_t len);\n\nint main() {\n    // Test cases\n    assert_condition(issame(total_match({pad("hi", 100), pad("admin", 100)},\n                                         {pad("hi", 100), pad("hi", 100)}),\n                                         {pad("hi", 100), pad("hi", 100)}));\n    assert_condition(issame(total_match({pad("hi", 100), pad("admin", 100)},\n                                         {pad("hi", 100), pad("hi", 100),\n                                          pad("admin", 100), pad("project", 100)}),\n                                         {pad("hi", 100), pad("admin", 100)}));\n    assert_condition(issame(total_match({pad("4", 100)},\n                                         {pad("1", 100), pad("2", 100),\n                                          pad("3", 100), pad("4", 100), pad("5", 100)}),\n                                         {pad("4", 100)}));\n    assert_condition(issame(total_match({pad("hi", 100), pad("admin", 100)},\n                                         {pad("hI", 100), pad("Hi", 100)}),\n                                         {pad("hI", 100), pad("Hi", 100)}));\n    assert_condition(issame(total_match({pad("hi", 100), pad("admin", 100)},\n                                         {pad("hI", 100), pad("hi", 100), pad("hi", 100)}),\n                                         {pad("hI", 100), pad("hi", 100), pad("hi", 100)}));\n    assert_condition(issame(total_match({pad("hi", 100), pad("admin", 100)},\n                                         {pad("hI", 100), pad("hi", 100), pad("hii", 100)}),\n                                         {pad("hi", 100), pad("admin", 100)}));\n    assert_condition(issame(total_match({}, {pad("this", 100)}), {}));\n    assert_condition(issame(total_match({pad("this", 100)}, {}), {}));\n\n    return 0;\n}\n\nstd::vector<std::string> total_match(const std::vector<std::string>& lst1, const std::vector<std::string>& lst2) {\n    size_t num1 = 0, num2 = 0;\n    for (const auto& str : lst1) {\n        num1 += str.size();\n    }\n    for (const auto& str : lst2) {\n        num2 += str.size();\n    }\n\n    if (num1 > num2) {\n        return lst2;\n    } else {\n        return lst1;\n    }\n}\n\nbool issame(const std::vector<std::string>& a, const std::vector<std::string>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        std::cerr << "condition: assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nstd::string pad(const std::string& str, size_t len) {\n    if (str.size() >= len) {\n        return str;\n    }\n    return str + std::string(len - str.size(), ' ');\n}
#include <iostream>\n#include <cmath>\n\nbool is_simple_power(int x, int n) {\n    int p = 1;\n    int count = 0;\n    while (p <= x && count < 100) {\n        if (p == x) {\n            return true;\n        }\n        p *= n;\n        count++;\n    }\n    return false;\n}\n\nint main() {\n    // Test cases\n    if (!is_simple_power(1, 4)) {\n        std::cerr << "Assertion failed: is_simple_power(1, 4) == true" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(2, 2)) {\n        std::cerr << "Assertion failed: is_simple_power(2, 2) == true" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(8, 2)) {\n        std::cerr << "Assertion failed: is_simple_power(8, 2) == true" << std::endl;\n        return 1;\n    }\n    if (is_simple_power(3, 2)) {\n        std::cerr << "Assertion failed: is_simple_power(3, 2) == false" << std::endl;\n        return 1;\n    }\n    if (is_simple_power(3, 1)) {\n        std::cerr << "Assertion failed: is_simple_power(3, 1) == false" << std::endl;\n        return 1;\n    }\n    if (is_simple_power(5, 3)) {\n        std::cerr << "Assertion failed: is_simple_power(5, 3) == false" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(16, 2)) {\n        std::cerr << "Assertion failed: is_simple_power(16, 2) == true" << std::endl;\n        return 1;\n    }\n    if (is_simple_power(143214, 16)) {\n        std::cerr << "Assertion failed: is_simple_power(143214, 16) == false" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(4, 2)) {\n        std::cerr << "Assertion failed: is_simple_power(4, 2) == true" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(9, 3)) {\n        std::cerr << "Assertion failed: is_simple_power(9, 3) == true" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(16, 4)) {\n        std::cerr << "Assertion failed: is_simple_power(16, 4) == true" << std::endl;\n        return 1;\n    }\n    if (is_simple_power(24, 2)) {\n        std::cerr << "Assertion failed: is_simple_power(24, 2) == false" << std::endl;\n        return 1;\n    }\n    if (is_simple_power(128, 4)) {\n        std::cerr << "Assertion failed: is_simple_power(128, 4) == false" << std::endl;\n        return 1;\n    }\n    if (is_simple_power(12, 6)) {\n        std::cerr << "Assertion failed: is_simple_power(12, 6) == false" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(1, 1)) {\n        std::cerr << "Assertion failed: is_simple_power(1, 1) == true" << std::endl;\n        return 1;\n    }\n    if (!is_simple_power(1, 12)) {\n        std::cerr << "Assertion failed: is_simple_power(1, 12) == true" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed successfully!" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\nclass CubeModule {\npublic:\n    static bool iscuber(int a) {\n        int i;\n        for (i = 0; i <= static_cast<int>(std::pow(std::abs(a), 1.0 / 3.0)); ++i) {\n            if (i * i * i == std::abs(a)) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n\nint main() {\n    // Assertions\n    if (!CubeModule::iscuber(1)) {\n        std::cerr << "iscuber(1): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (CubeModule::iscuber(2)) {\n        std::cerr << "iscuber(2): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!CubeModule::iscuber(-1)) {\n        std::cerr << "iscuber(-1): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!CubeModule::iscuber(64)) {\n        std::cerr << "iscuber(64): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (CubeModule::iscuber(180)) {\n        std::cerr << "iscuber(180): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!CubeModule::iscuber(1000)) {\n        std::cerr << "iscuber(1000): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!CubeModule::iscuber(0)) {\n        std::cerr << "iscuber(0): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (CubeModule::iscuber(1729)) {\n        std::cerr << "iscuber(1729): assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib> // For exit()\n\nconst std::string key = "2357BD";\n\nint hex_key(const std::string& num) {\n    int out = 0;\n    for (char c : num) {\n        if (key.find(c) != std::string::npos) {\n            out++;\n        }\n    }\n    return out;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    assert(hex_key("AB") == 1);\n    assert(hex_key("1077E") == 2);\n    assert(hex_key("ABED1A33") == 4);\n    assert(hex_key("2020") == 2);\n    assert(hex_key("123456789ABCDEF0") == 6);\n    assert(hex_key("112233445566778899AABBCCDDEEFF00") == 12);\n    assert(hex_key("") == 0);\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}\n\nKey Points in the Translation:\n\n1. **String Handling**: Fortran's `character(len=*)` is replaced with `std::string` in C++. This allows for dynamic string handling, unlike the fixed-length character arrays in Fortran.\n\n2. **Implicit None**: In Fortran, `implicit none` is used to avoid implicit typing based on variable names. In C++, there's no direct equivalent, but type declaration is mandatory, which helps in avoiding implicit typing.\n\n3. **Function and Subroutine Definitions**: The `function` and `subroutine` definitions in Fortran are translated to regular functions and void functions in C++. The `intent(in)` attribute in Fortran is similar to passing arguments by `const` reference in C++.\n\n4. **Assertion**: The `assert` subroutine in Fortran is translated to a `void assert(bool condition)` function in C++. If the condition is false, it prints an error message and exits the program.\n\n5. **Looping Through Characters**: The Fortran code uses a loop to iterate through each character of the input string. In C++, this is achieved using a range-based `for` loop.\n\n6. **String Search**: The `index` function in Fortran is replaced with `std::string::find` in C++. This function returns `std::string::npos` if the character is not found, which is used to check if the character is in the key.\n\n7. **Program Exit**: The `call exit(1)` statement in Fortran is replaced with `std::exit(1)` in C++.\n\n8. **Output**: The `write(*,*)` statement in Fortran is replaced with `std::cerr` for error output in C++. The success message is printed using `std::cout`.
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nstd::string decimal_to_binary(int decimal) {\n    if (decimal == 0) {\n        return "db0db";\n    }\n\n    std::string out = "";\n    int temp = decimal;\n\n    while (temp > 0) {\n        out = std::to_string(temp % 2) + out;\n        temp = temp / 2;\n    }\n\n    return "db" + out + "db";\n}\n\nvoid test_decimal_to_binary() {\n    std::string result;\n\n    result = decimal_to_binary(0);\n    if (result != "db0db") {\n        std::cerr << "Assertion failed: decimal_to_binary(0) == 'db0db'" << std::endl;\n        std::exit(1);\n    }\n\n    result = decimal_to_binary(32);\n    if (result != "db100000db") {\n        std::cerr << "Assertion failed: decimal_to_binary(32) == 'db100000db'" << std::endl;\n        std::exit(1);\n    }\n\n    result = decimal_to_binary(103);\n    if (result != "db1100111db") {\n        std::cerr << "Assertion failed: decimal_to_binary(103) == 'db1100111db'" << std::endl;\n        std::exit(1);\n    }\n\n    result = decimal_to_binary(15);\n    if (result != "db1111db") {\n        std::cerr << "Assertion failed: decimal_to_binary(15) == 'db1111db'" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n}\n\nint main() {\n    test_decimal_to_binary();\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nbool is_happy(const std::string& s) {\n    if (s.length() < 3) {\n        return false;\n    }\n\n    for (size_t i = 2; i < s.length(); ++i) {\n        if (s[i] == s[i - 1] || s[i] == s[i - 2]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    // Test cases\n    if (!is_happy("a")) {\n        std::cout << "Test 1 passed" << std::endl;\n    } else {\n        std::cout << "Test 1 failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!is_happy("aa")) {\n        std::cout << "Test 2 passed" << std::endl;\n    } else {\n        std::cout << "Test 2 failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_happy("abcd")) {\n        std::cout << "Test 3 passed" << std::endl;\n    } else {\n        std::cout << "Test 3 failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!is_happy("aabb")) {\n        std::cout << "Test 4 passed" << std::endl;\n    } else {\n        std::cout << "Test 4 failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_happy("adb")) {\n        std::cout << "Test 5 passed" << std::endl;\n    } else {\n        std::cout << "Test 5 failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!is_happy("xyy")) {\n        std::cout << "Test 6 passed" << std::endl;\n    } else {\n        std::cout << "Test 6 failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (is_happy("iopaxpoi")) {\n        std::cout << "Test 7 passed" << std::endl;\n    } else {\n        std::cout << "Test 7 failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (!is_happy("iopaxioi")) {\n        std::cout << "Test 8 passed" << std::endl;\n    } else {\n        std::cout << "Test 8 failed" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cstdlib>\n\n// Function to convert numerical grade to letter grade\nstd::string numerical_letter_grade(double grade) {\n    if (grade >= 3.9999) return "A+";\n    else if (grade > 3.7001 && grade <= 3.9999) return "A ";\n    else if (grade > 3.3001 && grade <= 3.7001) return "A-";\n    else if (grade > 3.0001 && grade <= 3.3001) return "B+";\n    else if (grade > 2.7001 && grade <= 3.0001) return "B ";\n    else if (grade > 2.3001 && grade <= 2.7001) return "B-";\n    else if (grade > 2.0001 && grade <= 2.3001) return "C+";\n    else if (grade > 1.7001 && grade <= 2.0001) return "C ";\n    else if (grade > 1.3001 && grade <= 1.7001) return "C-";\n    else if (grade > 1.0001 && grade <= 1.3001) return "D+";\n    else if (grade > 0.7001 && grade <= 1.0001) return "D ";\n    else if (grade > 0.0001 && grade <= 0.7001) return "D-";\n    else return "E ";\n}\n\n// Function to check if two vectors of strings are equal\nbool issame(const std::vector<std::string>& a, const std::vector<std::string>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nint main() {\n    std::vector<std::string> result;\n    std::vector<std::string> expected1 = {"A+", "B ", "C-", "C ", "A-"};\n    std::vector<std::string> expected2 = {"D+"};\n    std::vector<std::string> expected3 = {"D-"};\n    std::vector<std::string> expected4 = {"E "};\n    std::vector<std::string> expected5 = {"D ", "D-", "C-", "B ", "B+"};\n    std::vector<std::string> expected6 = {"E ", "D-"};\n\n    // Test case 1\n    for (double grade : {4.0, 3.0, 1.7, 2.0, 3.5}) {\n        result.push_back(numerical_letter_grade(grade));\n    }\n    if (!issame(result, expected1)) {\n        std::cerr << "Assertion failed for test case 1" << std::endl;\n        std::exit(1);\n    }\n    result.clear();\n\n    // Test case 2\n    for (double grade : {1.2}) {\n        result.push_back(numerical_letter_grade(grade));\n    }\n    if (!issame(result, expected2)) {\n        std::cerr << "Assertion failed for test case 2" << std::endl;\n        std::exit(1);\n    }\n    result.clear();\n\n    // Test case 3\n    for (double grade : {0.5}) {\n        result.push_back(numerical_letter_grade(grade));\n    }\n    if (!issame(result, expected3)) {\n        std::cerr << "Assertion failed for test case 3" << std::endl;\n        std::exit(1);\n    }\n    result.clear();\n\n    // Test case 4\n    for (double grade : {0.0}) {\n        result.push_back(numerical_letter_grade(grade));\n    }\n    if (!issame(result, expected4)) {\n        std::cerr << "Assertion failed for test case 4" << std::endl;\n        std::exit(1);\n    }\n    result.clear();\n\n    // Test case 5\n    for (double grade : {1.0, 0.3, 1.5, 2.8, 3.3}) {\n        result.push_back(numerical_letter_grade(grade));\n    }\n    if (!issame(result, expected5)) {\n        std::cerr << "Assertion failed for test case 5" << std::endl;\n        std::exit(1);\n    }\n    result.clear();\n\n    // Test case 6\n    for (double grade : {0.0, 0.7}) {\n        result.push_back(numerical_letter_grade(grade));\n    }\n    if (!issame(result, expected6)) {\n        std::cerr << "Assertion failed for test case 6" << std::endl;\n        std::exit(1);\n    }\n    result.clear();\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n#include <string>\n\n// Function declaration\nbool is_prime_length(const std::string& s) {\n    int l = s.length();\n    if (l < 2) {\n        return false;\n    }\n\n    for (int i = 2; i <= static_cast<int>(std::sqrt(l)); ++i) {\n        if (l % i == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Subroutine to run tests\nvoid run_tests() {\n    std::string str;\n    bool result;\n\n    str = "Hello";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('Hello') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "abcdcba";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('abcdcba') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "kittens";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('kittens') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "orange";\n    result = is_prime_length(str);\n    if (result) {\n        std::cerr << "is_prime_length('orange') == false: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "wow";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('wow') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "world";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('world') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "MadaM";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('MadaM') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "Wow";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('Wow') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "";\n    result = is_prime_length(str);\n    if (result) {\n        std::cerr << "is_prime_length('') == false: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "HI";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('HI') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "go";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('go') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "gogo";\n    result = is_prime_length(str);\n    if (result) {\n        std::cerr << "is_prime_length('gogo') == false: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "aaaaaaaaaaaaaaa";\n    result = is_prime_length(str);\n    if (result) {\n        std::cerr << "is_prime_length('aaaaaaaaaaaaaaa') == false: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "Madam";\n    result = is_prime_length(str);\n    if (!result) {\n        std::cerr << "is_prime_length('Madam') == true: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "M";\n    result = is_prime_length(str);\n    if (result) {\n        std::cerr << "is_prime_length('M') == false: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    str = "0";\n    result = is_prime_length(str);\n    if (result) {\n        std::cerr << "is_prime_length('0') == false: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n}\n\n// Main function\nint main() {\n    run_tests();\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For exit()\n\n// Function prototype\nint starts_one_ends(int n);\n\nint main() {\n    // Assertions\n    if (starts_one_ends(1) != 1) {\n        std::cout << "Assertion failed: starts_one_ends(1) == 1" << std::endl;\n        exit(1);\n    }\n\n    if (starts_one_ends(2) != 18) {\n        std::cout << "Assertion failed: starts_one_ends(2) == 18" << std::endl;\n        exit(1);\n    }\n\n    if (starts_one_ends(3) != 180) {\n        std::cout << "Assertion failed: starts_one_ends(3) == 180" << std::endl;\n        exit(1);\n    }\n\n    if (starts_one_ends(4) != 1800) {\n        std::cout << "Assertion failed: starts_one_ends(4) == 1800" << std::endl;\n        exit(1);\n    }\n\n    if (starts_one_ends(5) != 18000) {\n        std::cout << "Assertion failed: starts_one_ends(5) == 18000" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}\n\n// Function definition\nint starts_one_ends(int n) {\n    if (n < 1) {\n        return 0;\n    }\n\n    if (n == 1) {\n        return 1;\n    }\n\n    int out = 18;\n    for (int i = 2; i <= n - 1; ++i) {\n        out *= 10;\n    }\n\n    return out;\n}
#include <iostream>\n#include <string>\n#include <cstdlib> // For exit()\n\n// Function prototype\nstd::string solve(int N);\n\nint main() {\n    std::string result;\n\n    result = solve(1000);\n    if (result != "1") {\n        std::cerr << "Assertion failed for solve(1000)" << std::endl;\n        exit(1);\n    }\n\n    result = solve(150);\n    if (result != "110") {\n        std::cerr << "Assertion failed for solve(150)" << std::endl;\n        exit(1);\n    }\n\n    result = solve(147);\n    if (result != "1100") {\n        std::cerr << "Assertion failed for solve(147)" << std::endl;\n        exit(1);\n    }\n\n    result = solve(333);\n    if (result != "1001") {\n        std::cerr << "Assertion failed for solve(333)" << std::endl;\n        exit(1);\n    }\n\n    result = solve(963);\n    if (result != "10010") {\n        std::cerr << "Assertion failed for solve(963)" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n\nstd::string solve(int N) {\n    std::string str = std::to_string(N); // Convert integer N to string\n    int sum = 0;\n\n    // Calculate the sum of digits\n    for (char digit : str) {\n        sum += digit - '0'; // Convert char digit to int and add to sum\n    }\n\n    std::string bi;\n\n    // Convert sum to binary\n    while (sum > 0) {\n        bi = std::to_string(sum % 2) + bi; // Add least significant bit to binary string\n        sum /= 2; // Shift right for next bit\n    }\n\n    // Handle the case when sum is 0\n    if (bi.empty()) {\n        bi = "0";\n    }\n\n    return bi;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\nint add(const std::vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    // Test cases\n    if (add({4, 88}) != 88) {\n        std::cerr << "Assertion failed: add({4, 88}) == 88" << std::endl;\n        std::exit(1);\n    }\n\n    if (add({4, 5, 6, 7, 2, 122}) != 122) {\n        std::cerr << "Assertion failed: add({4, 5, 6, 7, 2, 122}) == 122" << std::endl;\n        std::exit(1);\n    }\n\n    if (add({4, 0, 6, 7}) != 0) {\n        std::cerr << "Assertion failed: add({4, 0, 6, 7}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (add({4, 4, 6, 8}) != 12) {\n        std::cerr << "Assertion failed: add({4, 4, 6, 8}) == 12" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\n// Function to sort the array using bubble sort\nstd::vector<int> sort_array(const std::vector<int>& array) {\n    std::vector<int> out = array;\n    int n = out.size();\n\n    // Bubble sort implementation\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            if (out[j] > out[j + 1]) {\n                std::swap(out[j], out[j + 1]);\n            }\n        }\n    }\n\n    // Check if the first and last elements are odd, and reverse if so\n    if ((out[0] + out[n - 1]) % 2 == 1) {\n        return out;\n    } else {\n        std::reverse(out.begin(), out.end());\n        return out;\n    }\n}\n\n// Function to check if two arrays are equal\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nvoid test_cases() {\n    assert(issame(sort_array({0}), {0}));\n    assert(issame(sort_array({5}), {5}));\n    assert(issame(sort_array({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5}));\n    assert(issame(sort_array({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0}));\n    assert(issame(sort_array({2, 1}), {1, 2}));\n    assert(issame(sort_array({15, 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87}));\n    assert(issame(sort_array({21, 14, 23, 11}), {23, 21, 14, 11}));\n}\n\nint main() {\n    test_cases();\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n\nclass Utilities {\npublic:\n    static int next_smallest(const std::vector<int>& lst) {\n        int n = lst.size();\n        if (n == 0) {\n            return -1;\n        }\n\n        std::vector<int> sorted_lst = lst;\n        std::sort(sorted_lst.begin(), sorted_lst.end());\n\n        int res = -1;\n        for (int i = 1; i < n; ++i) {\n            if (sorted_lst[i] != sorted_lst[i - 1]) {\n                res = sorted_lst[i];\n                break;\n            }\n        }\n\n        return res;\n    }\n};\n\nint main() {\n    // Test case 1\n    std::vector<int> lst = {1, 2, 3, 4, 5};\n    int result = Utilities::next_smallest(lst);\n    if (result != 2) {\n        std::cerr << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 2\n    lst = {5, 1, 4, 3, 2};\n    result = Utilities::next_smallest(lst);\n    if (result != 2) {\n        std::cerr << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 3\n    lst = {};\n    result = Utilities::next_smallest(lst);\n    if (result != -1) {\n        std::cerr << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 4\n    lst = {1, 1};\n    result = Utilities::next_smallest(lst);\n    if (result != -1) {\n        std::cerr << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 5\n    lst = {1, 1, 1, 1, 0};\n    result = Utilities::next_smallest(lst);\n    if (result != 1) {\n        std::cerr << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    // Test case 6\n    lst = {-35, 34, 12, -45};\n    result = Utilities::next_smallest(lst);\n    if (result != -35) {\n        std::cerr << "Test case 6 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <cstring>\n#include <cstdlib>\n\nint is_bored(const char* S) {\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    int lenS = std::strlen(S);\n\n    for (int i = 0; i < lenS; ++i) {\n        if (S[i] == ' ' && isi) {\n            isi = false;\n            sum += 1;\n        }\n        if (S[i] == 'I' && isstart) {\n            isi = true;\n        } else {\n            isi = false;\n        }\n        if (S[i] != ' ') {\n            isstart = false;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!' || S[i] == '\0') {\n            isstart = true;\n        }\n    }\n\n    return sum;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert(is_bored("Hello world") == 0);\n    assert(is_bored("Is the sky blue?") == 0);\n    assert(is_bored("I love It !") == 1);\n    assert(is_bored("bIt") == 0);\n    assert(is_bored("I feel good today. I will be productive. will kill It") == 2);\n    assert(is_bored("You and I are going for a walk") == 0);\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\nbool any_int(double a, double b, double c) {\n    if (std::round(a) != a || std::round(b) != b || std::round(c) != c) {\n        return false;\n    }\n    if (a + b == c || a + c == b || b + c == a) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    if (!any_int(2.0, 3.0, 1.0)) {\n        std::cerr << "Assertion failed: any_int(2, 3, 1) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (any_int(2.5, 2.0, 3.0)) {\n        std::cerr << "Assertion failed: any_int(2.5, 2, 3) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (any_int(1.5, 5.0, 3.5)) {\n        std::cerr << "Assertion failed: any_int(1.5, 5, 3.5) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (any_int(2.0, 6.0, 2.0)) {\n        std::cerr << "Assertion failed: any_int(2, 6, 2) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!any_int(4.0, 2.0, 2.0)) {\n        std::cerr << "Assertion failed: any_int(4, 2, 2) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (any_int(2.2, 2.2, 2.2)) {\n        std::cerr << "Assertion failed: any_int(2.2, 2.2, 2.2) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!any_int(-4.0, 6.0, 2.0)) {\n        std::cerr << "Assertion failed: any_int(-4, 6, 2) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (!any_int(2.0, 1.0, 1.0)) {\n        std::cerr << "Assertion failed: any_int(2, 1, 1) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (!any_int(3.0, 4.0, 7.0)) {\n        std::cerr << "Assertion failed: any_int(3, 4, 7) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (any_int(3.01, 4.0, 7.0)) {\n        std::cerr << "Assertion failed: any_int(3.01, 4, 7) == false" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n```
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <string>\n#include <sstream>\n\nclass skjkasdkd_module {\npublic:\n    static int skjkasdkd(const std::vector<int>& lst) {\n        int largest = 0;\n        for (int i = 0; i < lst.size(); ++i) {\n            if (lst[i] > largest) {\n                bool prime = true;\n                for (int j = 2; j <= static_cast<int>(std::sqrt(lst[i])); ++j) {\n                    if (lst[i] % j == 0) {\n                        prime = false;\n                        break;\n                    }\n                }\n                if (prime) {\n                    largest = lst[i];\n                }\n            }\n        }\n\n        std::stringstream ss;\n        ss << largest;\n        std::string s = ss.str();\n\n        int sum = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            sum += s[i] - '0';\n        }\n\n        return sum;\n    }\n};\n\nint main() {\n    std::vector<std::vector<int>> test_cases = {\n        {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3},\n        {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1},\n        {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3},\n        {0,724,32,71,99,32,6,0,5,91,83,0,5,6},\n        {0,81,12,3,1,21},\n        {0,8,1,2,1,7},\n        {8191},\n        {8191, 123456, 127, 7},\n        {127, 97, 8192},\n    };\n\n    std::vector<int> expected_results = {10, 25, 13, 11, 3, 7, 19, 19, 10};\n\n    bool all_tests_passed = true;\n    for (size_t i = 0; i < test_cases.size(); ++i) {\n        int result = skjkasdkd_module::skjkasdkd(test_cases[i]);\n        if (result != expected_results[i]) {\n            std::cerr << "Assertion failed: result != " << expected_results[i] << " for test case " << i << std::endl;\n            all_tests_passed = false;\n        }\n    }\n\n    if (all_tests_passed) {\n        std::cout << "All tests passed." << std::endl;\n    }\n\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For exit()\n\n// Function prototype\nint multiply(int a, int b);\n\nint main() {\n    int result;\n\n    // Assertions\n    result = multiply(148, 412);\n    if (result != 16) {\n        std::cout << "Assertion failed: multiply(148, 412) == 16" << std::endl;\n        exit(1);\n    }\n\n    result = multiply(19, 28);\n    if (result != 72) {\n        std::cout << "Assertion failed: multiply(19, 28) == 72" << std::endl;\n        exit(1);\n    }\n\n    result = multiply(2020, 1851);\n    if (result != 0) {\n        std::cout << "Assertion failed: multiply(2020, 1851) == 0" << std::endl;\n        exit(1);\n    }\n\n    result = multiply(14, -15);\n    if (result != 20) {\n        std::cout << "Assertion failed: multiply(14, -15) == 20" << std::endl;\n        exit(1);\n    }\n\n    result = multiply(76, 67);\n    if (result != 42) {\n        std::cout << "Assertion failed: multiply(76, 67) == 42" << std::endl;\n        exit(1);\n    }\n\n    result = multiply(17, 27);\n    if (result != 49) {\n        std::cout << "Assertion failed: multiply(17, 27) == 49" << std::endl;\n        exit(1);\n    }\n\n    result = multiply(0, 1);\n    if (result != 0) {\n        std::cout << "Assertion failed: multiply(0, 1) == 0" << std::endl;\n        exit(1);\n    }\n\n    result = multiply(0, 0);\n    if (result != 0) {\n        std::cout << "Assertion failed: multiply(0, 0) == 0" << std::endl;\n        exit(1);\n    }\n\n    return 0;\n}\n\n// Function definition\nint multiply(int a, int b) {\n    return abs(a) % 10 * abs(b) % 10;\n}
#include <iostream>\n#include <cstring>\n#include <cstdlib>\n\n// Function prototype\nint count_upper(const char* s);\n\nint main() {\n    int result;\n\n    // Test cases\n    result = count_upper("aBCdEf");\n    if (result != 1) {\n        std::cerr << "Assertion failed: count_upper('aBCdEf') == 1" << std::endl;\n        std::exit(1);\n    }\n\n    result = count_upper("abcdefg");\n    if (result != 0) {\n        std::cerr << "Assertion failed: count_upper('abcdefg') == 0" << std::endl;\n        std::exit(1);\n    }\n\n    result = count_upper("dBBE");\n    if (result != 0) {\n        std::cerr << "Assertion failed: count_upper('dBBE') == 0" << std::endl;\n        std::exit(1);\n    }\n\n    result = count_upper("B");\n    if (result != 0) {\n        std::cerr << "Assertion failed: count_upper('B') == 0" << std::endl;\n        std::exit(1);\n    }\n\n    result = count_upper("U");\n    if (result != 1) {\n        std::cerr << "Assertion failed: count_upper('U') == 1" << std::endl;\n        std::exit(1);\n    }\n\n    result = count_upper("");\n    if (result != 0) {\n        std::cerr << "Assertion failed: count_upper('') == 0" << std::endl;\n        std::exit(1);\n    }\n\n    result = count_upper("EEEE");\n    if (result != 2) {\n        std::cerr << "Assertion failed: count_upper('EEEE') == 2" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n\n// Function definition\nint count_upper(const char* s) {\n    const char* uvowel = "AEIOU";\n    int count = 0;\n    int len_s = std::strlen(s);\n\n    for (int i = 0; i < len_s; i += 2) {\n        if (std::strchr(uvowel, s[i]) != nullptr) {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n### Explanation:\n1. **Function Prototype and Definition**: The `count_upper` function is defined in C++ with a similar logic to the Fortran version. It uses a `const char*` to accept a string and returns an `int`.\n2. **Main Function**: The main function in C++ is similar to the Fortran program. It includes test cases that call the `count_upper` function and checks the results against expected values.\n3. **String Length and Indexing**: C++ uses null-terminated strings, so the length of a string can be obtained using `std::strlen`. The `std::strchr` function is used to check if a character is in a string.\n4. **Error Handling**: The `std::cerr` stream is used for error messages, and `std::exit(1)` is called to terminate the program if a test fails.\n5. **Output**: The `std::cout` stream is used for normal output.
#include <iostream>\n#include <cstdlib> // For std::exit\n#include <cmath> // For std::round\n\n// Function to convert a string to the closest integer\nint closest_integer(const std::string& value) {\n    float w;\n    // Attempt to convert the string to a float\n    try {\n        w = std::stof(value);\n    } catch (const std::exception& e) {\n        // If the conversion fails, throw an error\n        throw std::runtime_error("Invalid input: " + value);\n    }\n    // Use std::round to get the nearest integer\n    return static_cast<int>(std::round(w));\n}\n\n// Subroutine to assert a condition\nvoid assert_condition(bool condition, const std::string& message) {\n    if (!condition) {\n        std::cerr << message << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Main program body\n    assert_condition(closest_integer("10") == 10, "Assertion failed: closest_integer('10') == 10");\n    assert_condition(closest_integer("14.5") == 15, "Assertion failed: closest_integer('14.5') == 15");\n    assert_condition(closest_integer("-15.5") == -16, "Assertion failed: closest_integer('-15.5') == -16");\n    assert_condition(closest_integer("15.3") == 15, "Assertion failed: closest_integer('15.3') == 15");\n    assert_condition(closest_integer("0") == 0, "Assertion failed: closest_integer('0') == 0");\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib> // For exit()\n\nvoid make_a_pile(int n, std::vector<int>& out) {\n    out.resize(n);\n    out[0] = n;\n    for (int i = 1; i < n; ++i) {\n        out[i] = out[i-1] + 2;\n    }\n}\n\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        exit(1);\n    }\n}\n\nint main() {\n    std::vector<int> pile;\n\n    make_a_pile(3, pile);\n    assert(issame(pile, {3, 5, 7}));\n\n    make_a_pile(4, pile);\n    assert(issame(pile, {4, 6, 8, 10}));\n\n    make_a_pile(5, pile);\n    assert(issame(pile, {5, 7, 9, 11, 13}));\n\n    make_a_pile(6, pile);\n    assert(issame(pile, {6, 8, 10, 12, 14, 16}));\n\n    make_a_pile(8, pile);\n    assert(issame(pile, {8, 10, 12, 14, 16, 18, 20, 22}));\n\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For exit()\n\n// Function declaration\nint choose_num(int x, int y);\n\nint main() {\n    int result;\n\n    result = choose_num(12, 15);\n    if (result != 14) {\n        std::cout << "Assertion failed: choose_num(12, 15) == 14" << std::endl;\n        exit(1);\n    }\n\n    result = choose_num(13, 12);\n    if (result != -1) {\n        std::cout << "Assertion failed: choose_num(13, 12) == -1" << std::endl;\n        exit(1);\n    }\n\n    result = choose_num(33, 12354);\n    if (result != 12354) {\n        std::cout << "Assertion failed: choose_num(33, 12354) == 12354" << std::endl;\n        exit(1);\n    }\n\n    result = choose_num(5234, 5233);\n    if (result != -1) {\n        std::cout << "Assertion failed: choose_num(5234, 5233) == -1" << std::endl;\n        exit(1);\n    }\n\n    result = choose_num(6, 29);\n    if (result != 28) {\n        std::cout << "Assertion failed: choose_num(6, 29) == 28" << std::endl;\n        exit(1);\n    }\n\n    result = choose_num(27, 10);\n    if (result != -1) {\n        std::cout << "Assertion failed: choose_num(27, 10) == -1" << std::endl;\n        exit(1);\n    }\n\n    result = choose_num(7, 7);\n    if (result != -1) {\n        std::cout << "Assertion failed: choose_num(7, 7) == -1" << std::endl;\n        exit(1);\n    }\n\n    result = choose_num(546, 546);\n    if (result != 546) {\n        std::cout << "Assertion failed: choose_num(546, 546) == 546" << std::endl;\n        exit(1);\n    }\n\n    return 0;\n}\n\n// Function definition\nint choose_num(int x, int y) {\n    if (y < x) {\n        return -1;\n    } else if (y == x && y % 2 == 1) {\n        return -1;\n    } else if (y % 2 == 1) {\n        return y - 1;\n    } else {\n        return y;\n    }\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nclass Utils {\npublic:\n    static std::string rounded_avg(int n, int m) {\n        if (n > m) {\n            return "-1";\n        }\n\n        int num = (m + n) / 2;\n        std::string temp_out = "";\n        while (num > 0) {\n            int remainder = num % 2;\n            temp_out = std::to_string(remainder) + temp_out;\n            num = num / 2;\n        }\n\n        if (temp_out.empty()) {\n            temp_out = "0";\n        }\n\n        return temp_out;\n    }\n\n    static void assert(bool condition, const std::string& message) {\n        if (!condition) {\n            std::cerr << message << std::endl;\n            std::exit(1);\n        }\n    }\n};\n\nint main() {\n    Utils::assert(Utils::rounded_avg(1, 5) == "11", "Assertion failed: rounded_avg(1, 5) == '11'");\n    Utils::assert(Utils::rounded_avg(7, 13) == "1010", "Assertion failed: rounded_avg(7, 13) == '1010'");\n    Utils::assert(Utils::rounded_avg(964, 977) == "1111001010", "Assertion failed: rounded_avg(964, 977) == '1111001010'");\n    Utils::assert(Utils::rounded_avg(996, 997) == "1111100100", "Assertion failed: rounded_avg(996, 997) == '1111100100'");\n    Utils::assert(Utils::rounded_avg(560, 851) == "1011000001", "Assertion failed: rounded_avg(560, 851) == '1011000001'");\n    Utils::assert(Utils::rounded_avg(185, 546) == "101101101", "Assertion failed: rounded_avg(185, 546) == '101101101'");\n    Utils::assert(Utils::rounded_avg(362, 496) == "110101101", "Assertion failed: rounded_avg(362, 496) == '110101101'");\n    Utils::assert(Utils::rounded_avg(350, 902) == "1001110010", "Assertion failed: rounded_avg(350, 902) == '1001110010'");\n    Utils::assert(Utils::rounded_avg(197, 233) == "11010111", "Assertion failed: rounded_avg(197, 233) == '11010111'");\n    Utils::assert(Utils::rounded_avg(7, 5) == "-1", "Assertion failed: rounded_avg(7, 5) == '-1'");\n    Utils::assert(Utils::rounded_avg(5, 1) == "-1", "Assertion failed: rounded_avg(5, 1) == '-1'");\n    Utils::assert(Utils::rounded_avg(5, 5) == "101", "Assertion failed: rounded_avg(5, 5) == '101'");\n\n    std::cout << "All assertions passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cstdlib>\n\nstruct NumToType {\n    int key;\n    std::string value;\n};\n\nvoid sort_array(std::vector<int>& arr, int n) {\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            if (arr[i] > arr[j]) {\n                std::swap(arr[i], arr[j]);\n            }\n        }\n    }\n}\n\nstd::vector<std::string> by_length(std::vector<int>& arr, int n) {\n    std::vector<NumToType> numto = {\n        {0, "Zero"}, {1, "One"}, {2, "Two"}, {3, "Three"}, {4, "Four"},\n        {5, "Five"}, {6, "Six"}, {7, "Seven"}, {8, "Eight"}, {9, "Nine"}\n    };\n\n    sort_array(arr, n);\n\n    std::vector<std::string> out;\n    for (int i = n - 1; i >= 0; --i) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            out.push_back(numto[arr[i]].value);\n        }\n    }\n\n    return out;\n}\n\nbool issame(const std::vector<std::string>& a, const std::vector<std::string>& b, int n, int m) {\n    if (n != m) {\n        return false;\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nint main() {\n    std::vector<std::string> result;\n    std::vector<std::string> expected1 = {\n        "Eight     ", "Five      ", "Four      ", "Three     ", "Two       ", "Two       ", "One       ", "One       "\n    };\n    std::vector<std::string> expected2 = {"One       "};\n    std::vector<std::string> expected3 = {"Three     ", "Two       ", "One       "};\n    std::vector<std::string> expected4 = {"Nine      ", "Eight     ", "Four      "};\n\n    std::vector<int> arr = {2, 1, 1, 4, 5, 8, 2, 3};\n    result = by_length(arr, 8);\n    if (!issame(result, expected1, result.size(), expected1.size())) {\n        std::cerr << "Test 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    arr = {};\n    result = by_length(arr, 0);\n    if (!issame(result, expected2, result.size(), 0)) {\n        std::cerr << "Test 2: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    arr = {1, -1, 55};\n    result = by_length(arr, 3);\n    if (!issame(result, expected2, result.size(), expected2.size())) {\n        std::cerr << "Test 3: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    arr = {1, -1, 3, 2};\n    result = by_length(arr, 4);\n    if (!issame(result, expected3, result.size(), expected3.size())) {\n        std::cerr << "Test 4: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    arr = {9, 4, 8};\n    result = by_length(arr, 3);\n    if (!issame(result, expected4, result.size(), expected4.size())) {\n        std::cerr << "Test 5: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\nclass Utils {\npublic:\n    static std::vector<int> f(int n) {\n        std::vector<int> out(n);\n        int sum = 0;\n        int prod = 1;\n\n        for (int i = 1; i <= n; ++i) {\n            sum += i;\n            prod *= i;\n            if (i % 2 == 0) {\n                out[i - 1] = prod;\n            } else {\n                out[i - 1] = sum;\n            }\n        }\n\n        return out;\n    }\n\n    static bool issame(const std::vector<int>& a, const std::vector<int>& b) {\n        if (a.size() != b.size()) {\n            return false;\n        }\n\n        for (size_t i = 0; i < a.size(); ++i) {\n            if (a[i] != b[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};\n\nint main() {\n    std::vector<int> expected1 = {1, 2, 6, 24, 15};\n    std::vector<int> expected2 = {1, 2, 6, 24, 15, 720, 28};\n    std::vector<int> expected3 = {1};\n    std::vector<int> expected4 = {1, 2, 6};\n\n    auto result = Utils::f(5);\n    if (!Utils::issame(result, expected1)) {\n        std::cerr << "Assertion failed for f(5)" << std::endl;\n        std::exit(1);\n    }\n\n    result = Utils::f(7);\n    if (!Utils::issame(result, expected2)) {\n        std::cerr << "Assertion failed for f(7)" << std::endl;\n        std::exit(1);\n    }\n\n    result = Utils::f(1);\n    if (!Utils::issame(result, expected3)) {\n        std::cerr << "Assertion failed for f(1)" << std::endl;\n        std::exit(1);\n    }\n\n    result = Utils::f(3);\n    if (!Utils::issame(result, expected4)) {\n        std::cerr << "Assertion failed for f(3)" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed" << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib> // For exit()\n\n// Function prototypes\nvoid test_even_odd_palindrome(int n, int expected[2]);\nint* even_odd_palindrome(int n);\nstd::string reverse_string(const std::string& s);\nbool issame(int a[2], int b[2]);\n\nint main() {\n    // Test cases\n    test_even_odd_palindrome(123, {8, 13});\n    test_even_odd_palindrome(12, {4, 6});\n    test_even_odd_palindrome(3, {1, 2});\n    test_even_odd_palindrome(63, {6, 8});\n    test_even_odd_palindrome(25, {5, 6});\n    test_even_odd_palindrome(19, {4, 6});\n    test_even_odd_palindrome(9, {4, 5});\n    test_even_odd_palindrome(1, {0, 1});\n\n    return 0;\n}\n\nvoid test_even_odd_palindrome(int n, int expected[2]) {\n    int* result = even_odd_palindrome(n);\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed for n = " << n << std::endl;\n        exit(1);\n    }\n    delete[] result; // Free the allocated memory\n}\n\nint* even_odd_palindrome(int n) {\n    int* res = new int[2]{0, 0}; // Dynamic allocation for result array\n    std::string w, p;\n\n    for (int i = 1; i <= n; ++i) {\n        w = std::to_string(i);\n        p = reverse_string(w);\n        if (w == p) {\n            if (i % 2 == 1) {\n                res[1]++; // Odd numbers\n            } else {\n                res[0]++; // Even numbers\n            }\n        }\n    }\n    return res;\n}\n\nstd::string reverse_string(const std::string& s) {\n    std::string rev = "";\n    for (int i = s.length() - 1; i >= 0; --i) {\n        rev += s[i];\n    }\n    return rev;\n}\n\nbool issame(int a[2], int b[2]) {\n    return a[0] == b[0] && a[1] == b[1];\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n\nint count_nums(const std::vector<int>& n) {\n    int num = 0;\n    for (int i = 0; i < n.size(); ++i) {\n        if (n[i] > 0) {\n            ++num;\n        } else {\n            int sum = 0;\n            int w = std::abs(n[i]);\n            while (w >= 10) {\n                sum += w % 10;\n                w /= 10;\n            }\n            sum -= w;\n            if (sum > 0) ++num;\n        }\n    }\n    return num;\n}\n\nint main() {\n    if (count_nums({0}) != 0) {\n        std::cerr << "Assertion failed: count_nums({0}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (count_nums({-1, -2, 0}) != 0) {\n        std::cerr << "Assertion failed: count_nums({-1, -2, 0}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (count_nums({1, 1, 2, -2, 3, 4, 5}) != 6) {\n        std::cerr << "Assertion failed: count_nums({1, 1, 2, -2, 3, 4, 5}) == 6" << std::endl;\n        std::exit(1);\n    }\n\n    if (count_nums({1, 6, 9, -6, 0, 1, 5}) != 5) {\n        std::cerr << "Assertion failed: count_nums({1, 6, 9, -6, 0, 1, 5}) == 5" << std::endl;\n        std::exit(1);\n    }\n\n    if (count_nums({1, 100, 98, -7, 1, -1}) != 4) {\n        std::cerr << "Assertion failed: count_nums({1, 100, 98, -7, 1, -1}) == 4" << std::endl;\n        std::exit(1);\n    }\n\n    if (count_nums({12, 23, 34, -45, -56, 0}) != 5) {\n        std::cerr << "Assertion failed: count_nums({12, 23, 34, -45, -56, 0}) == 5" << std::endl;\n        std::exit(1);\n    }\n\n    if (count_nums({-0, 1}) != 1) {\n        std::cerr << "Assertion failed: count_nums({-0, 1}) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    if (count_nums({1}) != 1) {\n        std::cerr << "Assertion failed: count_nums({1}) == 1" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib> // For exit()\n\nclass BallModule {\npublic:\n    static bool moveOneBall(const std::vector<int>& arr) {\n        int num = 0;\n        if (arr.size() == 0) {\n            return true;\n        }\n\n        for (size_t i = 1; i < arr.size(); ++i) {\n            if (arr[i] < arr[i - 1]) {\n                ++num;\n            }\n        }\n\n        if (arr.back() > arr.front()) {\n            ++num;\n        }\n\n        return num < 2;\n    }\n};\n\nint main() {\n    // Test cases\n    std::vector<int> arr;\n\n    // Test case 1\n    arr = {3, 4, 5, 1, 2};\n    if (!BallModule::moveOneBall(arr)) {\n        std::cerr << "Assertion failed for {3, 4, 5, 1, 2}" << std::endl;\n        exit(1);\n    }\n\n    // Test case 2\n    arr = {3, 5, 10, 1, 2};\n    if (!BallModule::moveOneBall(arr)) {\n        std::cerr << "Assertion failed for {3, 5, 10, 1, 2}" << std::endl;\n        exit(1);\n    }\n\n    // Test case 3\n    arr = {4, 3, 1, 2};\n    if (BallModule::moveOneBall(arr)) {\n        std::cerr << "Assertion failed for {4, 3, 1, 2}" << std::endl;\n        exit(1);\n    }\n\n    // Test case 4\n    arr = {3, 5, 4, 1, 2};\n    if (BallModule::moveOneBall(arr)) {\n        std::cerr << "Assertion failed for {3, 5, 4, 1, 2}" << std::endl;\n        exit(1);\n    }\n\n    // Test case 5\n    arr = {};\n    if (!BallModule::moveOneBall(arr)) {\n        std::cerr << "Assertion failed for {}" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n```\n\n### Explanation:\n1. **Class `BallModule`**: This class contains the static function `moveOneBall` which takes a `const std::vector<int>&` as its parameter. This function mimics the `move_one_ball` function in the Fortran code.\n2. **Static Function `moveOneBall`**: This function calculates the number of inversions in the array and returns `true` if the number of inversions is less than 2, indicating that the array can be sorted with one move.\n3. **Main Function**: This function contains test cases similar to the Fortran program. Each test case initializes a `std::vector<int>` with a specific set of values and checks if the `moveOneBall` function returns the expected result. If a test case fails, the program prints an error message and exits with a non-zero status.
#include <vector>\n#include <cstdlib>\n\nstd::string exchange(const std::vector<int>& lst1, const std::vector<int>& lst2) {\n    int num = 0;\n    for (int i : lst1) {\n        if (i % 2 == 0) num++;\n    }\n    for (int i : lst2) {\n        if (i % 2 == 0) num++;\n    }\n\n    if (num >= lst1.size()) {\n        return "YES";\n    } else {\n        return "NO";\n    }\n}\n\nint main() {\n    if (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) != "YES") {\n        std::cerr << "Assertion failed: exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == 'YES'" << std::endl;\n        std::exit(1);\n    }\n\n    if (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) != "NO") {\n        std::cerr << "Assertion failed: exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == 'NO'" << std::endl;\n        std::exit(1);\n    }\n\n    if (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) != "YES") {\n        std::cerr << "Assertion failed: exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == 'YES'" << std::endl;\n        std::exit(1);\n    }\n\n    if (exchange({5, 7, 3}, {2, 6, 4}) != "YES") {\n        std::cerr << "Assertion failed: exchange({5, 7, 3}, {2, 6, 4}) == 'YES'" << std::endl;\n        std::exit(1);\n    }\n\n    if (exchange({5, 7, 3}, {2, 6, 3}) != "NO") {\n        std::cerr << "Assertion failed: exchange({5, 7, 3}, {2, 6, 3}) == 'NO'" << std::endl;\n        std::exit(1);\n    }\n\n    if (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) != "NO") {\n        std::cerr << "Assertion failed: exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == 'NO'" << std::endl;\n        std::exit(1);\n    }\n\n    if (exchange({100, 200}, {200, 200}) != "YES") {\n        std::cerr << "Assertion failed: exchange({100, 200}, {200, 200}) == 'YES'" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <cstdlib>\n\nvoid odd_count(const std::vector<std::string>& lst, std::vector<std::string>& out) {\n    std::string s = "the number of odd elements in the string i of the input.";\n    out.clear();\n    out.resize(lst.size());\n\n    for (size_t i = 0; i < lst.size(); ++i) {\n        int sum = 0;\n        for (char c : lst[i]) {\n            if (std::isdigit(c)) {\n                if ((c - '0') % 2 == 1) ++sum;\n            }\n        }\n\n        std::string s2;\n        size_t pos = 0;\n        for (char c : s) {\n            if (c == 'i') {\n                s2 += std::to_string(sum);\n                pos += std::to_string(sum).length();\n            } else {\n                s2 += c;\n                ++pos;\n            }\n        }\n        out[i] = s2;\n    }\n}\n\nbool issame(const std::vector<std::string>& a, const std::vector<std::string>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nvoid print_results(const std::vector<std::string>& output, const std::vector<std::string>& expected) {\n    std::cout << "Actual Output:" << std::endl;\n    for (const auto& s : output) {\n        std::cout << s << std::endl;\n    }\n\n    std::cout << "Expected Output:" << std::endl;\n    for (const auto& s : expected) {\n        std::cout << s << std::endl;\n    }\n}\n\nint main() {\n    std::vector<std::string> input, output, expected;\n\n    // Test case 1\n    input = {"1234567"};\n    expected = {"the number of odd elements 4n the str4ng 4 of the 4nput."};\n    odd_count(input, output);\n    print_results(output, expected);\n    assert(issame(output, expected));\n\n    // Test case 2\n    input = {"3", "11111111"};\n    expected = {"the number of odd elements 1n the str1ng 1 of the 1nput.",\n                "the number of odd elements 8n the str8ng 8 of the 8nput."};\n    odd_count(input, output);\n    print_results(output, expected);\n    assert(issame(output, expected));\n\n    // Test case 3\n    input = {"271", "137", "314"};\n    expected = {"the number of odd elements 2n the str2ng 2 of the 2nput.",\n                "the number of odd elements 3n the str3ng 3 of the 3nput.",\n                "the number of odd elements 2n the str2ng 2 of the 2nput."};\n    odd_count(input, output);\n    print_results(output, expected);\n    assert(issame(output, expected));\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\n// Function to sort an array based on the number of 1s in its binary representation\nstd::vector<int> sort_array(const std::vector<int>& arr) {\n    std::vector<int> sorted_arr = arr;\n    std::vector<int> bin(arr.size());\n\n    // Calculate the number of 1s in the binary representation of each element\n    for (size_t i = 0; i < arr.size(); ++i) {\n        int b = 0;\n        int n = std::abs(arr[i]);\n        while (n > 0) {\n            b += n % 2;\n            n /= 2;\n        }\n        bin[i] = b;\n    }\n\n    // Sort the array based on the bin values and the original values\n    for (size_t i = 0; i < arr.size(); ++i) {\n        for (size_t j = i + 1; j < arr.size(); ++j) {\n            if (bin[j] < bin[i] || (bin[j] == bin[i] && sorted_arr[j] < sorted_arr[i])) {\n                std::swap(sorted_arr[i], sorted_arr[j]);\n                std::swap(bin[i], bin[j]);\n            }\n        }\n    }\n\n    return sorted_arr;\n}\n\n// Function to check if two vectors are equal\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Subroutine to run a test case\nvoid test_case(const std::vector<int>& arr, const std::vector<int>& expected) {\n    std::vector<int> sorted_arr = sort_array(arr);\n    if (!issame(sorted_arr, expected)) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\n// Main function to run tests\nvoid run_tests() {\n    // Test cases\n    test_case({1, 5, 2, 3, 4}, {1, 2, 4, 3, 5});\n    test_case({-2, -3, -4, -5, -6}, {-4, -2, -6, -5, -3});\n    test_case({1, 0, 2, 3, 4}, {0, 1, 2, 4, 3});\n    test_case({2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4}, {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77});\n    test_case({3, 6, 44, 12, 32, 5}, {32, 3, 5, 6, 12, 44});\n    test_case({2, 4, 8, 16, 32}, {2, 4, 8, 16, 32});\n    test_case({2, 4, 8, 16, 32}, {2, 4, 8, 16, 32});\n}\n\nint main() {\n    run_tests();\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nstd::string get_closest_vowel(const std::string& word) {\n    std::string vowels = "AEIOUaeiou";\n    std::string result = "";\n\n    for (int i = word.length() - 1; i >= 2; --i) {\n        if (vowels.find(word[i]) != std::string::npos) {\n            if (vowels.find(word[i + 1]) == std::string::npos && vowels.find(word[i - 1]) == std::string::npos) {\n                result = word[i];\n                return result;\n            }\n        }\n    }\n    return result;\n}\n\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert_condition(get_closest_vowel("yogurt") == "u");\n    assert_condition(get_closest_vowel("full") == "u");\n    assert_condition(get_closest_vowel("easy") == "");\n    assert_condition(get_closest_vowel("eAsy") == "");\n    assert_condition(get_closest_vowel("ali") == "");\n    assert_condition(get_closest_vowel("bad") == "a");\n    assert_condition(get_closest_vowel("most") == "o");\n    assert_condition(get_closest_vowel("ab") == "");\n    assert_condition(get_closest_vowel("ba") == "");\n    assert_condition(get_closest_vowel("quick") == "");\n    assert_condition(get_closest_vowel("anime") == "i");\n    assert_condition(get_closest_vowel("Asia") == "");\n    assert_condition(get_closest_vowel("Above") == "o");\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\n// Function to sort the array using bubble sort\nvoid bubble_sort(std::vector<int>& arr) {\n    for (size_t i = 0; i < arr.size() - 1; ++i) {\n        for (size_t j = 0; j < arr.size() - i - 1; ++j) {\n            if (arr[j] > arr[j + 1]) {\n                std::swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n}\n\n// Function to find the maximum elements\nstd::vector<int> maximum(const std::vector<int>& arr, int k) {\n    std::vector<int> sorted_arr = arr;\n    bubble_sort(sorted_arr);\n    return std::vector<int>(sorted_arr.end() - k, sorted_arr.end());\n}\n\n// Function to check if two vectors are equal\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Function to run tests\nvoid run_tests() {\n    assert(issame(maximum({-3, -4, 5}, 3), {-4, -3, 5}));\n    assert(issame(maximum({4, -4, 4}, 2), {4, 4}));\n    assert(issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1), {2}));\n    assert(issame(maximum({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123}));\n    assert(issame(maximum({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20}));\n    assert(issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15}));\n    assert(issame(maximum({-1, 0, 2, 5, 3, -10}, 2), {3, 5}));\n    assert(issame(maximum({1, 0, 5, -7}, 1), {5}));\n    assert(issame(maximum({4, -4}, 2), {-4, 4}));\n    assert(issame(maximum({-10, 10}, 2), {-10, 10}));\n    // Handle the empty array case separately\n    std::vector<int> expected;\n    assert(issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0), expected));\n}\n\nint main() {\n    run_tests();\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function prototype\nint solutions(const std::vector<int>& lst);\n\nint main() {\n    // Test cases\n    if (solutions({5, 8, 7, 1}) != 12) {\n        std::cerr << "Assertion failed: solutions({5, 8, 7, 1}) == 12" << std::endl;\n        std::exit(1);\n    }\n\n    if (solutions({3, 3, 3, 3, 3}) != 9) {\n        std::cerr << "Assertion failed: solutions({3, 3, 3, 3, 3}) == 9" << std::endl;\n        std::exit(1);\n    }\n\n    if (solutions({30, 13, 24, 321}) != 0) {\n        std::cerr << "Assertion failed: solutions({30, 13, 24, 321}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (solutions({5, 9}) != 5) {\n        std::cerr << "Assertion failed: solutions({5, 9}) == 5" << std::endl;\n        std::exit(1);\n    }\n\n    if (solutions({2, 4, 8}) != 0) {\n        std::cerr << "Assertion failed: solutions({2, 4, 8}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (solutions({30, 13, 23, 32}) != 23) {\n        std::cerr << "Assertion failed: solutions({30, 13, 23, 32}) == 23" << std::endl;\n        std::exit(1);\n    }\n\n    if (solutions({3, 13, 2, 9}) != 3) {\n        std::cerr << "Assertion failed: solutions({3, 13, 2, 9}) == 3" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}\n\n// Function definition\nint solutions(const std::vector<int>& lst) {\n    int sum = 0;\n    for (size_t i = 0; i < lst.size(); i += 2) {\n        if (lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function to add elements from the array\nint add_elements(const std::vector<int>& arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; ++i) {\n        if (arr[i] >= -99 && arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nint main() {\n    // Test cases\n    if (add_elements({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3) != -4) {\n        std::cerr << "Assertion failed: add_elements({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3) != -4" << std::endl;\n        std::exit(1);\n    }\n\n    if (add_elements({111, 121, 3, 4000, 5, 6}, 2) != 0) {\n        std::cerr << "Assertion failed: add_elements({111, 121, 3, 4000, 5, 6}, 2) != 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (add_elements({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4) != 125) {\n        std::cerr << "Assertion failed: add_elements({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4) != 125" << std::endl;\n        std::exit(1);\n    }\n\n    if (add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4) != 24) {\n        std::cerr << "Assertion failed: add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4) != 24" << std::endl;\n        std::exit(1);\n    }\n\n    if (add_elements({1}, 1) != 1) {\n        std::cerr << "Assertion failed: add_elements({1}, 1) != 1" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstdlib>\n\n// Function to generate the odd Collatz sequence for a given number\nstd::vector<int> get_odd_collatz(int n) {\n    std::vector<int> result;\n    result.push_back(1); // Adding 1 as the starting point\n    int temp = n;\n\n    while (temp != 1) {\n        if (temp % 2 == 1) {\n            temp = temp * 3 + 1;\n            result.push_back(temp);\n        } else {\n            temp = temp / 2;\n        }\n    }\n\n    // Sort the result vector\n    std::sort(result.begin(), result.end());\n    return result;\n}\n\n// Function to check if two vectors are equal\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\n// Subroutine to test the odd Collatz function\nvoid test_odd_collatz(int n, const std::vector<int>& expected) {\n    std::vector<int> result = get_odd_collatz(n);\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed for n = " << n << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    test_odd_collatz(14, {1, 5, 7, 11, 13, 17});\n    test_odd_collatz(5, {1, 5});\n    test_odd_collatz(12, {1, 3, 5});\n    test_odd_collatz(1, {1});\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nbool valid_date(const std::string& date) {\n    if (date.length() != 10) {\n        return false;\n    }\n\n    int mm, dd, yy;\n    for (size_t i = 0; i < date.length(); ++i) {\n        if ((i == 2 || i == 5) && date[i] != '-') {\n            return false;\n        } else if (i != 2 && i != 5 && (date[i] < '0' || date[i] > '9')) {\n            return false;\n        }\n    }\n\n    mm = std::stoi(date.substr(0, 2));\n    dd = std::stoi(date.substr(3, 2));\n    yy = std::stoi(date.substr(6, 4));\n\n    if (mm < 1 || mm > 12) {\n        return false;\n    }\n\n    if (dd < 1 || dd > 31) {\n        return false;\n    }\n\n    if (dd == 31 && (mm == 4 || mm == 6 || mm == 9 || mm == 11 || mm == 2)) {\n        return false;\n    }\n\n    if (dd == 30 && mm == 2) {\n        return false;\n    }\n\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nstd::string pad(const std::string& str) {\n    std::string padded_str = str;\n    padded_str.append(10 - str.length(), ' ');\n    return padded_str;\n}\n\nint main() {\n    // Test cases\n    assert(valid_date(pad("03-11-2000")) == true);\n    assert(valid_date(pad("15-01-2012")) == false);\n    assert(valid_date(pad("04-0-2040")) == false);\n    assert(valid_date(pad("06-04-2020")) == true);\n    assert(valid_date(pad("01-01-2007")) == true);\n    assert(valid_date(pad("03-32-2011")) == false);\n    assert(valid_date(pad("")) == false);\n    assert(valid_date(pad("04-31-3000")) == false);\n    assert(valid_date(pad("06-06-2005")) == true);\n    assert(valid_date(pad("21-31-2000")) == false);\n    assert(valid_date(pad("04-12-2003")) == true);\n    assert(valid_date(pad("04122003")) == false);\n    assert(valid_date(pad("20030412")) == false);\n    assert(valid_date(pad("2003-04")) == false);\n    assert(valid_date(pad("2003-04-12")) == false);\n    assert(valid_date(pad("04-2003")) == false);\n\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\nbool is_sorted(const std::vector<int>& lst) {\n    if (lst.size() <= 1) return true;\n\n    for (size_t i = 1; i < lst.size(); ++i) {\n        if (lst[i] < lst[i - 1]) {\n            return false;\n        }\n        if (i >= 2 && lst[i] == lst[i - 1] && lst[i] == lst[i - 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nvoid run_tests() {\n    std::vector<int> lst;\n\n    lst = {5};\n    assert(is_sorted(lst) == true);\n\n    lst = {1, 2, 3, 4, 5};\n    assert(is_sorted(lst) == true);\n\n    lst = {1, 3, 2, 4, 5};\n    assert(is_sorted(lst) == false);\n\n    lst = {1, 2, 3, 4, 5, 6};\n    assert(is_sorted(lst) == true);\n\n    lst = {1, 2, 3, 4, 5, 6, 7};\n    assert(is_sorted(lst) == true);\n\n    lst = {1, 2, 3, 4, 5, 6, 7};\n    assert(is_sorted(lst) == false);\n\n    lst = {};\n    assert(is_sorted(lst) == true);\n\n    lst = {1};\n    assert(is_sorted(lst) == true);\n\n    lst = {3, 2, 1};\n    assert(is_sorted(lst) == false);\n\n    lst = {1, 2, 2, 2, 3, 4};\n    assert(is_sorted(lst) == false);\n\n    lst = {1, 2, 3, 3, 3, 4};\n    assert(is_sorted(lst) == false);\n\n    lst = {1, 2, 2, 3, 3, 4};\n    assert(is_sorted(lst) == true);\n\n    lst = {1, 2, 3, 4};\n    assert(is_sorted(lst) == true);\n}\n\nint main() {\n    run_tests();\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <string>\n#include <vector>\n\nstd::string intersection(const std::vector<int>& interval1, const std::vector<int>& interval2) {\n    int inter1 = std::max(interval1[0], interval2[0]);\n    int inter2 = std::min(interval1[1], interval2[1]);\n    int l = inter2 - inter1;\n\n    if (l < 2) {\n        return "NO";\n    }\n\n    for (int i = 2; i <= static_cast<int>(std::sqrt(static_cast<double>(l))); ++i) {\n        if (l % i == 0) {\n            return "NO";\n        }\n    }\n\n    return "YES";\n}\n\nint main() {\n    std::vector<std::vector<int>> intervals = {\n        {1, 2}, {2, 3},\n        {-1, 1}, {0, 4},\n        {-3, -1}, {-5, 5},\n        {-2, 2}, {-4, 0},\n        {-11, 2}, {-1, -1},\n        {1, 2}, {3, 5},\n        {1, 2}, {1, 2},\n        {-2, -2}, {-3, -2}\n    };\n\n    std::vector<std::string> results = {\n        "NO", "NO",\n        "NO", "NO",\n        "YES", "YES",\n        "YES", "YES",\n        "NO", "NO",\n        "NO", "NO",\n        "NO"\n    };\n\n    for (size_t i = 0; i < intervals.size(); i += 2) {\n        std::string result = intersection(intervals[i], intervals[i + 1]);\n        if (result != results[i / 2]) {\n            std::cerr << "Assertion failed: intersection(" << intervals[i][0] << ", " << intervals[i][1] << ") == '" << results[i / 2] << "'" << std::endl;\n            return 1;\n        }\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}
#include <cmath>\n#include <cstdlib>\n\nint prod_signs(const std::vector<int>& arr) {\n    if (arr.empty() || (arr.size() == 1 && arr[0] == 0)) {\n        return -32768;\n    }\n\n    int sum = 0;\n    int prods = 1;\n\n    for (int i = 0; i < arr.size(); ++i) {\n        sum += std::abs(arr[i]);\n        if (arr[i] == 0) prods = 0;\n        if (arr[i] < 0) prods = -prods;\n    }\n\n    return sum * prods;\n}\n\nint main() {\n    // Test cases\n    if (prod_signs({1, 2, 2, -4}) != -9) {\n        std::cerr << "Assertion failed: prod_signs({1, 2, 2, -4}) == -9" << std::endl;\n        std::exit(1);\n    }\n\n    if (prod_signs({0, 1}) != 0) {\n        std::cerr << "Assertion failed: prod_signs({0, 1}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (prod_signs({1, 1, 1, 2, 3, -1, 1}) != -10) {\n        std::cerr << "Assertion failed: prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10" << std::endl;\n        std::exit(1);\n    }\n\n    // Handle the empty array case separately\n    if (prod_signs({0}) != -32768) {\n        std::cerr << "Assertion failed: prod_signs({0}) == -32768" << std::endl;\n        std::exit(1);\n    }\n\n    if (prod_signs({2, 4, 1, 2, -1, -1, 9}) != 20) {\n        std::cerr << "Assertion failed: prod_signs({2, 4, 1, 2, -1, -1, 9}) == 20" << std::endl;\n        std::exit(1);\n    }\n\n    if (prod_signs({-1, 1, -1, 1}) != 4) {\n        std::cerr << "Assertion failed: prod_signs({-1, 1, -1, 1}) == 4" << std::endl;\n        std::exit(1);\n    }\n\n    if (prod_signs({-1, 1, 1, 1}) != -4) {\n        std::cerr << "Assertion failed: prod_signs({-1, 1, 1, 1}) == -4" << std::endl;\n        std::exit(1);\n    }\n\n    if (prod_signs({-1, 1, 1, 0}) != 0) {\n        std::cerr << "Assertion failed: prod_signs({-1, 1, 1, 0}) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\nusing namespace std;\n\nvoid minPath(const vector<vector<int>>& grid, int k, vector<int>& result) {\n    int n = grid.size();\n    int x = -1, y = -1;\n\n    // Find the position of 1 in the grid\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n                break;\n            }\n        }\n        if (x != -1) break;\n    }\n\n    int min = n * n;\n    if (x > 0 && grid[x-1][y] < min) min = grid[x-1][y];\n    if (x < n-1 && grid[x+1][y] < min) min = grid[x+1][y];\n    if (y > 0 && grid[x][y-1] < min) min = grid[x][y-1];\n    if (y < n-1 && grid[x][y+1] < min) min = grid[x][y+1];\n\n    result.clear();\n    for (int i = 0; i < k; ++i) {\n        if (i % 2 == 0) {\n            result.push_back(1);\n        } else {\n            result.push_back(min);\n        }\n    }\n}\n\nbool issame(const vector<int>& a, const vector<int>& b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n    return true;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        cerr << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    vector<vector<int>> grid;\n    vector<int> result;\n    int k;\n\n    // Test case 1\n    grid = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    k = 3;\n    minPath(grid, k, result);\n    assert(issame(result, {1, 2, 1}));\n\n    // Test case 2\n    grid = {{5, 9, 3}, {4, 1, 6}, {7, 8, 2}};\n    k = 1;\n    minPath(grid, k, result);\n    assert(issame(result, {1}));\n\n    // Test case 3\n    grid = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};\n    k = 4;\n    minPath(grid, k, result);\n    assert(issame(result, {1, 2, 1, 2}));\n\n    // Add more test cases as needed\n\n    cout << "All tests passed successfully." << endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function to generate the Triangular sequence\nvoid tri(int n, std::vector<int>& out) {\n    if (n == 0) {\n        out.push_back(1);\n        return;\n    }\n\n    out.push_back(1);\n    out.push_back(3);\n\n    for (int i = 3; i <= n; ++i) {\n        if (i % 2 == 0) {\n            out.push_back(1 + (i - 1) / 2);\n        } else {\n            out.push_back(out[i - 1] + out[i - 2] + 1 + (i / 2));\n        }\n    }\n}\n\n// Function to check if two vectors are equal\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Function to run tests\nvoid test_tri(int n, const std::vector<int>& expected) {\n    std::vector<int> result;\n    tri(n, result);\n\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed for n = " << n << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    test_tri(3, {1, 3, 2, 8});\n    test_tri(4, {1, 3, 2, 8, 3});\n    test_tri(5, {1, 3, 2, 8, 3, 15});\n    test_tri(6, {1, 3, 2, 8, 3, 15, 4});\n    test_tri(7, {1, 3, 2, 8, 3, 15, 4, 24});\n    test_tri(8, {1, 3, 2, 8, 3, 15, 4, 24, 5});\n    test_tri(9, {1, 3, 2, 8, 3, 15, 4, 24, 5, 35});\n    test_tri(20, {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11});\n    test_tri(0, {1});\n    test_tri(1, {1, 3});\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nint digits(int n) {\n    std::string s = std::to_string(n);\n    int prod = 1;\n    bool has = false;\n\n    for (char c : s) {\n        int digit = c - '0';\n        if (digit % 2 == 1) {\n            has = true;\n            prod *= digit;\n        }\n    }\n\n    return has ? prod : 0;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Assertions\n    assert(digits(5) == 5);\n    assert(digits(54) == 5);\n    assert(digits(120) == 1);\n    assert(digits(5014) == 5);\n    assert(digits(98765) == 315);\n    assert(digits(5576543) == 2625);\n    assert(digits(2468) == 0);\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nbool is_nested(const std::string& str) {\n    int count = 0;\n    int maxcount = 0;\n    for (char c : str) {\n        if (c == '[') count++;\n        if (c == ']') count--;\n        if (count < 0) count = 0;\n        if (count > maxcount) maxcount = count;\n        if (count > maxcount - 2) return true;\n    }\n    return false;\n}\n\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nvoid run_tests() {\n    assert(is_nested("[[]]") == true);\n    assert(is_nested("[]]]]]]][[[[[]") == false);\n    assert(is_nested("[][]") == false);\n    assert(is_nested("[]") == false);\n    assert(is_nested("[[[[]]]]") == true);\n    assert(is_nested("[]]]]]]]]]]") == false);\n    assert(is_nested("[][][[]]") == true);\n    assert(is_nested("[[]") == false);\n    assert(is_nested("[]]") == false);\n    assert(is_nested("[[]][[") == true);\n    assert(is_nested("[[][]]") == true);\n    assert(is_nested("") == false);\n    assert(is_nested("[[[[[[[") == false);\n    assert(is_nested("]]]]]]]") == false);\n}\n\nint main() {\n    run_tests();\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n\n// Function to calculate the sum of squares of the ceiled numbers in a vector\nint sum_squares(const std::vector<float>& lst) {\n    int sum = 0;\n    for (float num : lst) {\n        sum += std::pow(std::ceil(num), 2);\n    }\n    return sum;\n}\n\n// Assert function to check conditions\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\n// Function to run tests\nvoid run_tests() {\n    assert(sum_squares({1.0, 2.0, 3.0}) == 14);\n    assert(sum_squares({1.0, 2.0, 3.0}) == 14);\n    assert(sum_squares({1.0, 3.0, 5.0, 7.0}) == 84);\n    assert(sum_squares({1.4, 4.2, 0.0}) == 29);\n    assert(sum_squares({-2.4, 1.0, 1.0}) == 6);\n    assert(sum_squares({100.0, 1.0, 15.0, 2.0}) == 10230);\n    assert(sum_squares({10000.0, 10000.0}) == 200000000);\n    assert(sum_squares({-1.4, 4.6, 6.3}) == 75);\n    assert(sum_squares({-1.4, 17.9, 18.9, 19.9}) == 1086);\n    assert(sum_squares({0.0}) == 0);\n    assert(sum_squares({-1.0}) == 1);\n    assert(sum_squares({-1.0, 1.0, 0.0}) == 2);\n}\n\nint main() {\n    run_tests();\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <algorithm>\n\nclass CanArrange {\npublic:\n    static int can_arrange(const std::vector<int>& arr, int n) {\n        int max = -1;\n        for (int i = 0; i < n; ++i) {\n            if (arr[i] <= i) {\n                max = i;\n            }\n        }\n        return max;\n    }\n\n    static int can_arrange_empty() {\n        return -1;\n    }\n};\n\nint main() {\n    // Test cases\n    std::vector<int> arr1 = {1, 2, 4, 3, 5};\n    if (CanArrange::can_arrange(arr1, 5) != 3) {\n        std::cerr << "Assertion failed: can_arrange({1,2,4,3,5}) != 3" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr2 = {1, 2, 4, 5};\n    if (CanArrange::can_arrange(arr2, 4) != -1) {\n        std::cerr << "Assertion failed: can_arrange({1,2,4,5}) != -1" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr3 = {1, 4, 2, 5, 6, 7, 8, 9, 10};\n    if (CanArrange::can_arrange(arr3, 9) != 2) {\n        std::cerr << "Assertion failed: can_arrange({1,4,2,5,6,7,8,9,10}) != 2" << std::endl;\n        return 1;\n    }\n\n    std::vector<int> arr4 = {4, 8, 5, 7, 3};\n    if (CanArrange::can_arrange(arr4, 5) != 4) {\n        std::cerr << "Assertion failed: can_arrange({4,8,5,7,3}) != 4" << std::endl;\n        return 1;\n    }\n\n    // Handle the empty array case separately\n    if (CanArrange::can_arrange_empty() != -1) {\n        std::cerr << "Assertion failed: can_arrange({}) != -1" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}\n```\n\n### Explanation:\n1. **Class `CanArrange`**: This class contains the `can_arrange` and `can_arrange_empty` functions, similar to the Fortran module.\n2. **Static Functions**: The `can_arrange` and `can_arrange_empty` functions are declared as `static` so they can be called without creating an instance of the class.\n3. **`std::vector<int>`**: Used to represent the array of integers.\n4. **Looping through the array**: The loop in `can_arrange` iterates from `0` to `n-1` to match Fortran's 1-based indexing.\n5. **Main function**: Contains test cases similar to the Fortran program.
#include <iostream>\n#include <vector>\n#include <cstdlib>\n\n// Function to find the largest and smallest integers in a list\nstd::vector<int> largest_smallest_integers(const std::vector<int>& lst) {\n    int maxneg = 0;\n    int minpos = 0;\n\n    for (int i = 0; i < lst.size(); ++i) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n\n    return {maxneg, minpos};\n}\n\n// Function to check if two vectors are equal\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) return false;\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) return false;\n    }\n\n    return true;\n}\n\n// Assert function to check conditions\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\n// Test function\nvoid run_tests() {\n    std::vector<int> expected;\n    std::vector<int> test_array;\n\n    // Test cases\n    test_case({2, 4, 1, 3, 5, 7}, {0, 1});\n    test_case({2, 4, 1, 3, 5, 7, 0}, {0, 1});\n    test_case({1, 3, 2, 4, 5, 6, -2}, {-2, 1});\n    test_case({4, 5, 3, 6, 2, 7, -7}, {-7, 2});\n    test_case({7, 3, 8, 4, 9, 2, 5, -9}, {-9, 2});\n    test_case({0}, {0, 0});\n    test_case({-1, -3, -5, -6}, {-1, 0});\n    test_case({-1, -3, -5, -6, 0}, {-1, 0});\n    test_case({-6, -4, -4, -3, 1}, {-3, 1});\n    test_case({-6, -4, -4, -3, -100, 1}, {-3, 1});\n\n    // Special case for empty array\n    test_case_empty({0, 0});\n}\n\nvoid test_case(const std::vector<int>& input_array, const std::vector<int>& expected) {\n    std::vector<int> test_array = input_array;\n    assert(issame(largest_smallest_integers(test_array), expected));\n}\n\nvoid test_case_empty(const std::vector<int>& expected) {\n    std::vector<int> test_array;\n    assert(issame(largest_smallest_integers(test_array), expected));\n}\n\nint main() {\n    run_tests();\n    std::cout << "All tests passed successfully." << std::endl;\n    return 0;\n}
#include <iostream>\n#include <cstdint>\n#include <cstdlib>\n\nint64_t special_factorial(int n) {\n    int64_t fact = 1;\n    int64_t bfact = 1;\n    for (int i = 1; i <= n; ++i) {\n        fact *= i;\n        bfact *= fact;\n    }\n    return bfact;\n}\n\nint main() {\n    // Test cases\n    if (special_factorial(4) != 288) {\n        std::cerr << "special_factorial(4) == 288: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (special_factorial(5) != 34560) {\n        std::cerr << "special_factorial(5) == 34560: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (special_factorial(7) != 125411328000) {\n        std::cerr << "special_factorial(7) == 125411328000: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    if (special_factorial(1) != 1) {\n        std::cerr << "special_factorial(1) == 1: assertion failed" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cctype>\n#include <cstdlib>\n\nstd::string file_name_check(const std::string& file_name) {\n    int numdigit = 0;\n    int numdot = 0;\n\n    if (file_name.length() < 5) {\n        return "No";\n    }\n\n    char w = file_name[0];\n    if (!std::isalpha(w) || (w < 'A' || w > 'Z') && (w < 'a' || w > 'z')) {\n        return "No";\n    }\n\n    std::string last = file_name.substr(file_name.length() - 4, 4);\n    if (last != ".txt" && last != ".exe" && last != ".dll") {\n        return "No";\n    }\n\n    for (char c : file_name) {\n        if (std::isdigit(c)) {\n            numdigit++;\n        }\n        if (c == '.') {\n            numdot++;\n        }\n    }\n\n    if (numdigit > 3 || numdot != 1) {\n        return "No";\n    }\n\n    return "Yes";\n}\n\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert_condition(file_name_check("example.txt") == "Yes");\n    assert_condition(file_name_check("1example.dll") == "No");\n    assert_condition(file_name_check("s1sdf3.asd") == "No");\n    assert_condition(file_name_check("K.dll") == "Yes");\n    assert_condition(file_name_check("MY16FILE3.exe") == "Yes");\n    assert_condition(file_name_check("His12FILE94.exe") == "No");\n    assert_condition(file_name_check("_Y.txt") == "No");\n    assert_condition(file_name_check("?aREYA.exe") == "No");\n    assert_condition(file_name_check("/this_is_valid.dll") == "No");\n    assert_condition(file_name_check("this_is_valid.wow") == "No");\n    assert_condition(file_name_check("this_is_valid.txt") == "Yes");\n    assert_condition(file_name_check("this_is_valid.txtexe") == "No");\n    assert_condition(file_name_check("#this2_i4s_5valid.ten") == "No");\n    assert_condition(file_name_check("@this1_is6_valid.exe") == "No");\n    assert_condition(file_name_check("this_is_12valid.6exe4.txt") == "No");\n    assert_condition(file_name_check("all.exe.txt") == "No");\n    assert_condition(file_name_check("I563_No.exe") == "Yes");\n    assert_condition(file_name_check("Is3youfault.txt") == "Yes");\n    assert_condition(file_name_check("no_one#knows.dll") == "Yes");\n    assert_condition(file_name_check("1I563_Yes3.exe") == "No");\n    assert_condition(file_name_check("I563_Yes3.txtt") == "No");\n    assert_condition(file_name_check("final..txt") == "No");\n    assert_condition(file_name_check("final132") == "No");\n    assert_condition(file_name_check("_f4indsartal132.") == "No");\n    assert_condition(file_name_check(".txt") == "No");\n    assert_condition(file_name_check("s.") == "No");\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <cstdlib> // For exit()\n\n// Function prototype\nbool simplify(const std::string& x, const std::string& n);\n\nint main() {\n    bool result;\n\n    result = simplify("1/5", "5/1");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('1/5', '5/1') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("1/6", "2/1");\n    if (result) {\n        std::cout << "Assertion failed: simplify('1/6', '2/1') == false" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("5/1", "3/1");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('5/1', '3/1') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("7/10", "10/2");\n    if (result) {\n        std::cout << "Assertion failed: simplify('7/10', '10/2') == false" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("2/10", "50/10");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('2/10', '50/10') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("7/2", "4/2");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('7/2', '4/2') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("11/6", "6/1");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('11/6', '6/1') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("2/3", "5/2");\n    if (result) {\n        std::cout << "Assertion failed: simplify('2/3', '5/2') == false" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("5/2", "3/5");\n    if (result) {\n        std::cout << "Assertion failed: simplify('5/2', '3/5') == false" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("2/4", "8/4");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('2/4', '8/4') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("2/4", "4/2");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('2/4', '4/2') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("1/5", "5/1");\n    if (!result) {\n        std::cout << "Assertion failed: simplify('1/5', '5/1') == true" << std::endl;\n        exit(1);\n    }\n\n    result = simplify("1/5", "1/5");\n    if (result) {\n        std::cout << "Assertion failed: simplify('1/5', '1/5') == false" << std::endl;\n        exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}\n\nbool simplify(const std::string& x, const std::string& n) {\n    int a, b, c, d;\n    size_t pos = x.find('/');\n    a = std::stoi(x.substr(0, pos));\n    b = std::stoi(x.substr(pos + 1));\n\n    pos = n.find('/');\n    c = std::stoi(n.substr(0, pos));\n    d = std::stoi(n.substr(pos + 1));\n\n    return (a * c) % (b * d) == 0;\n}\n```
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <string>\n#include <cstdlib>\n\n// Function to calculate the sum of digits of an integer\nint sumDigits(int num) {\n    int sum = 0;\n    std::string numStr = std::to_string(std::abs(num));\n    for (char digit : numStr) {\n        sum += digit - '0';\n    }\n    if (num >= 0) {\n        sum -= numStr[0] - '0';\n    } else {\n        sum += numStr[0] - '0';\n    }\n    return sum;\n}\n\n// Function to order the numbers by points\nstd::vector<int> orderByPoints(const std::vector<int>& nums) {\n    std::vector<int> sortedNums = nums;\n    std::vector<int> sumDigit(nums.size());\n\n    if (nums.empty()) {\n        return sortedNums;\n    }\n\n    for (size_t i = 0; i < nums.size(); ++i) {\n        sumDigit[i] = sumDigits(nums[i]);\n    }\n\n    for (size_t i = 0; i < nums.size(); ++i) {\n        for (size_t j = i + 1; j < nums.size(); ++j) {\n            if (sumDigit[j] < sumDigit[i] || (sumDigit[j] == sumDigit[i] && std::abs(nums[j]) < std::abs(nums[i]))) {\n                std::swap(sumDigit[j], sumDigit[i]);\n                std::swap(sortedNums[j], sortedNums[i]);\n            }\n        }\n    }\n\n    return sortedNums;\n}\n\n// Function to check if two vectors are equal\nbool isSame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Assert function to check conditions\nvoid assertCondition(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    std::vector<int> nums, result;\n\n    nums = {1, 11, -1, -11, -12};\n    result = orderByPoints(nums);\n    assertCondition(isSame(result, {-1, -11, 1, -12, 11}));\n\n    nums = {1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46};\n    result = orderByPoints(nums);\n    assertCondition(isSame(result, {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n\n    nums = {};\n    result = orderByPoints(nums);\n    assertCondition(isSame(result, nums));\n\n    nums = {1, -11, -32, 43, 54, -98, 2, -3};\n    result = orderByPoints(nums);\n    assertCondition(isSame(result, {-3, -32, -98, -11, 1, 2, 43, 54}));\n\n    nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    result = orderByPoints(nums);\n    assertCondition(isSame(result, {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n\n    nums = {0, 6, 6, -76, -21, 23, 4};\n    result = orderByPoints(nums);\n    assertCondition(isSame(result, {-76, -21, 0, 4, 23, 6, 6}));\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n\nclass SpecialFilter {\npublic:\n    static int specialFilter(const std::vector<int>& nums) {\n        int num = 0;\n        for (size_t i = 0; i < nums.size(); ++i) {\n            if (nums[i] > 10) {\n                std::string w = std::to_string(nums[i]);\n                if (std::isdigit(w[0]) && std::isdigit(w[w.length() - 1]) &&\n                    (std::stoi(std::string(1, w[0])) % 2 == 1) &&\n                    (std::stoi(std::string(1, w[w.length() - 1])) % 2 == 1)) {\n                    num++;\n                }\n            }\n        }\n        return num;\n    }\n\n    static int specialFilterEmpty() {\n        return 0;\n    }\n};\n\nint main() {\n    // Test cases\n    if (SpecialFilter::specialFilter({5, -2, 1, -5}) != 0) {\n        std::cerr << "Test case 1 failed" << std::endl;\n        return 1;\n    }\n\n    if (SpecialFilter::specialFilter({15, -73, 14, -15}) != 1) {\n        std::cerr << "Test case 2 failed" << std::endl;\n        return 1;\n    }\n\n    if (SpecialFilter::specialFilter({33, -2, -3, 45, 21, 109}) != 2) {\n        std::cerr << "Test case 3 failed" << std::endl;\n        return 1;\n    }\n\n    if (SpecialFilter::specialFilter({43, -12, 93, 125, 121, 109}) != 4) {\n        std::cerr << "Test case 4 failed" << std::endl;\n        return 1;\n    }\n\n    if (SpecialFilter::specialFilter({71, -2, -33, 75, 21, 19}) != 3) {\n        std::cerr << "Test case 5 failed" << std::endl;\n        return 1;\n    }\n\n    if (SpecialFilter::specialFilter({1}) != 0) {\n        std::cerr << "Test case 6 failed" << std::endl;\n        return 1;\n    }\n\n    // Handle empty array case separately\n    if (SpecialFilter::specialFilterEmpty() != 0) {\n        std::cerr << "Test case 7 failed" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All test cases passed" << std::endl;\n    return 0;\n}
#include <iostream>\n#include <vector>\n\nclass MatrixTriples {\npublic:\n    static int getMatrixTriples(int n) {\n        std::vector<int> a(n);\n        std::vector<std::vector<int>> sum(n + 1, std::vector<int>(3, 0));\n        std::vector<std::vector<int>> sum2(n + 1, std::vector<int>(3, 0));\n\n        // Initialize arrays\n        // sum.assign(n + 1, std::vector<int>(3, 0));\n        // sum2.assign(n + 1, std::vector<int>(3, 0));\n\n        // Fill array 'a' and compute initial sums\n        for (int i = 0; i < n; ++i) {\n            a[i] = (i * i - i + 1) % 3;\n            sum[i + 1] = sum[i];\n            sum[i + 1][a[i]] += 1;\n        }\n\n        // Compute sums for times = 1 and 2\n        for (int times = 0; times < 2; ++times) {\n            for (int i = 0; i < n; ++i) {\n                sum2[i + 1] = sum[i];\n                for (int j = 0; j < 3; ++j) {\n                    sum2[i + 1][(a[i] + j) % 3] += sum[i][j];\n                }\n            }\n            sum = sum2;\n            sum2.assign(n + 1, std::vector<int>(3, 0));\n        }\n\n        return sum[n][0];\n    }\n};\n\nint main() {\n    // Test cases\n    int result = MatrixTriples::getMatrixTriples(5);\n    if (result != 1) {\n        std::cerr << "Assertion failed: getMatrixTriples(5) == 1" << std::endl;\n        return 1;\n    }\n\n    result = MatrixTriples::getMatrixTriples(6);\n    if (result != 4) {\n        std::cerr << "Assertion failed: getMatrixTriples(6) == 4" << std::endl;\n        return 1;\n    }\n\n    result = MatrixTriples::getMatrixTriples(10);\n    if (result != 36) {\n        std::cerr << "Assertion failed: getMatrixTriples(10) == 36" << std::endl;\n        return 1;\n    }\n\n    result = MatrixTriples::getMatrixTriples(100);\n    if (result != 53361) {\n        std::cerr << "Assertion failed: getMatrixTriples(100) == 53361" << std::endl;\n        return 1;\n    }\n\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)); ++i) {\n        if (n % i == 0) {\n            isp = false;\n            break;\n        }\n    }\n    return isp ? x : y;\n}\n\nint main() {\n    // Assertions\n    if (x_or_y(7, 34, 12) != 34) {\n        std::cout << "Assertion failed: x_or_y(7, 34, 12) == 34" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(15, 8, 5) != 5) {\n        std::cout << "Assertion failed: x_or_y(15, 8, 5) == 5" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(3, 33, 5212) != 33) {\n        std::cout << "Assertion failed: x_or_y(3, 33, 5212) == 33" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(1259, 3, 52) != 3) {\n        std::cout << "Assertion failed: x_or_y(1259, 3, 52) == 3" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(7919, -1, 12) != -1) {\n        std::cout << "Assertion failed: x_or_y(7919, -1, 12) == -1" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(3609, 1245, 583) != 583) {\n        std::cout << "Assertion failed: x_or_y(3609, 1245, 583) == 583" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(91, 56, 129) != 129) {\n        std::cout << "Assertion failed: x_or_y(91, 56, 129) == 129" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(6, 34, 1234) != 1234) {\n        std::cout << "Assertion failed: x_or_y(6, 34, 1234) == 1234" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(1, 2, 0) != 0) {\n        std::cout << "Assertion failed: x_or_y(1, 2, 0) == 0" << std::endl;\n        std::exit(1);\n    }\n\n    if (x_or_y(2, 2, 0) != 2) {\n        std::cout << "Assertion failed: x_or_y(2, 2, 0) == 2" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All assertions passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cstdlib>\n\nusing namespace std;\n\nint64_t double_the_difference(const vector<double>& lst) {\n    int64_t sum = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        double rounded_value = round(lst[i]);\n        if (abs(lst[i] - rounded_value) < 1e-4) {\n            if (lst[i] > 0 && static_cast<int>(rounded_value) % 2 == 1) {\n                sum += static_cast<int64_t>(rounded_value) * static_cast<int64_t>(rounded_value);\n            }\n        }\n    }\n    return sum;\n}\n\nvoid assert_condition(bool condition) {\n    if (!condition) {\n        cerr << "Assertion failed" << endl;\n        exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert_condition(double_the_difference({0.0}) == 0);\n    assert_condition(double_the_difference({5.0, 4.0}) == 25);\n    assert_condition(double_the_difference({0.1, 0.2, 0.3}) == 0);\n    assert_condition(double_the_difference({-10.0, -20.0, -30.0}) == 0);\n    assert_condition(double_the_difference({-1.0, -2.0, 8.0}) == 0);\n    assert_condition(double_the_difference({0.2, 3.0, 5.0}) == 34);\n\n    // Initialize variables\n    int64_t odd_sum = 0;\n    vector<double> lst(100, 0.0);\n\n    // Fill the array and calculate odd_sum\n    for (int i = -99; i <= 99; i += 2) {\n        lst[(i + 101) / 2] = static_cast<double>(i);\n        if (i > 0 && i % 2 == 1) {\n            odd_sum += static_cast<int64_t>(i) * static_cast<int64_t>(i);\n        }\n    }\n\n    // Check the final assertion\n    int64_t result = double_the_difference(lst);\n    assert_condition(result == odd_sum);\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cstdlib>\n\nbool cycpattern_check(const std::string& a, const std::string& b) {\n    int len_a = a.length();\n    int len_b = b.length();\n\n    for (int i = 0; i < len_b; ++i) {\n        std::string rotate = b.substr(i, len_b - i) + b.substr(0, i);\n        // Debugging print statement\n        // std::cout << "Checking rotation: " << rotate << std::endl;\n        if (a.find(rotate) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    if (cycpattern_check("xyzw", "xyw")) {\n        std::cerr << "Assertion failed: cycpattern_check('xyzw', 'xyw') == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!cycpattern_check("yello", "ell")) {\n        std::cerr << "Assertion failed: cycpattern_check('yello', 'ell') == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (cycpattern_check("whattup", "ptut")) {\n        std::cerr << "Assertion failed: cycpattern_check('whattup', 'ptut') == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!cycpattern_check("efef", "fee")) {\n        std::cerr << "Assertion failed: cycpattern_check('efef', 'fee') == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (cycpattern_check("abab", "aabb")) {\n        std::cerr << "Assertion failed: cycpattern_check('abab', 'aabb') == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!cycpattern_check("winemtt", "tinem")) {\n        std::cerr << "Assertion failed: cycpattern_check('winemtt', 'tinem') == true" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}
#include <iostream>\n#include <cstdlib>\n#include <string>\n#include <cmath>\n\n// Function to count even and odd digits in a number\nstd::pair<int, int> even_odd_count(int num) {\n    int n1 = 0, n2 = 0;\n    std::string w = std::to_string(std::abs(num));\n    int len = w.length();\n\n    // Count even and odd digits\n    for (int i = 0; i < len; ++i) {\n        if ((w[i] - '0') % 2 == 1) {\n            n1++;\n        } else {\n            n2++;\n        }\n    }\n\n    return std::make_pair(n2, n1);\n}\n\n// Function to check if two pairs are equal\nbool issame(const std::pair<int, int>& a, const std::pair<int, int>& b) {\n    return a.first == b.first && a.second == b.second;\n}\n\n// Subroutine to assert conditions\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert(issame(even_odd_count(7), std::make_pair(0, 1)));\n    assert(issame(even_odd_count(-78), std::make_pair(1, 1)));\n    assert(issame(even_odd_count(3452), std::make_pair(2, 2)));\n    assert(issame(even_odd_count(346211), std::make_pair(3, 3)));\n    assert(issame(even_odd_count(-345821), std::make_pair(3, 3)));\n    assert(issame(even_odd_count(-2), std::make_pair(1, 0)));\n    assert(issame(even_odd_count(-45347), std::make_pair(2, 3)));\n    assert(issame(even_odd_count(0), std::make_pair(1, 0)));\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <vector>\n#include <cstdlib>\n\nstd::string int_to_mini_roman(int number) {\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000, "m"}, {900, "cm"}, {500, "d"}, {400, "cd"},\n        {100, "c"}, {90, "xc"}, {50, "l"}, {40, "xl"},\n        {10, "x"}, {9, "ix"}, {5, "v"}, {4, "iv"}, {1, "i"}\n    };\n\n    std::string result = "";\n    int pos = 0;\n    int temp_number = number;\n\n    while (temp_number > 0) {\n        while (temp_number >= roman_numerals[pos].first) {\n            result += roman_numerals[pos].second;\n            temp_number -= roman_numerals[pos].first;\n        }\n        pos++;\n    }\n\n    return result;\n}\n\nvoid assert_equals(const std::string& expected, const std::string& actual) {\n    if (expected != actual) {\n        std::cerr << "Assertion failed: expected " << expected << ", got " << actual << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    // Test cases\n    assert_equals("xix", int_to_mini_roman(19));\n    assert_equals("clii", int_to_mini_roman(152));\n    assert_equals("ccli", int_to_mini_roman(251));\n    assert_equals("cdxxvi", int_to_mini_roman(426));\n    assert_equals("d", int_to_mini_roman(500));\n    assert_equals("i", int_to_mini_roman(1));\n    assert_equals("iv", int_to_mini_roman(4));\n    assert_equals("xliii", int_to_mini_roman(43));\n    assert_equals("xc", int_to_mini_roman(90));\n    assert_equals("xciv", int_to_mini_roman(94));\n    assert_equals("dxxxii", int_to_mini_roman(532));\n    assert_equals("cm", int_to_mini_roman(900));\n    assert_equals("cmxciv", int_to_mini_roman(994));\n    assert_equals("m", int_to_mini_roman(1000));\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <cmath>\n#include <cstdlib>\n\n// Function declaration\nbool right_angle_triangle(float a, float b, float c);\n\nint main() {\n    // Assertions\n    if (!right_angle_triangle(3.0f, 4.0f, 5.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(3, 4, 5) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (right_angle_triangle(1.0f, 2.0f, 3.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(1, 2, 3) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!right_angle_triangle(10.0f, 6.0f, 8.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(10, 6, 8) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (right_angle_triangle(2.0f, 2.0f, 2.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(2, 2, 2) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!right_angle_triangle(7.0f, 24.0f, 25.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(7, 24, 25) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (right_angle_triangle(10.0f, 5.0f, 7.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(10, 5, 7) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (!right_angle_triangle(5.0f, 12.0f, 13.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(5, 12, 13) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (!right_angle_triangle(15.0f, 8.0f, 17.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(15, 8, 17) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (!right_angle_triangle(48.0f, 55.0f, 73.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(48, 55, 73) == true" << std::endl;\n        std::exit(1);\n    }\n\n    if (right_angle_triangle(1.0f, 1.0f, 1.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(1, 1, 1) == false" << std::endl;\n        std::exit(1);\n    }\n\n    if (right_angle_triangle(2.0f, 2.0f, 10.0f)) {\n        std::cout << "Assertion failed: right_angle_triangle(2, 2, 10) == false" << std::endl;\n        std::exit(1);\n    }\n\n    return 0;\n}\n\n// Function definition\nbool right_angle_triangle(float a, float b, float c) {\n    float epsilon = 1.0e-4;\n\n    if (std::abs(a*a + b*b - c*c) < epsilon || std::abs(a*a + c*c - b*b) < epsilon || std::abs(b*b + c*c - a*a) < epsilon) {\n        return true;\n    } else {\n        return false;\n    }\n}
#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nstd::string find_max(const std::vector<std::string>& words) {\n    std::string max_word = "";\n    int maxu = 0;\n\n    for (const auto& word : words) {\n        std::string unique = "";\n        for (char c : word) {\n            if (unique.find(c) == std::string::npos) {\n                unique += c;\n            }\n        }\n        if (unique.length() > maxu || (unique.length() == maxu && word < max_word)) {\n            max_word = word;\n            maxu = unique.length();\n        }\n    }\n\n    return max_word;\n}\n\nint main() {\n    // Test cases\n    assert(find_max({"name   ", "of     ", "string "}) == "string");\n    assert(find_max({"name   ", "enam   ", "game   "}) == "enam");\n    assert(find_max({"aaaaaaa", "bb     ", "cc     "}) == "aaaaaaa");\n    assert(find_max({"abc    ", "cba    "}) == "abc");\n    assert(find_max({"play    ", "this    ", "game    ", "of      ", "footbott"}) == "footbott");\n    assert(find_max({"we      ", "are     ", "gonna   ", "rock    "}) == "gonna");\n    assert(find_max({"we      ", "are     ", "a       ", "mad     ", "nation  "}) == "nation");\n    assert(find_max({"this    ", "is      ", "a       ", "prrk    "}) == "this");\n    assert(find_max({"b       "}) == "b");\n    assert(find_max({"play    ", "play    ", "play    "}) == "play");\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}\n\nThis C++ program includes the `find_max` function that takes a vector of strings as input and returns the string with the maximum unique characters. The `main` function contains a series of assertions that test the `find_max` function with various inputs and expected outputs. If all assertions pass, it prints "All tests passed."
#include <iostream>\n#include <cstdlib>\n#include <array>\n\nstd::array<int, 2> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return {number + remaining, 0};\n    } else {\n        return {number + need, remaining - need};\n    }\n}\n\nbool issame(const std::array<int, 2>& a, const std::array<int, 2>& b) {\n    return a[0] == b[0] && a[1] == b[1];\n}\n\nint main() {\n    std::array<int, 2> result;\n    std::array<int, 2> expected;\n\n    // Test cases\n    result = eat(5, 6, 10);\n    expected = {11, 4};\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed: eat(5, 6, 10) == {11, 4}" << std::endl;\n        std::exit(1);\n    }\n\n    result = eat(4, 8, 9);\n    expected = {12, 1};\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed: eat(4, 8, 9) == {12, 1}" << std::endl;\n        std::exit(1);\n    }\n\n    result = eat(1, 10, 10);\n    expected = {11, 0};\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed: eat(1, 10, 10) == {11, 0}" << std::endl;\n        std::exit(1);\n    }\n\n    result = eat(2, 11, 5);\n    expected = {7, 0};\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed: eat(2, 11, 5) == {7, 0}" << std::endl;\n        std::exit(1);\n    }\n\n    result = eat(4, 5, 7);\n    expected = {9, 2};\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed: eat(4, 5, 7) == {9, 2}" << std::endl;\n        std::exit(1);\n    }\n\n    result = eat(4, 5, 1);\n    expected = {5, 0};\n    if (!issame(result, expected)) {\n        std::cerr << "Assertion failed: eat(4, 5, 1) == {5, 0}" << std::endl;\n        std::exit(1);\n    }\n\n    std::cout << "All tests passed." << std::endl;\n\n    return 0;\n}
#include <iostream>\n#include <string>\n#include <cctype>\n\nstd::string solve(const std::string& s) {\n    std::string out;\n    int nletter = 0;\n    for (char c : s) {\n        if (std::isupper(c)) {\n            out += std::tolower(c);\n        } else if (std::islower(c)) {\n            out += std::toupper(c);\n        } else {\n            nletter++;\n        }\n    }\n    if (nletter == s.length()) {\n        std::reverse(out.begin(), out.end());\n    }\n    return out;\n}\n\nint main() {\n    // Test cases\n    if (solve("AsDf") != "aSdF") {\n        std::cerr << "Assertion failed: solve('AsDf') == 'aSdF'" << std::endl;\n        return 1;\n    }\n\n    if (solve("1234") != "4321") {\n        std::cerr << "Assertion failed: solve('1234') == '4321'" << std::endl;\n        return 1;\n    }\n\n    if (solve("ab") != "AB") {\n        std::cerr << "Assertion failed: solve('ab') == 'AB'" << std::endl;\n        return 1;\n    }\n\n    if (solve("#a@C") != "#A@c") {\n        std::cerr << "Assertion failed: solve('#a@C') == '#A@c'" << std::endl;\n        return 1;\n    }\n\n    if (solve("#AsdfW^45") != "#aSDFw^45") {\n        std::cerr << "Assertion failed: solve('#AsdfW^45') == '#aSDFw^45'" << std::endl;\n        return 1;\n    }\n\n    if (solve("#6@2") != "2@6#") {\n        std::cerr << "Assertion failed: solve('#6@2') == '2@6#'" << std::endl;\n        return 1;\n    }\n\n    if (solve("#$a^D") != "#$A^d") {\n        std::cerr << "Assertion failed: solve('#$a^D') == '#$A^d'" << std::endl;\n        return 1;\n    }\n\n    if (solve("#ccc") != "#CCC") {\n        std::cerr << "Assertion failed: solve('#ccc') == '#CCC'" << std::endl;\n        return 1;\n    }\n\n    std::cout << "All tests passed." << std::endl;\n    return 0;\n}
#include <cstdlib>\n\n// Function to generate integers based on the given range\nstd::vector<int> generate_integers(int a, int b) {\n    std::vector<int> result;\n    int temp_a = a, temp_b = b;\n\n    if (temp_b < temp_a) {\n        std::swap(temp_a, temp_b);\n    }\n\n    for (int i = temp_a; i <= temp_b; ++i) {\n        if (i < 10 && i % 2 == 0) {\n            result.push_back(i);\n        }\n    }\n\n    return result;\n}\n\n// Function to check if two vectors are the same\nbool issame(const std::vector<int>& a, const std::vector<int>& b) {\n    if (a.size() != b.size()) {\n        return false;\n    }\n\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Assert function for error handling\nvoid assert(bool condition) {\n    if (!condition) {\n        std::cerr << "Assertion failed" << std::endl;\n        std::exit(1);\n    }\n}\n\nint main() {\n    std::vector<int> result;\n    std::vector<int> empty_array; // Equivalent to Fortran's zero-sized array\n\n    // Test cases\n    result = generate_integers(2, 10);\n    assert(issame(result, {2, 4, 6, 8}));\n\n    result = generate_integers(10, 2);\n    assert(issame(result, {2, 4, 6, 8}));\n\n    result = generate_integers(132, 2);\n    assert(issame(result, {2, 4, 6, 8}));\n\n    result = generate_integers(17, 89);\n    assert(issame(result, empty_array));  // Using empty_array for comparison\n\n    std::cout << "All tests passed successfully." << std::endl;\n\n    return 0;\n}
